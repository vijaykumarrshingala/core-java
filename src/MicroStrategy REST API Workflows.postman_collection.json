{
	"info": {
		"_postman_id": "aa2e6191-c401-4ce4-840f-4fc606bfba23",
		"name": "MicroStrategy REST API Workflows",
		"description": "To learn more about our workflows visit the [REST API Documentation](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Common_Workflows.htm)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2493158"
	},
	"item": [
		{
			"name": "Analytics",
			"item": [
				{
					"name": "Object discovery",
					"item": [
						{
							"name": "Folder Browsing",
							"item": [
								{
									"name": "Browse Folders",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search for folders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/Search\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_folderId\", pm.response.json().result[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=8",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Sales",
															"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
															"disabled": true
														},
														{
															"key": "pattern",
															"value": "4",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
															"disabled": true
														},
														{
															"key": "root",
															"value": "",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "8",
															"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
														},
														{
															"key": "viewMedia",
															"value": null,
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": null,
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "true",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Contents of a folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/folder contents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														":id"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "1",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "id",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_folderId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_folderId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to search for folders and retrieve the contents of a folder."
								},
								{
									"name": "Create and Delete Folders",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search for folders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/Search\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_folderId\", pm.response.json().result[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=8",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Sales",
															"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
															"disabled": true
														},
														{
															"key": "pattern",
															"value": "4",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
															"disabled": true
														},
														{
															"key": "root",
															"value": "",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "8",
															"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
														},
														{
															"key": "viewMedia",
															"value": null,
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": null,
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "true",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a new folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and delete folders/create folder\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_newFolderId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"new_folder\",\n  \"description\": \"test folder created by postman workflow\",\n  \"parent\": \"{{rd_folderId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/folders/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Contents of parent folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/folder contents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														":id"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "1",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "id",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_folderId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Contents of new folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/folder contents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														":id"
													],
													"query": [
														{
															"key": "limit",
															"value": "1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "1",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "id",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_newFolderId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete new folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete folder\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_newFolderId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_folderId\");",
															"    pm.environment.unset(\"rd_newFolderId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to create and delete a new folder."
								},
								{
									"name": "Browse Predefined Folders",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contents of a predefined folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse predefined folders/predefined folder contents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/preDefined/:folderType",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														"preDefined",
														":folderType"
													],
													"query": [
														{
															"key": "offset",
															"value": null,
															"description": "Starting point within the collection of returned results. Used to control paging behavior. Default is 1.\n\nDefault value : 0",
															"disabled": true
														},
														{
															"key": "limit",
															"value": null,
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1\n\n",
															"disabled": true
														},
														{
															"key": "fields",
															"value": null,
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "folderType",
															"value": "7",
															"description": "(Required) Pre-defined folder type, from [EnumDSSXMLFolderNames](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLFolderNames.html)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Contents of personal objects folder",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse predefined folders/personal folder contents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/folders/myPersonalObjects",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"folders",
														"myPersonalObjects"
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "View contents of any of the predefined folders listed in EnumDSSXMLFolderNames\n\nhttps://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLFolderNames.html"
								}
							],
							"description": "You can use REST API requests to browse folders through the Modeling service."
						},
						{
							"name": "Search for Objects",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available projects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for Objects/Get list of available projects\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[0].id;",
													"    pm.environment.set(\"rd_projectId\", projectId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for metrics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Revenue&type=4&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Revenue",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "4",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Search for filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=sales&type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "sales",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "1",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Search for reports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=sales&type=3&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "sales",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "3",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Search for documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=sales&type=55&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "sales",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "55",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Search for dossiers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?pattern=4&type=781&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "781",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Search for project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=MicroStrategy Tutorial&type=8&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "MicroStrategy Tutorial",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "8",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_projectId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to perform a quick search for specific objects.\n\nSearch Types:\n\n[https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html](https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)\n\nObject Types:\n\n[https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html](https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)"
						},
						{
							"name": "Data Lineage Analysis",
							"item": [
								{
									"name": "Object Components",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create search for object components",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object Components/Create search for object components\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_searchId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results?domain=2&usedByObject={{projectId}};32&usedByRecursive=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results"
													],
													"query": [
														{
															"key": "domain",
															"value": "2"
														},
														{
															"key": "usedByObject",
															"value": "{{projectId}};32",
															"description": "objectID;objectType"
														},
														{
															"key": "usedByRecursive",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "View object components",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object Components/View object components\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results?searchId={{rd_searchId}}&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results"
													],
													"query": [
														{
															"key": "searchId",
															"value": "{{rd_searchId}}"
														},
														{
															"key": "limit",
															"value": "100"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "View object components as a tree",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object Components/View object components\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results/tree?searchId={{rd_searchId}}&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results",
														"tree"
													],
													"query": [
														{
															"key": "searchId",
															"value": "{{rd_searchId}}"
														},
														{
															"key": "limit",
															"value": "100"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_searchId\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "The workflow sample below demonstrates how to perform data lineage analysis on object components."
								},
								{
									"name": "Object Dependents",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create search for object dependents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object dependents/Create search for object dependents\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    pm.environment.set(\"rd_searchId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results?domain=2&usesObject=8107C318DD9911D3B98100C04F2233EA;11&usesRecursive=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results"
													],
													"query": [
														{
															"key": "domain",
															"value": "2",
															"description": "https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchDomain.html"
														},
														{
															"key": "usesObject",
															"value": "8107C318DD9911D3B98100C04F2233EA;11",
															"description": "objectID;objectType"
														},
														{
															"key": "usesRecursive",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "View object dependents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object dependents/View object dependents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results?searchId={{rd_searchId}}&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results"
													],
													"query": [
														{
															"key": "searchId",
															"value": "{{rd_searchId}}"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "fields",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "View object dependents as tree",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Object dependents/View object dependents\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "optional",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/metadataSearches/results/tree?searchId={{rd_searchId}}&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"metadataSearches",
														"results",
														"tree"
													],
													"query": [
														{
															"key": "searchId",
															"value": "{{rd_searchId}}"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "fields",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_searchId\");",
															"",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "The workflow sample below demonstrates how to perform data lineage analysis on object dependents."
								}
							],
							"description": "We can use search API to perform data lineage analysis on the metadata."
						}
					]
				},
				{
					"name": "Project management",
					"item": [
						{
							"name": "Manage Project Load Settings on Intelligence Server Startup",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Get the current project load settings on Intelligence Server startup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Manage Project Load Settings on Intelligence Server Startup/get load settings\", function () {",
													"    pm.response.to.have.status(200);",
													"    data = pm.response.json();",
													"    projectId = pm.environment.get(\"projectId\");",
													"    nodes = JSON.stringify(data.projects[projectId].nodes);",
													"    pm.environment.set(\"rd_nodes\", nodes);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/settings/onStartup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												"settings",
												"onStartup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the project load settings on Intelligence Server startup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Manage Project Load Settings on Intelligence Server Startup/patch load settings\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"operationList\":[\n      {\n         \"op\":\"replace\",\n         \"path\":\"/projects/{{projectId}}/nodes\",\n         \"value\": {{rd_nodes}}\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects/settings/onStartup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												"settings",
												"onStartup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_nodes\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "A high-level workflow sample for loading project settings at the startup of the Intelligence Server is shown in this folder."
						},
						{
							"name": "Manage Project Settings",
							"item": [
								{
									"name": "Manage Project Settings",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create project for authenticated user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create a project for authenticated user\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-AsyncMode",
														"value": "true",
														"description": "Specifies whether to make the call synchronously or asynchronously; make the call asynchronously if set to true",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"My Test Project\",\n    \"description\": \"Test Project Created by REST API Workflow\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/projects",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"projects"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new project, either synchronously or asynchronously. It can take several minutes to create a project. To fetch the actual project information, you need to poll using GET projects/{name}. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify whether to make the call synchronously or asynchronously in the request header. You provide the project name in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Get a specific project for authenticated user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get a specific project for authenticated user\", function () {",
															"    pm.response.to.have.status(200);",
															"    const projectId = pm.response.json()[\"id\"];",
															"    pm.environment.set(\"rd_projectId\", projectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/projects/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"projects",
														":name"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "My Test Project",
															"description": "(Required) Project name"
														}
													]
												},
												"description": "Get a specific project that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of the specified project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specifiy the name of the project in the path of the request."
											},
											"response": []
										},
										{
											"name": "Get the project setting configurations",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get the project setting configurations\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/projects/:projectId/settings/config",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"projects",
														":projectId",
														"settings",
														"config"
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the setting values for a specific project",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get the setting values for a specific project\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/projects/:projectId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"projects",
														":projectId",
														"settings"
													],
													"query": [
														{
															"key": "level",
															"value": "",
															"description": "Object model level\n\nDefault value : admin",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a part of the setting values for a specific project",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a part of the setting values for a specific project\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"enableDeleteObjectDependencies\": {\n    \"value\": false\n  },\n  \"cacheEncryptionLevel\": {\n    \"value\": 0\n  },\n  \"maxEmailSubscriptionCount\": {\n    \"value\": -1\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/projects/:projectId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"projects",
														":projectId",
														"settings"
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update all project setting values",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update all project setting values\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"enableDeleteObjectDependencies\": {\n        \"value\": false\n    },\n    \"appendInfoForEmailDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"email_address\",\n            \"error_message\"\n        ]\n    },\n    \"cacheEncryptionLevel\": {\n        \"value\": 0\n    },\n    \"maxEmailSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"dynamicSourcingOuterJoin\": {\n        \"value\": false\n    },\n    \"maxDataUploadSize\": {\n        \"value\": 31457280\n    },\n    \"defaultTimezone\": {\n        \"value\": \"\"\n    },\n    \"fileCompressionLevel\": {\n        \"value\": 6\n    },\n    \"showBaseViewInLibrary\": {\n        \"value\": \"use_inherited_value\"\n    },\n    \"maxReportExecutionTime\": {\n        \"value\": 600\n    },\n    \"maxJobPerUserAccount\": {\n        \"value\": 100\n    },\n    \"appendInfoForHistoryListDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"link_to_history_list\",\n            \"error_message\"\n        ]\n    },\n    \"enableFileDeliveryNotification\": {\n        \"value\": true\n    },\n    \"emailAddressForFTPDelivery\": {\n        \"value\": \"\"\n    },\n    \"appendTextForCacheCreation\": {\n        \"value\": \"\"\n    },\n    \"nullDisplayForWarehouse\": {\n        \"value\": \"\"\n    },\n    \"enableEmailCompression\": {\n        \"value\": true\n    },\n    \"appendTextForEmailDelivery\": {\n        \"value\": \"\"\n    },\n    \"emailCompressionExtension\": {\n        \"value\": \"zip\"\n    },\n    \"maxPersonalViewSubscriptionPerUser\": {\n        \"value\": -1\n    },\n    \"enableTimezone\": {\n        \"value\": false\n    },\n    \"createUpdateCaches\": {\n        \"value\": true\n    },\n    \"recordReportJobSteps\": {\n        \"value\": false\n    },\n    \"enableEmailDeliveryNotification\": {\n        \"value\": true\n    },\n    \"enableNotificationForFailedPrintDelivery\": {\n        \"value\": true\n    },\n    \"maxInteractiveProjectSessionPerUser\": {\n        \"value\": 20\n    },\n    \"maxMstrFileSize\": {\n        \"value\": 104857600\n    },\n    \"maxDatamartResultRowCount\": {\n        \"value\": 32000\n    },\n    \"maxFTPSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"enableURLFileUploadViaHttpHttps\": {\n        \"value\": false\n    },\n    \"maxHistoryListInboxMessage\": {\n        \"value\": -1\n    },\n    \"elementCachePerPassThroughLogin\": {\n        \"value\": true\n    },\n    \"enableCreateCachesPerDatabaseConnection\": {\n        \"value\": false\n    },\n    \"statisticsPurgeTimeout\": {\n        \"value\": 10\n    },\n    \"enableURLFileUploadViaFtpFtps\": {\n        \"value\": false\n    },\n    \"nullValueForSortedReportData\": {\n        \"value\": false\n    },\n    \"dynamicSourcingDefault\": {\n        \"value\": false\n    },\n    \"maxReportResultRowCount\": {\n        \"value\": 32000\n    },\n    \"resultAllElementRowCount\": {\n        \"value\": -1\n    },\n    \"appendTextForPrintDelivery\": {\n        \"value\": \"\"\n    },\n    \"allowDrillOut\": {\n        \"value\": false\n    },\n    \"maxCubeCount\": {\n        \"value\": 1000\n    },\n    \"recordMobileClients\": {\n        \"value\": false\n    },\n    \"reRunEmailFilePrintSubscription\": {\n        \"value\": false\n    },\n    \"enableDocumentOutputCachingInPdf\": {\n        \"value\": true\n    },\n    \"maxMemoryPerDataFetch\": {\n        \"value\": 2147483648\n    },\n    \"appendTextForFTPDelivery\": {\n        \"value\": \"\"\n    },\n    \"maxElementCacheMemoryConsumption\": {\n        \"value\": 536870912\n    },\n    \"maxObjectCacheMemoryConsumption\": {\n        \"value\": 1073741824\n    },\n    \"maxRAMForReportRWDCacheIndex\": {\n        \"value\": 100\n    },\n    \"metadataLocale\": {\n        \"value\": \"default\"\n    },\n    \"enableLibraryBookmarkCaching\": {\n        \"value\": true\n    },\n    \"cubeStorageLocation\": {\n        \"value\": \"\"\n    },\n    \"deliveryErrorHandlingNoDataReturned\": {\n        \"value\": false\n    },\n    \"enablePrintDeliveryNotification\": {\n        \"value\": true\n    },\n    \"warehouseDataLocale\": {\n        \"value\": \"default\",\n        \"locales\": [\n            {\n                \"name\": \"(Default)\",\n                \"value\": \"default\"\n            }\n        ]\n    },\n    \"enableDynamicSourcing\": {\n        \"value\": true\n    },\n    \"maxPromptWaitingTime\": {\n        \"value\": 600\n    },\n    \"cubeIndexGrowthUpperBound\": {\n        \"value\": 500\n    },\n    \"enableReportServerCaching\": {\n        \"value\": true\n    },\n    \"appendInfoForCacheCreation\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"error_message\"\n        ]\n    },\n    \"historyListSaveReportServicesDocumentDatasetMsg\": {\n        \"value\": true\n    },\n    \"maxHistoryListMsgCountPerProject\": {\n        \"value\": -1\n    },\n    \"emailAddressForHistoryListDelivery\": {\n        \"value\": \"\"\n    },\n    \"defaultDossierTemplate\": {\n        \"value\": \"\",\n        \"value_name\": \"\"\n    },\n    \"sortDrillPath\": {\n        \"value\": false\n    },\n    \"enableFTPCompression\": {\n        \"value\": true\n    },\n    \"maxAttributeElementFetch\": {\n        \"value\": 1000\n    },\n    \"applyAutoExpirationForReportsContainDynamicDate\": {\n        \"value\": true\n    },\n    \"enableCreateCachesPerUser\": {\n        \"value\": false\n    },\n    \"maxRWDCacheMemoryConsumption\": {\n        \"value\": 4294967296\n    },\n    \"emptyReportMessage\": {\n        \"value\": \"\"\n    },\n    \"finalDocumentDossierResultRowNumber\": {\n        \"value\": 50000000\n    },\n    \"cubeIndexGrowthCheckFrequency\": {\n        \"value\": 30\n    },\n    \"mergeSecurityFilters\": {\n        \"value\": 0\n    },\n    \"appendInfoForFTPDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"file_location\",\n            \"link_to_file\",\n            \"error_message\"\n        ]\n    },\n    \"enableNotificationForFailedFileDelivery\": {\n        \"value\": true\n    },\n    \"maxFileSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"deliveryErrorHandlingNotifyNoDataReturned\": {\n        \"value\": false\n    },\n    \"emailAddressForMobileDelivery\": {\n        \"value\": \"\"\n    },\n    \"projectReportFileCachePath\": {\n        \"value\": \".\\\\Caches\\\\cloud_10s\"\n    },\n    \"enableURLFileUpload\": {\n        \"value\": false\n    },\n    \"enableCachingForPromptedReportDocument\": {\n        \"value\": true\n    },\n    \"reportCacheLoadOnStart\": {\n        \"value\": true\n    },\n    \"emailAddressForFileDelivery\": {\n        \"value\": \"\"\n    },\n    \"maxJobPerProject\": {\n        \"value\": 1000\n    },\n    \"elementCachePerConnectionMap\": {\n        \"value\": true\n    },\n    \"enableDocumentOutputCachingInXml\": {\n        \"value\": true\n    },\n    \"applyElementCacheUsesSecurityFilters\": {\n        \"value\": true\n    },\n    \"ftpCompressionExtension\": {\n        \"value\": \"zip\"\n    },\n    \"recordDocumentJobSteps\": {\n        \"value\": false\n    },\n    \"recordReportJobSQL\": {\n        \"value\": false\n    },\n    \"maxRWDCacheCount\": {\n        \"value\": 100000\n    },\n    \"webServerHistoryListLocation\": {\n        \"value\": \"\"\n    },\n    \"maxReportCacheMemoryConsumption\": {\n        \"value\": 268435456\n    },\n    \"defaultDrillMap\": {\n        \"value\": \"\",\n        \"value_name\": \"\"\n    },\n    \"loadCubeIntoServerMemoryUponPublication\": {\n        \"value\": true\n    },\n    \"maxNodesForVisualizations\": {\n        \"value\": 1000000\n    },\n    \"enableNotificationForFailedFTPDelivery\": {\n        \"value\": true\n    },\n    \"maxHistoryListSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"maxCubeQuota\": {\n        \"value\": 104857600\n    },\n    \"appendTextForHistoryListDelivery\": {\n        \"value\": \"\"\n    },\n    \"maxExecutingJobsPerUser\": {\n        \"value\": -1\n    },\n    \"appendInfoForFileDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"file_location\",\n            \"link_to_file\",\n            \"error_message\"\n        ]\n    },\n    \"enableFindReplaceObjectDependencies\": {\n        \"value\": false\n    },\n    \"maxJobPerUserConnection\": {\n        \"value\": 100\n    },\n    \"maxCacheUpdateSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"maxPrintSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"reportCacheLifeTime\": {\n        \"value\": 24\n    },\n    \"emailAddressForCacheCreation\": {\n        \"value\": \"\"\n    },\n    \"enableDistributionServicePrintRange\": {\n        \"value\": true\n    },\n    \"enableCacheCreationNotification\": {\n        \"value\": true\n    },\n    \"enableDistributionServiceEmailFooter\": {\n        \"value\": false\n    },\n    \"maxInternalResultRowCount\": {\n        \"value\": 32000\n    },\n    \"distributionServiceEmailFooter\": {\n        \"value\": \"\"\n    },\n    \"enableDocumentOutputCachingInHtml\": {\n        \"value\": true\n    },\n    \"intermediateDocumentDossierResultRowNumber\": {\n        \"value\": 50000000\n    },\n    \"historyListSaveExportResultForInteractiveExecution\": {\n        \"value\": false\n    },\n    \"enableNotificationForFailedHistoryListDelivery\": {\n        \"value\": true\n    },\n    \"collectStatistics\": {\n        \"value\": false\n    },\n    \"enableStatisticsMobileClientLocation\": {\n        \"value\": false\n    },\n    \"enableHistoryListDeliveryNotification\": {\n        \"value\": true\n    },\n    \"maxUserConnectionPerProject\": {\n        \"value\": 500\n    },\n    \"orderMultiSourceDBI\": {\n        \"value\": 0\n    },\n    \"appendInfoForPrintDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"printer_name\",\n            \"error_message\"\n        ]\n    },\n    \"maxInteractiveJobPerProject\": {\n        \"value\": 600\n    },\n    \"keepDocumentAvailableForManipulationForHistoryListSubscriptionOnly\": {\n        \"value\": true\n    },\n    \"notCalculatedDisplay\": {\n        \"value\": \"--\"\n    },\n    \"reportCacheSwapFactor\": {\n        \"value\": 2\n    },\n    \"maxCubeSizeForDownload\": {\n        \"value\": 104857600\n    },\n    \"drillImmediateChildrenParent\": {\n        \"value\": false\n    },\n    \"loadCubesOnStartup\": {\n        \"value\": true\n    },\n    \"nullDisplayForCrossTabulation\": {\n        \"value\": \"\"\n    },\n    \"recordMobileClientsManipulations\": {\n        \"value\": false\n    },\n    \"reRunHistoryListSubscription\": {\n        \"value\": false\n    },\n    \"enableCreateCachesPerDatabaseLogin\": {\n        \"value\": false\n    },\n    \"createCubePerDBConnection\": {\n        \"value\": false\n    },\n    \"smartMemoryUsage4IntelligenceServer\": {\n        \"value\": -1\n    },\n    \"emailCompressionLevel\": {\n        \"value\": 6\n    },\n    \"appendTextForFileDelivery\": {\n        \"value\": \"\"\n    },\n    \"missingObjectDisplay\": {\n        \"value\": \"\"\n    },\n    \"maxCubeMemUsage\": {\n        \"value\": 268435456\n    },\n    \"enableMobilePushUpdate\": {\n        \"value\": true\n    },\n    \"enableFTPDeliveryNotification\": {\n        \"value\": true\n    },\n    \"maxReportCacheCount\": {\n        \"value\": 10000\n    },\n    \"maxCubeResultRowCount\": {\n        \"value\": 32000\n    },\n    \"enableMobileDeliveryNotification\": {\n        \"value\": true\n    },\n    \"displayEmptyReportMessageInRWD\": {\n        \"value\": -1\n    },\n    \"maxSqlGenerationMemoryConsumption\": {\n        \"value\": 2097152000\n    },\n    \"maxMobileSubscriptionCount\": {\n        \"value\": -1\n    },\n    \"recordPromptAnswersForCacheMonitoring\": {\n        \"value\": true\n    },\n    \"deliveryErrorHandlingNotifyPartialResults\": {\n        \"value\": false\n    },\n    \"appendInfoForMobileDelivery\": {\n        \"value\": [\n            \"recipient_name\",\n            \"owner_name\",\n            \"report_document_name\",\n            \"project_name\",\n            \"delivery_method\",\n            \"schedule\",\n            \"subscription_name\",\n            \"delivery_status\",\n            \"date\",\n            \"time\",\n            \"error_message\"\n        ]\n    },\n    \"recordReportAccessedTableColumn\": {\n        \"value\": false\n    },\n    \"enableFileCompression\": {\n        \"value\": true\n    },\n    \"deliveryErrorHandlingPartialResults\": {\n        \"value\": false\n    },\n    \"emailAddressForEmailDelivery\": {\n        \"value\": \"\"\n    },\n    \"enableXmlCachingForReport\": {\n        \"value\": true\n    },\n    \"maxWarehouseJobExecTime\": {\n        \"value\": 3600\n    },\n    \"enablePersonalizedDrillPath\": {\n        \"value\": false\n    },\n    \"ftpCompressionLevel\": {\n        \"value\": 6\n    },\n    \"enableBookmarkSubscriptionCaching\": {\n        \"value\": true\n    },\n    \"emailAddressForPrintDelivery\": {\n        \"value\": \"\"\n    },\n    \"appendTextForMobileDelivery\": {\n        \"value\": \"\"\n    },\n    \"maxScheduledReportExecutionTime\": {\n        \"value\": 600\n    },\n    \"enableDocumentOutputCachingInExcel\": {\n        \"value\": true\n    },\n    \"enableCachingForNonPromptedReportDocument\": {\n        \"value\": true\n    },\n    \"enableURLFileUploadViaFile\": {\n        \"value\": false\n    },\n    \"fileCompressionExtension\": {\n        \"value\": \"zip\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/projects/:projectId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"projects",
														":projectId",
														"settings"
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Project's applicable advanced properties",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read project's applicable advanced properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Read project's applicable advanced properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Project ID or Changeset ID Required) Project ID"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Project ID or Changeset ID Required) Changeset ID",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/projects/:projectId/applicableAdvancedProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"projects",
														":projectId",
														"applicableAdvancedProperties"
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}",
															"description": "(Required) Project ID"
														}
													]
												},
												"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Project's definition and advanced properties",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read project's definition with advanced properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Read a project\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Project ID or Changeset ID Required) Project ID"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Project ID or Changeset ID Required) Changeset ID",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/projects/:projectId?showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"projects",
														":projectId"
													],
													"query": [
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "Show advanced properties of a project"
														}
													],
													"variable": [
														{
															"key": "projectId",
															"value": "{{rd_projectId}}",
															"description": "(Required) Project ID"
														}
													]
												},
												"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Put Project's advanced properties",
									"item": [
										{
											"name": "Update property value on object level",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a changeset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create a changeset\", function () {",
																	"    pm.response.to.have.status(201);",
																	"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization token"
															},
															{
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}",
																"description": "(Required) Project ID"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets"
															],
															"query": [
																{
																	"key": "schemaEdit",
																	"value": "false",
																	"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
																}
															]
														},
														"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Update property value on object level",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Update project's advanced properties\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															},
															{
																"key": "X-MSTR-MS-Changeset",
																"value": "{{rd_changesetId}}",
																"description": "(Required) Changeset ID"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[AnalyticalEngineProperties].[EvaluationOrdering]\": {\n                \"value\": \"1\"\n            }\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/model/projects/:projectId?showAdvancedProperties=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"projects",
																":projectId"
															],
															"query": [
																{
																	"key": "showAdvancedProperties",
																	"value": "true",
																	"description": "(Optional) Specify whether to retrieve the values of the advanced properties.\n\nThe advanced properties are presented in the following groups:\n\n\"vldbProperties\": A list of properties as determined by the common infrastructure.\nIf omitted or false the API will return information field only.\n\nIf true, all applicable advanced properties are returned.\n\n"
																}
															],
															"variable": [
																{
																	"key": "projectId",
																	"value": "{{rd_projectId}}",
																	"description": "(Required)"
																}
															]
														},
														"description": "Updates a specific attribute in the changeset. \nThis request replaces the attribute's top-level fields with the new definition provided in the request body.          \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the object to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly updated attribute to the metadata, commit using the changeset commit API.     \n"
													},
													"response": []
												},
												{
													"name": "Commit the changeset changes to the metadata",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Commit changeset\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets",
																":changesetId",
																"commit"
															],
															"variable": [
																{
																	"key": "changesetId",
																	"value": "{{rd_changesetId}}",
																	"description": "(Required) Changeset ID"
																}
															]
														},
														"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Delete the changeset",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Delete the changeset\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets",
																":changesetId"
															],
															"variable": [
																{
																	"key": "changesetId",
																	"value": "{{rd_changesetId}}",
																	"description": "(Required) Changeset ID"
																}
															]
														},
														"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"authToken\");",
																	"    pm.environment.unset(\"rd_changesetId\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required)"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Update property value with null (set value back to default)",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a changeset",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create a changeset\", function () {",
																	"    pm.response.to.have.status(201);",
																	"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization token"
															},
															{
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}",
																"description": "(Required) Project ID"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets"
															],
															"query": [
																{
																	"key": "schemaEdit",
																	"value": "false",
																	"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
																}
															]
														},
														"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Update property value with null (set value back to default)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Update project's advanced properties\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															},
															{
																"key": "X-MSTR-MS-Changeset",
																"value": "{{rd_changesetId}}",
																"description": "(Required) Changeset ID"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[AnalyticalEngineProperties].[EvaluationOrdering]\": {\n                \"value\": null\n            }\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/model/projects/:projectId?showAdvancedProperties=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"projects",
																":projectId"
															],
															"query": [
																{
																	"key": "showAdvancedProperties",
																	"value": "true",
																	"description": "(Optional) Specify whether to retrieve the values of the advanced properties.\nThe advanced properties are presented in the following groups:\n\"vldbProperties\": A list of properties as determined by the common infrastructure.\nIf omitted or false the API will return information field only.\nIf true, all applicable advanced properties are returned.\n"
																}
															],
															"variable": [
																{
																	"key": "projectId",
																	"value": "{{rd_projectId}}",
																	"description": "(Required)"
																}
															]
														},
														"description": "Updates a specific attribute in the changeset. \nThis request replaces the attribute's top-level fields with the new definition provided in the request body.          \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the object to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly updated attribute to the metadata, commit using the changeset commit API.     \n"
													},
													"response": []
												},
												{
													"name": "Commit the changeset changes to the metadata",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Commit changeset\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets",
																":changesetId",
																"commit"
															],
															"variable": [
																{
																	"key": "changesetId",
																	"value": "{{rd_changesetId}}",
																	"description": "(Required) Changeset ID"
																}
															]
														},
														"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Delete the changeset",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Delete the changeset\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization Token"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"model",
																"changesets",
																":changesetId"
															],
															"variable": [
																{
																	"key": "changesetId",
																	"value": "{{rd_changesetId}}",
																	"description": "(Required) Changeset ID"
																}
															]
														},
														"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"authToken\");",
																	"    pm.environment.unset(\"rd_changesetId\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required)"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "A high-level workflow sample for managing project settings is shown in this folder.\n\nRequirement:\n\n*   The project id is stored in rd_projectId environment var."
						},
						{
							"name": "Manage Project Deletion",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get information about nodes and projects with current status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get information about nodes and projects with current status\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_nodeName\", pm.response.json().nodes[0].name)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a project for authenticated user\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-AsyncMode",
												"value": "true",
												"description": "Specifies whether to make the call synchronously or asynchronously; make the call asynchronously if set to true",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"My Test Project\",\n    \"description\": \"Test Project Created by REST API Workflow\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new project, either synchronously or asynchronously. It can take several minutes to create a project. To fetch the actual project information, you need to poll using GET projects/{name}. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify whether to make the call synchronously or asynchronously in the request header. You provide the project name in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get a specific project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get a specific project for authenticated user\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[\"id\"];",
													"    pm.environment.set(\"rd_projectId\", projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":name"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "My Test Project",
													"description": "(Required) Project name"
												}
											]
										},
										"description": "Get a specific project that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of the specified project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specifiy the name of the project in the path of the request."
									},
									"response": []
								},
								{
									"name": "Unload the project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unload the project from the node\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/status\",\n      \"value\": \"unloaded\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes/:nodename/projects/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes",
												":nodename",
												"projects",
												":projectId"
											],
											"variable": [
												{
													"key": "nodename",
													"value": "{{rd_nodeName}}",
													"description": "(Required)"
												},
												{
													"key": "projectId",
													"value": "{{rd_projectId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete Unloaded Project\", function () {",
													"     pm.expect(pm.response.code).to.be.oneOf([202,204]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_projectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_nodeName\");",
													"    pm.environment.unset(\"rd_projectId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow shows how to create and delete a project."
						}
					]
				},
				{
					"name": "Manage reports",
					"item": [
						{
							"name": "Manage Reports",
							"item": [
								{
									"name": "Retrieve a Report's Definition",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=3&limit=10&name=Brand Performance by Region",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Get a report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition/Get a report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId?showExpressionAs=tokens&showFilterTokens=true&showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\nExpressions are presented in the following formats:\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Retrieve a Report's Definition within a Report Instance",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=3&limit=10&name=Brand Performance by Region",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Create a report instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text",
														"description": "Set to respond-async to execute this API asynchronously",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a report within a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Get a report within a report Instance\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId?showExpressionAs=tokens&showFilterTokens=true&showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\nExpressions are presented in the following formats:\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Delete the report instance\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition within a Report Instance/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Create a New Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Create a normal report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Create a normal report\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"    pm.environment.set(\"rd_reportId\",pm.response.json().information.objectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"information\": {\r\n        \"name\": \"New Report\",\r\n        \"destinationFolderId\": \"D3C7D461F69C4610AA6BAA5EF51F4125\"\r\n    },\r\n    \"sourceType\": \"normal\",\r\n    \"dataSource\": {\r\n        \"dataTemplate\": {\r\n            \"units\": [\r\n                {\r\n                    \"id\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Customer\",\r\n                    \"type\": \"attribute\"\r\n                },\r\n                {\r\n                    \"id\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\r\n                    \"name\": \"Customer Age\",\r\n                    \"type\": \"attribute\"\r\n                },\r\n                {\r\n                    \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Region\",\r\n                    \"type\": \"attribute\",\r\n                    \"limit\": {\r\n                        \"text\": \"{Regions}\",\r\n                        \"tree\": {\r\n                            \"type\": \"reference\",\r\n                            \"target\": {\r\n                                \"objectId\": \"1DAD64C6445BCD938F11FFAEC3A4A980\",\r\n                                \"subType\": \"consolidation_element\",\r\n                                \"name\": \"Regions\"\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"metrics\",\r\n                    \"elements\": [\r\n                        {\r\n                            \"id\": \"82156AB211D40978C000C7906B98494F\",\r\n                            \"name\": \"Count of Customers\",\r\n                            \"subType\": \"metric\"\r\n                        },\r\n                        {\r\n                            \"id\": \"4C05177F11D3E877C000B3B2D86C964F\",\r\n                            \"name\": \"Avg Revenue per Customer\",\r\n                            \"subType\": \"metric\"\r\n                        }\r\n                    ],\r\n                    \"limit\": {\r\n                        \"text\": \"Cost > 1000\",\r\n                        \"tree\": {\r\n                            \"type\": \"predicate_metric_qualification\",\r\n                            \"predicateText\": \"Cost > 1000\",\r\n                            \"predicateTree\": {\r\n                                \"function\": \"greater\",\r\n                                \"parameters\": [\r\n                                    {\r\n                                        \"parameterType\": \"constant\",\r\n                                        \"constant\": {\r\n                                            \"type\": \"double\",\r\n                                            \"value\": \"1000.0\"\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                \"levelType\": \"none\",\r\n                                \"metric\": {\r\n                                    \"objectId\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\r\n                                    \"subType\": \"metric\",\r\n                                    \"name\": \"Cost\"\r\n                                },\r\n                                \"metricFunction\": \"value\",\r\n                                \"isIndependent\": 0,\r\n                                \"nullInclude\": 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            \"drillMap\": {\r\n                \"objectId\": \"B793B57511D3E4E51000E887EC6DE8A4\",\r\n                \"subType\": \"drill_map\",\r\n                \"name\": \"Tutorial Standard Drill Map\"\r\n            }\r\n        },\r\n        \"filter\": {\r\n            \"text\": \"{Age Range} = 24 and under, 25 to 34, 35 to 44\",\r\n            \"tree\": {\r\n                \"type\": \"predicate_element_list\",\r\n                \"predicateTree\": {\r\n                    \"attribute\": {\r\n                        \"objectId\": \"5603951E4FE1BC04A44E44B85BBB8ED2\",\r\n                        \"subType\": \"attribute\",\r\n                        \"name\": \"Age Range\"\r\n                    },\r\n                    \"elements\": [\r\n                        {\r\n                            \"display\": \"24 and under\",\r\n                            \"elementId\": \"h1\"\r\n                        },\r\n                        {\r\n                            \"display\": \"25 to 34\",\r\n                            \"elementId\": \"h2\"\r\n                        },\r\n                        {\r\n                            \"display\": \"35 to 44\",\r\n                            \"elementId\": \"h3\"\r\n                        }\r\n                    ],\r\n                    \"function\": \"in\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"grid\": {\r\n        \"viewTemplate\": {\r\n            \"rows\": {\r\n                \"units\": [\r\n                    {\r\n                        \"id\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\r\n                        \"name\": \"Customer\",\r\n                        \"type\": \"attribute\"\r\n                    }\r\n                ],\r\n                \"sorts\": [\r\n                    {\r\n                        \"target\": {\r\n                            \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\r\n                            \"subType\": \"attribute\",\r\n                            \"name\": \"Customer\"\r\n                        },\r\n                        \"form\": {\r\n                            \"objectId\": \"8D67A35B11D3E4981000E787EC6DE8A4\",\r\n                            \"subType\": \"attribute_form_system\",\r\n                            \"name\": \"Customer DESC 1\"\r\n                        },\r\n                        \"order\": \"ascending\",\r\n                        \"type\": \"attribute_form\",\r\n                        \"subtotalsPosition\": \"inherit\"\r\n                    }\r\n                ]\r\n            },\r\n            \"columns\": {\r\n                \"units\": [\r\n                    {\r\n                        \"type\": \"metrics\",\r\n                        \"elements\": [\r\n                            {\r\n                                \"id\": \"4C05177F11D3E877C000B3B2D86C964F\",\r\n                                \"name\": \"Avg Revenue per Customer\",\r\n                                \"subType\": \"metric\",\r\n                                \"thresholds\": [\r\n                                    {\r\n                                        \"format\": [],\r\n                                        \"condition\": {\r\n                                            \"text\": \"Customer = Aaby:Alen\",\r\n                                            \"tree\": {\r\n                                                \"type\": \"predicate_element_list\",\r\n                                                \"predicateTree\": {\r\n                                                    \"attribute\": {\r\n                                                        \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\r\n                                                        \"subType\": \"attribute\",\r\n                                                        \"name\": \"Customer\"\r\n                                                    },\r\n                                                    \"elements\": [\r\n                                                        {\r\n                                                            \"display\": \"Aaby:Alen\",\r\n                                                            \"elementId\": \"h7796\"\r\n                                                        }\r\n                                                    ],\r\n                                                    \"function\": \"in\"\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        \"name\": \"New Threshold\",\r\n                                        \"replaceText\": \"\",\r\n                                        \"semantics\": \"number\",\r\n                                        \"scope\": \"metric_only\",\r\n                                        \"enable\": true\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"sorts\": [\r\n                    {\r\n                        \"target\": {\r\n                            \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\r\n                            \"subType\": \"attribute\",\r\n                            \"name\": \"Customer\"\r\n                        },\r\n                        \"form\": {\r\n                            \"objectId\": \"8D67A35B11D3E4981000E787EC6DE8A4\",\r\n                            \"subType\": \"attribute_form_system\",\r\n                            \"name\": \"Customer DESC 1\"\r\n                        },\r\n                        \"order\": \"ascending\",\r\n                        \"type\": \"attribute_form\",\r\n                        \"subtotalsPosition\": \"inherit\"\r\n                    }\r\n                ]\r\n            },\r\n            \"pageBy\": {\r\n                \"units\": [\r\n                    {\r\n                        \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                        \"name\": \"Region\",\r\n                        \"type\": \"attribute\"\r\n                    }\r\n                ],\r\n                \"sorts\": []\r\n            },\r\n            \"subtotals\": [\r\n                {\r\n                    \"name\": \"Total\",\r\n                    \"type\": \"subtotal_definition\",\r\n                    \"appliedLevel\": {\r\n                        \"type\": \"by_position\",\r\n                        \"rows\": \"all_subtotals\",\r\n                        \"columns\": \"all_subtotals\",\r\n                        \"pageBy\": \"grand_total\"\r\n                    },\r\n                    \"subtotal\": {\r\n                        \"objectId\": \"96C487AF4D12472A910C1ACACFB56EFB\",\r\n                        \"subType\": \"system_subtotal\",\r\n                        \"name\": \"Total\"\r\n                    }\r\n                }\r\n            ],\r\n            \"drillMap\": {\r\n                \"objectId\": \"B793B57511D3E4E51000E887EC6DE8A4\",\r\n                \"subType\": \"drill_map\",\r\n                \"name\": \"Tutorial Standard Drill Map\"\r\n            }\r\n        },\r\n        \"viewFilter\": {\r\n            \"text\": \"Region = Canada, Central, England\",\r\n            \"tree\": {\r\n                \"type\": \"predicate_element_list\",\r\n                \"predicateTree\": {\r\n                    \"attribute\": {\r\n                        \"objectId\": \"8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                        \"subType\": \"attribute\",\r\n                        \"name\": \"Region\"\r\n                    },\r\n                    \"elements\": [\r\n                        {\r\n                            \"display\": \"Canada\",\r\n                            \"elementId\": \"h11\"\r\n                        },\r\n                        {\r\n                            \"display\": \"Central\",\r\n                            \"elementId\": \"h4\"\r\n                        },\r\n                        {\r\n                            \"display\": \"England\",\r\n                            \"elementId\": \"h8\"\r\n                        }\r\n                    ],\r\n                    \"function\": \"in\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"timezone\": {\r\n        \"objectId\": \"7E514996278648AB8F2B5D6DA2ED87AB\",\r\n        \"subType\": \"timezone_custom\",\r\n        \"name\": \"Custom TZ2\"\r\n    },\r\n    \"advancedProperties\": {\r\n        \"vldbProperties\": {\r\n            \"[AnalyticalEngineProperties].[DisplayNullOnTop]\": {\r\n                \"name\": \"DisplayNullOnTop\",\r\n                \"value\": \"true\",\r\n                \"type\": \"boolean\",\r\n                \"resolvedLocation\": \"default\"\r\n            }\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports?showExpressionAs=tokens&showFilterTokens =true&showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens ",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used."
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Save the report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Save the report\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances/save",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances",
														"save"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete created report",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Delete created report\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:reportId?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":reportId"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Create a FFSQL report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Create a FFSQL report\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"    pm.environment.set(\"rd_reportId\",pm.response.json().information.objectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"information\": {\r\n        \"name\": \"FFSQL report\",\r\n        \"destinationFolderId\": \"D3C7D461F69C4610AA6BAA5EF51F4125\"\r\n    },\r\n    \"sourceType\": \"custom_sql_free_form\",\r\n    \"dataSource\": {\r\n        \"table\": {\r\n            \"physicalTable\": {\r\n                \"columns\": [\r\n                    {\r\n                        \"name\": \"Month_ID (ID)\",\r\n                        \"dataType\": {\r\n                            \"type\": \"integer\",\r\n                            \"precision\": 4,\r\n                            \"scale\": 0\r\n                        }\r\n                    },\r\n                    {\r\n                        \"name\": \"Cost\",\r\n                        \"dataType\": {\r\n                            \"type\": \"double\",\r\n                            \"precision\": 18,\r\n                            \"scale\": 0\r\n                        }\r\n                    }\r\n                ],\r\n                \"sqlExpression\": {\r\n                    \"tree\": {\r\n                        \"function\": \"concat_no_blank\",\r\n                        \"children\": [\r\n                            {\r\n                                \"type\": \"constant\",\r\n                                \"variant\": {\r\n                                    \"type\": \"string\",\r\n                                    \"value\": \"select month_id,tot_cost from city_mnth_sls \"\r\n                                }\r\n                            }\r\n                        ],\r\n                        \"type\": \"operator\"\r\n                    }\r\n                }\r\n            },\r\n            \"attributes\": [\r\n                {\r\n                    \"id\": \"C4E347CF456CAA9DB04FBFBC1419CB87\",\r\n                    \"name\": \"Month_ID\",\r\n                    \"forms\": [\r\n                        {\r\n                            \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\r\n                            \"category\": \"ID\",\r\n                            \"type\": \"system\",\r\n                            \"displayFormat\": \"number\",\r\n                            \"expression\": {\r\n                                \"tree\": {\r\n                                    \"type\": \"column_reference\",\r\n                                    \"name\": \"Month_ID (ID)\"\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n            \"metrics\": [\r\n                {\r\n                    \"id\": \"70F30EAF437B6694D7B0749975671B69\",\r\n                    \"name\": \"Cost\",\r\n                    \"dataType\": {\r\n                        \"type\": \"numeric\",\r\n                        \"precision\": 0,\r\n                        \"scale\": 0\r\n                    },\r\n                    \"expression\": {\r\n                        \"tree\": {\r\n                            \"type\": \"column_reference\",\r\n                            \"name\": \"Cost\"\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            \"dataSource\": {\r\n                \"objectId\": \"A528E3A1436D9C08318735BC915FCF13\",\r\n                \"subType\": \"db_role_import\",\r\n                \"name\": \"tutorial_wh\"\r\n            }\r\n        }\r\n    },\r\n    \"grid\": {\r\n        \"viewTemplate\": {\r\n            \"rows\": {\r\n                \"units\": [\r\n                    {\r\n                        \"id\": \"C4E347CF456CAA9DB04FBFBC1419CB87\",\r\n                        \"name\": \"Month_ID\",\r\n                        \"type\": \"attribute\",\r\n                        \"forms\": [\r\n                            {\r\n                                \"id\": \"45C11FA478E745FEA08D781CEA190FE5\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"sorts\": []\r\n            },\r\n            \"columns\": {\r\n                \"units\": [\r\n                    {\r\n                        \"type\": \"metrics\",\r\n                        \"elements\": [\r\n                            {\r\n                                \"id\": \"70F30EAF437B6694D7B0749975671B69\",\r\n                                \"name\": \"Cost\",\r\n                                \"subType\": \"metric\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"sorts\": []\r\n            },\r\n            \"pageBy\": {}\r\n        },\r\n        \"viewFilter\": {}\r\n    },\r\n    \"timezone\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports?showExpressionAs=tokens&showFilterTokens =true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens ",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used.",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Delete the report instance\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a New Report/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Update the Definition of an Existing Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=3&pattern=2&limit=10&name=Brand Performance by Region",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "pattern",
															"value": "2"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Create a report instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text",
														"description": "Set to respond-async to execute this API asynchronously",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a report within a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Get a report within a report Instance\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId?showExpressionAs=tokens&showFilterTokens=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\nExpressions are presented in the following formats:\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Update the report\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"dataSource\": {\r\n        \"dataTemplate\": {\r\n            \"units\": [\r\n                {\r\n                    \"id\": \"54BABECD11D59D57C000B28A4CC5F24F\",\r\n                    \"name\": \"Brand\",\r\n                    \"type\": \"attribute\"\r\n                },\r\n                {\r\n                    \"id\": \"8D679D3711D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Category\",\r\n                    \"type\": \"attribute\"\r\n                },\r\n                {\r\n                    \"id\": \"8D679D3B11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Customer Region\",\r\n                    \"type\": \"attribute\"\r\n                },\r\n                {\r\n                    \"type\": \"metrics\",\r\n                    \"elements\": [\r\n                        {\r\n                            \"id\": \"4C05177011D3E877C000B3B2D86C964F\",\r\n                            \"name\": \"Revenue\",\r\n                            \"subType\": \"metric\"\r\n                        },\r\n                        {\r\n                            \"id\": \"4C051DB611D3E877C000B3B2D86C964F\",\r\n                            \"name\": \"Profit\",\r\n                            \"subType\": \"metric\"\r\n                        },\r\n                        {\r\n                            \"id\": \"EA34A05F4D47780A057C27A0DFDAC0FB\",\r\n                            \"name\": \"Last Year's (Revenue)\",\r\n                            \"subType\": \"metric\",\r\n                            \"isEmbedded\": true\r\n                        }\r\n                    ],\r\n                    \"limit\": {\r\n                        \"tokens\": []\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"filter\": {\r\n            \"text\": \"Year = 2016\",\r\n            \"tree\": {\r\n                \"type\": \"predicate_filter_qualification\",\r\n                \"predicateId\": \"ED05781A7C484846A4E72E0AEC5D5B47\",\r\n                \"predicateText\": \"Year = 2016\",\r\n                \"predicateTree\": {\r\n                    \"filter\": {\r\n                        \"objectId\": \"988A2F5B11D6160A000036B600000000\",\r\n                        \"subType\": \"filter\",\r\n                        \"name\": \"Fixed year selection - Most recent year with data in demo DB\"\r\n                    },\r\n                    \"isIndependent\": 0\r\n                }\r\n            },\r\n            \"tokens\": [\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"%\",\r\n                    \"type\": \"character\"\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"[Fixed year selection - Most recent year with data in demo DB]\",\r\n                    \"type\": \"object_reference\",\r\n                    \"target\": {\r\n                        \"dateCreated\": \"2002-01-31T06:03:35.000Z\",\r\n                        \"dateModified\": \"2016-02-02T21:42:28.000Z\",\r\n                        \"versionId\": \"44669DCA11E5C04F00000080EF55B6D3\",\r\n                        \"acg\": 199,\r\n                        \"primaryLocale\": \"en-US\",\r\n                        \"objectId\": \"988A2F5B11D6160A000036B600000000\",\r\n                        \"subType\": \"filter\",\r\n                        \"name\": \"Fixed year selection - Most recent year with data in demo DB\"\r\n                    }\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"\",\r\n                    \"type\": \"end_of_text\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"grid\": {\r\n        \"viewTemplate\": {\r\n            \"rows\": {\r\n                \"units\": [\r\n                    {\r\n                        \"id\": \"8D679D3B11D3E4981000E787EC6DE8A4\",\r\n                        \"name\": \"Customer Region\",\r\n                        \"type\": \"attribute\"\r\n                    },\r\n                    {\r\n                        \"id\": \"54BABECD11D59D57C000B28A4CC5F24F\",\r\n                        \"name\": \"Brand\",\r\n                        \"type\": \"attribute\"\r\n                    }\r\n                ],\r\n                \"sorts\": [\r\n                    {\r\n                        \"target\": {\r\n                            \"objectId\": \"8D679D3B11D3E4981000E787EC6DE8A4\",\r\n                            \"subType\": \"attribute\",\r\n                            \"name\": \"Customer Region\"\r\n                        },\r\n                        \"type\": \"attribute_default\"\r\n                    },\r\n                    {\r\n                        \"target\": {\r\n                            \"objectId\": \"4C05177011D3E877C000B3B2D86C964F\",\r\n                            \"subType\": \"metric\",\r\n                            \"name\": \"Revenue\"\r\n                        },\r\n                        \"order\": \"descending\",\r\n                        \"type\": \"metric\",\r\n                        \"subtotalsPosition\": \"inherit\",\r\n                        \"sortOnElements\": []\r\n                    }\r\n                ]\r\n            },\r\n            \"columns\": {\r\n                \"units\": [\r\n                    {\r\n                        \"type\": \"metrics\",\r\n                        \"elements\": [\r\n                            {\r\n                                \"id\": \"4C051DB611D3E877C000B3B2D86C964F\",\r\n                                \"name\": \"Profit\",\r\n                                \"subType\": \"metric\"\r\n                            },\r\n                            {\r\n                                \"id\": \"4C05177011D3E877C000B3B2D86C964F\",\r\n                                \"name\": \"Revenue\",\r\n                                \"subType\": \"metric\"\r\n                            },\r\n                            {\r\n                                \"id\": \"E5ED5CF748AC2CAF84EA1981F20237FD\",\r\n                                \"name\": \"Revenue Rank by Region\",\r\n                                \"subType\": \"metric\",\r\n                                \"alias\": \"Revenue Rank by Region\",\r\n                                \"isEmbedded\": true\r\n                            }\r\n                        ]\r\n                    }\r\n                ],\r\n                \"sorts\": []\r\n            },\r\n            \"pageBy\": {\r\n                \"units\": [\r\n                    {\r\n                        \"id\": \"8D679D3711D3E4981000E787EC6DE8A4\",\r\n                        \"name\": \"Category\",\r\n                        \"type\": \"attribute\"\r\n                    }\r\n                ],\r\n                \"sorts\": []\r\n            }\r\n        },\r\n        \"viewFilter\": {\r\n            \"text\": \"default filter text\",\r\n            \"tree\": {\r\n                \"type\": \"predicate_metric_qualification\",\r\n                \"predicateId\": \"DBDD412C3A78486094BCF7EEAFB53324\",\r\n                \"predicateText\": \"Metric Qualification\",\r\n                \"predicateTree\": {\r\n                    \"function\": \"less_equal\",\r\n                    \"parameters\": [\r\n                        {\r\n                            \"parameterType\": \"constant\",\r\n                            \"constant\": {\r\n                                \"type\": \"double\",\r\n                                \"value\": \"5.0\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    \"levelType\": \"metric_level\",\r\n                    \"metric\": {\r\n                        \"objectId\": \"E5ED5CF748AC2CAF84EA1981F20237FD\",\r\n                        \"subType\": \"metric\",\r\n                        \"name\": \"Revenue Rank by Region\",\r\n                        \"isEmbedded\": true\r\n                    },\r\n                    \"metricFunction\": \"value\",\r\n                    \"isIndependent\": 0,\r\n                    \"nullInclude\": 0\r\n                }\r\n            },\r\n            \"tokens\": [\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"%\",\r\n                    \"type\": \"character\"\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"[Revenue Rank by Region]\",\r\n                    \"type\": \"object_reference\",\r\n                    \"target\": {\r\n                        \"objectId\": \"E5ED5CF748AC2CAF84EA1981F20237FD\",\r\n                        \"subType\": \"metric\",\r\n                        \"name\": \"Revenue Rank by Region\",\r\n                        \"isEmbedded\": true,\r\n                        \"description\": \"\"\r\n                    }\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"<=\",\r\n                    \"type\": \"function\",\r\n                    \"target\": {\r\n                        \"dateCreated\": \"2001-01-02T20:47:38.000Z\",\r\n                        \"dateModified\": \"2022-07-13T22:39:16.835Z\",\r\n                        \"versionId\": \"E3A59CEE4845BF96F8C2C2BA7B3BA55D\",\r\n                        \"acg\": 199,\r\n                        \"primaryLocale\": \"en-US\",\r\n                        \"objectId\": \"8107C31ADD9911D3B98100C04F2233EA\",\r\n                        \"subType\": \"function\",\r\n                        \"name\": \"<=\",\r\n                        \"description\": \"Returns TRUE if the first value is lesser than or equal to the second value.\"\r\n                    }\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"5.0\",\r\n                    \"type\": \"integer\"\r\n                },\r\n                {\r\n                    \"level\": \"resolved\",\r\n                    \"state\": \"initial\",\r\n                    \"value\": \"\",\r\n                    \"type\": \"end_of_text\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId?showExpressionAs=tokens&showFilterTokens =true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens ",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Delete the report instance\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the Definition of an Existing Report/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Execute Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=3&limit=10&name=Sales by Region",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "name",
															"value": "Sales by Region"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Create a report instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text",
														"description": "Set to respond-async to execute this API asynchronously",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances?executionStage=execute_data",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"query": [
														{
															"key": "executionStage",
															"value": "execute_data",
															"description": "The execution stage the report is executed to.\nApplicable values: resolve_prompts, execute_data, no_action (default)"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer report's prompts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Answer report's prompts\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"prompts\": [\r\n        {\r\n            \"id\": \"1FED823A41E8C7241B085DA465DECC64\",\r\n            \"type\": \"ELEMENTS\",\r\n            \"answers\": [\r\n                {\r\n                    \"id\": \"h4;8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Central\"\r\n                },\r\n                {\r\n                    \"id\": \"h2;8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Mid-Atlantic\"\r\n                },\r\n                {\r\n                    \"id\": \"h1;8D679D4B11D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Northeast\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"id\": \"E638361911D5C49EC0000C881FDA1A4F\",\r\n            \"type\": \"ELEMENTS\",\r\n            \"answers\": [\r\n                {\r\n                    \"id\": \"h1;8D679D3711D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Books\"\r\n                },\r\n                {\r\n                    \"id\": \"h2;8D679D3711D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Electronics\"\r\n                },\r\n                {\r\n                    \"id\": \"h3;8D679D3711D3E4981000E787EC6DE8A4\",\r\n                    \"name\": \"Movies\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/answers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances",
														":instanceId",
														"prompts",
														"answers"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "instanceId",
															"value": "{{rd_instanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a report within a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Get a report within a report instance\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId?showExpressionAs=tokens&showFilterTokens=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\nExpressions are presented in the following formats:\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "An optional boolean flag controlling whether tokens will be displayed along with the filter's predicate tree and descriptive text. By default 'false' is used."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "An optional boolean flag controlling whether to retrieve the values of the advanced properties. By default 'false' is used.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get report's data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Get report's data\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "instanceId",
															"value": "{{rd_instanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get report's sql view",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Get report's sql view\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId/sqlView",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId",
														"sqlView"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "instanceId",
															"value": "{{rd_instanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Execute Report/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Create, Update, Read and Delete a Derived Element in Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=3&limit=100&name=Brand Performance by Region&pattern=2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														},
														{
															"key": "pattern",
															"value": "2"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Create a report instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectId",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text",
														"description": "Set to respond-async to execute this API asynchronously",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a derived element in report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Create a derived element in report\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_derivedElementId\",pm.response.json().information.objectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"information\": {\n        \"name\": \"sample derived element\"\n    },\n    \"attribute\": {\n        \"objectId\": \"8D679D3711D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Category\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"Books\",\n            \"type\": \"list\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"this_element\",\n                \"subtotal\": \"this_element\",\n                \"includeIndividual\": false\n            },\n            \"text\": \"Books\",\n            \"elements\": [\n                {\n                    \"display\": \"Books\",\n                    \"elementId\": \"h1\"\n                }\n            ]\n        },\n        {\n            \"id\": \"88430A7BF012403BB18B0E398D4709F7\",\n            \"name\": \"All Others\",\n            \"type\": \"all_other\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"individual_items\",\n                \"subtotal\": \"this_element\"\n            }\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/derivedElements",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"derivedElements"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a derived element in report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Update a derived element in report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"information\": {\n        \"name\": \"sample derived element\",\n        \"description\": \"Update\"\n    },\n    \"attribute\": {\n        \"objectId\": \"8D679D3711D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Category\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"Books and Electronics\",\n            \"type\": \"list\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"this_element\",\n                \"subtotal\": \"this_element\",\n                \"includeIndividual\": false\n            },\n            \"text\": \"Books, Electronics\",\n            \"elements\": [\n                {\n                    \"display\": \"Books\",\n                    \"elementId\": \"h1\"\n                },\n                {\n                    \"display\": \"Electronics\",\n                    \"elementId\": \"h2\"\n                }\n            ]\n        },\n        {\n            \"id\": \"88430A7BF012403BB18B0E398D4709F7\",\n            \"name\": \"All Others\",\n            \"type\": \"all_other\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"individual_items\",\n                \"subtotal\": \"this_element\"\n            }\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/derivedElements/:derivedElementId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"derivedElements",
														":derivedElementId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "derivedElementId",
															"value": "{{rd_derivedElementId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read a derived element in report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Read a derived element in report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/derivedElements/:derivedElementId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"derivedElements",
														":derivedElementId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "derivedElementId",
															"value": "{{rd_derivedElementId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a derived element in report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Delete a derived element in report\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/derivedElements/:derivedElementId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"derivedElements",
														":derivedElementId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "derivedElementId",
															"value": "{{rd_derivedElementId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Delete the report instance\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_derivedElementId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Retrieve Applicable Properties of a Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=3&limit=100&name=Brand Performance by Region&pattern=2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														},
														{
															"key": "pattern",
															"value": "2"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Get the list of applicable properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report/Get the list of applicable properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "Report instance ID",
														"disabled": true
													},
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/applicableVldbProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"applicableVldbProperties"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												},
												"description": "Get the list of applicable properties for a given report. The list is returned based on report's xda type and report type. The report's subtype must be in the following list: report_grid, report_graph, report_engine, report_grid_and_graph, an error is thrown otherwise. InstanceId header is needed for unsaved objects so they can be retrieved from the instance. Internationalized fields will be based on user's displayLocale from MicroStrategy Library session."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report/Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Retrieve Applicable Properties of a Report with Report Instance",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report with Report Instance/Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create, Update, Read and Delete a Derived Element in Report/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=3&limit=100&name=Brand Performance by Region&pattern=2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														},
														{
															"key": "pattern",
															"value": "2"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create a report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report with Report Instance/Create a report instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_instanceId\",pm.response.headers.get(\"X-MSTR-MS-Instance\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"description": "Set to respond-async to execute this API asynchronously",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"query": [
														{
															"key": "executionStage",
															"value": "execute_data",
															"description": "This parameter specifies the execution stage the report is executed to. Available values: resolve_prompts, execute_data, no_action.\nIf omitted, it is \"no_action\".\n__Available values__ : resolve_prompts, execute_data, no_action",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												},
												"description": "This API executes a specified report. A project ID is required to execute the request if X-MSTR-MS-Instance is not provided in the header. Set \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET reports API to check the status of the instance."
											},
											"response": []
										},
										{
											"name": "Get the list of applicable properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report with Report Instance/Get the list of applicable properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "Report instance ID"
													},
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/applicableVldbProperties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"applicableVldbProperties"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												},
												"description": "Get the list of applicable properties for a given report. The list is returned based on report's xda type and report type. The report's subtype must be in the following list: report_grid, report_graph, report_engine, report_grid_and_graph, an error is thrown otherwise. InstanceId header is needed for unsaved objects so they can be retrieved from the instance. Internationalized fields will be based on user's displayLocale from MicroStrategy Library session."
											},
											"response": []
										},
										{
											"name": "Delete the report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report with Report Instance/Delete the report instance\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-MS-Instance",
														"value": "{{rd_instanceId}}",
														"type": "text",
														"description": "(Required) Report instance ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												},
												"description": "This API deletes a report instance."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve Applicable Properties of a Report with Report Instance/Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_instanceId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Manage Page-By Information for Report",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for report\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    //This example searches for report with exact name. This report needs to have page-by. ",
													"    reportId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_reportId\", reportId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=View Report - Derived Element in the Page-by&type=3&pattern=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "View Report - Derived Element in the Page-by",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).\n\n"
												},
												{
													"key": "type",
													"value": "3",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter.\n\n"
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4"
												},
												{
													"key": "root",
													"value": null,
													"description": "Folder ID of the root folder where the search will be performed.\n\n",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.\n\n",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": null,
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": null,
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": null,
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    pageByAttrID = pm.response.json().definition.grid.pageBy[0].id;",
													"    pm.environment.set(\"rd_pageByAttrId\", pageByAttrID);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create report instance with default page-by selection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    reportInstanceId = pm.response.json().instanceId;",
													"    pm.environment.set(\"rd_reportInstanceId\", reportInstanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report page-by elements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get page-by elements\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    pageByElementId = pm.response.json().pageBy[0].elements[1].id;",
													"    pm.environment.set(\"rd_pageByElementId\", pageByElementId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:reportInstanceId/pageBy/elements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":reportInstanceId",
												"pageBy",
												"elements"
											],
											"query": [
												{
													"key": "offset",
													"value": "",
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												},
												{
													"key": "reportInstanceId",
													"value": "{{rd_reportInstanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update report instance with new page-by selection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currentPageBy\" : [\n        {\n            \"id\" : \"{{rd_pageByElementId}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_reportInstanceId\");",
													"    pm.environment.unset(\"rd_pageByAttrId\");",
													"    pm.environment.unset(\"rd_pageByElementId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can use REST API requests to manage page-by information for reports."
						},
						{
							"name": "Manage Transaction Reports",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a Report's Definition/Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Create a new transaction report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a new transaction report\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_reportId\",pm.response.json().information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"New Transaction Report\",\n        \"destinationFolderId\": \"D3C7D461F69C4610AA6BAA5EF51F4125\"\n    },\n    \"table\": {\n        \"physicalTable\": {\n            \"columns\": [\n                {\n                    \"name\": \"Opportunity (ID)\",\n                    \"dataType\": {\n                        \"type\": \"integer\",\n                        \"precision\": 4,\n                        \"scale\": 0\n                    },\n                    \"required\": true\n                },\n                {\n                    \"name\": \"Opportunity (DESC)\",\n                    \"dataType\": {\n                        \"type\": \"fixed_length_string\",\n                        \"precision\": 255,\n                        \"scale\": 0\n                    },\n                    \"required\": true\n                },\n                {\n                    \"name\": \"Competitor (ID)\",\n                    \"dataType\": {\n                        \"type\": \"fixed_length_string\",\n                        \"precision\": 255,\n                        \"scale\": 0\n                    },\n                    \"required\": false\n                },\n                {\n                    \"name\": \"Opportunity_Size\",\n                    \"dataType\": {\n                        \"type\": \"double\",\n                        \"precision\": 18,\n                        \"scale\": 0\n                    },\n                    \"required\": true\n                }\n            ],\n            \"sqlExpression\": {\n                \"tree\": {\n                    \"function\": \"concat_no_blank\",\n                    \"children\": [\n                        {\n                            \"function\": \"repeat\",\n                            \"functionProperties\": [\n                                {\n                                    \"name\": \"Distinct\",\n                                    \"value\": {\n                                        \"type\": \"boolean\",\n                                        \"value\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"children\": [\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \" \\r\\n\\r\\nUPDATE F_SALES_OPPTY\\r\\nSET\\r\\nOPPTY_NAME = \"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"#1\"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \",\\r\\n\"\n                                    }\n                                },\n                                {\n                                    \"function\": \"apply_optional\",\n                                    \"children\": [\n                                        {\n                                            \"type\": \"constant\",\n                                            \"variant\": {\n                                                \"type\": \"string\",\n                                                \"value\": \"COMPETITOR = #2,\"\n                                            }\n                                        }\n                                    ],\n                                    \"type\": \"operator\"\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\r\\nOPPTY_SIZE = \"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"#3\"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\nWHERE\\r\\nOPPTY_ID = \"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"#0\"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\r\\n\\r\\n\"\n                                    }\n                                }\n                            ],\n                            \"type\": \"operator\"\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        },\n        \"attributes\": [\n            {\n                \"id\": \"82E57B1D48B416E10CD0CAB07A1D5613\",\n                \"name\": \"Opportunity\",\n                \"forms\": [\n                    {\n                        \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                        \"category\": \"ID\",\n                        \"type\": \"system\",\n                        \"displayFormat\": \"number\",\n                        \"expression\": {\n                            \"tree\": {\n                                \"type\": \"column_reference\",\n                                \"name\": \"Opportunity (ID)\"\n                            }\n                        }\n                    },\n                    {\n                        \"id\": \"CCFBE2A5EADB4F50941FB879CCF1721C\",\n                        \"category\": \"DESC\",\n                        \"type\": \"system\",\n                        \"displayFormat\": \"text\",\n                        \"expression\": {\n                            \"tree\": {\n                                \"type\": \"column_reference\",\n                                \"name\": \"Opportunity (DESC)\"\n                            }\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Competitor\",\n                \"forms\": [\n                    {\n                        \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                        \"category\": \"ID\",\n                        \"type\": \"system\",\n                        \"displayFormat\": \"text\",\n                        \"expression\": {\n                            \"tree\": {\n                                \"type\": \"column_reference\",\n                                \"name\": \"Competitor (ID)\"\n                            }\n                        }\n                    }\n                ]\n            }\n        ],\n        \"metrics\": [\n            {\n                \"id\": \"C4A3B2134183C04167EAF481EEB41999\",\n                \"name\": \"Opportunity_Size\",\n                \"dataType\": {\n                    \"type\": \"numeric\",\n                    \"precision\": 0,\n                    \"scale\": 0\n                },\n                \"expression\": {\n                    \"tree\": {\n                        \"type\": \"column_reference\",\n                        \"name\": \"Opportunity_Size\"\n                    }\n                }\n            }\n        ],\n        \"dataSource\": {\n            \"objectId\": \"BCB3836D4C70EDF53CB706ABA556B44B\",\n            \"subType\": \"db_role\",\n            \"name\": \"Operational Datamart\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/transactionReports",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transactionReports"
											]
										},
										"description": "Create a new transaction report based on the definition provided in request body. The definition of the newly created transaction report is returned in response and will be saved to metadata at the same time. The definition includes \"information\" and \"table\". The project ID is required to create a report in metadata. An authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Retrieve the newly created transaction report's definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve the newly created transaction report\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/transactionReports/:reportId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transactionReports",
												":reportId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										},
										"description": "Get the definition of a specific transaction report. Obtain the authorization token needed to execute the request using POST /auth/login. Obtain the project ID using GET /projects. Pass the authorization token and the project ID in the request header. Specify the report ID in the path of the request."
									},
									"response": []
								},
								{
									"name": "Modify the newly created transaction report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Modify the created transaction report\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"table\": {\n        \"physicalTable\": {\n            \"columns\": [\n                {\n                    \"name\": \"Opportunity (ID)\",\n                    \"dataType\": {\n                        \"type\": \"integer\",\n                        \"precision\": 4,\n                        \"scale\": 0\n                    },\n                    \"required\": true\n                },\n                {\n                    \"name\": \"Competitor (ID)\",\n                    \"dataType\": {\n                        \"type\": \"fixed_length_string\",\n                        \"precision\": 255,\n                        \"scale\": 0\n                    },\n                    \"required\": false\n                },\n                {\n                    \"name\": \"Opportunity_Size\",\n                    \"dataType\": {\n                        \"type\": \"double\",\n                        \"precision\": 18,\n                        \"scale\": 0\n                    },\n                    \"required\": true\n                }\n            ],\n            \"sqlExpression\": {\n                \"tree\": {\n                    \"function\": \"concat_no_blank\",\n                    \"children\": [\n                        {\n                            \"function\": \"repeat\",\n                            \"functionProperties\": [\n                                {\n                                    \"name\": \"Distinct\",\n                                    \"value\": {\n                                        \"type\": \"boolean\",\n                                        \"value\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"children\": [\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \" \\r\\n\\r\\nUPDATE F_SALES_OPPTY\\r\\nSET\\r\\n\"\n                                    }\n                                },\n                                {\n                                    \"function\": \"apply_optional\",\n                                    \"children\": [\n                                        {\n                                            \"type\": \"constant\",\n                                            \"variant\": {\n                                                \"type\": \"string\",\n                                                \"value\": \"COMPETITOR = #1,\"\n                                            }\n                                        }\n                                    ],\n                                    \"type\": \"operator\"\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\r\\nOPPTY_SIZE = \"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"#2\"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\nWHERE\\r\\nOPPTY_ID = \"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"#0\"\n                                    }\n                                },\n                                {\n                                    \"type\": \"constant\",\n                                    \"variant\": {\n                                        \"type\": \"string\",\n                                        \"value\": \"\\r\\n\\r\\n\"\n                                    }\n                                }\n                            ],\n                            \"type\": \"operator\"\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        },\n        \"attributes\": [\n            {\n                \"name\": \"Opportunity\",\n                \"forms\": [\n                    {\n                        \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                        \"category\": \"ID\",\n                        \"type\": \"system\",\n                        \"displayFormat\": \"number\",\n                        \"expression\": {\n                            \"tree\": {\n                                \"type\": \"column_reference\",\n                                \"name\": \"Opportunity (ID)\"\n                            }\n                        }\n                    }\n                ]\n            },\n            {\n                \"name\": \"Competitor\",\n                \"forms\": [\n                    {\n                        \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                        \"name\": \"ID\",\n                        \"category\": \"ID\",\n                        \"type\": \"system\",\n                        \"displayFormat\": \"text\",\n                        \"expression\": {\n                            \"tree\": {\n                                \"type\": \"column_reference\",\n                                \"name\": \"Competitor (ID)\"\n                            }\n                        }\n                    }\n                ]\n            }\n        ],\n        \"metrics\": [\n            {\n                \"name\": \"Opportunity_Size\",\n                \"dataType\": {\n                    \"type\": \"numeric\",\n                    \"precision\": 0,\n                    \"scale\": 0\n                },\n                \"expression\": {\n                    \"tree\": {\n                        \"type\": \"column_reference\",\n                        \"name\": \"Opportunity_Size\"\n                    }\n                }\n            }\n        ],\n        \"dataSource\": {\n            \"objectId\": \"BCB3836D4C70EDF53CB706ABA556B44B\",\n            \"subType\": \"db_role\",\n            \"name\": \"Operational Datamart\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/transactionReports/:reportId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transactionReports",
												":reportId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										},
										"description": "Update a transaction report's definition through Modeling service, based on the definition provided in request body. The definition of the modified transaction report will be returned in response and will be saved to metadata at the same time. The project ID is required to create a report in metadata. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nUsers are allowed to modify the following parts:\n\n- `description` in the `information` field;\n- `id`, `name`, `dataType` and `required` of `columns` field. If you don't provide the ID, a new column will be created, and don't forget to delete the reference `objectId` field of the attribute form or metric that is mapped to this column;\n- SQL tree in the `sqlExpression` field;\n- `id`, `name` (if `id` is provided, name changing will not take effect), `forms` and column reference of attributes.\n- `id`, `name` (if `id` is provided, name changing will not take effect), and column reference of metrics."
									},
									"response": []
								},
								{
									"name": "Delete the transaction report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the transaction report\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "3",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  3 is for report type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Object id"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a Report's Definition/Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							]
						},
						{
							"name": "Manage Incremental Refresh Report Objects",
							"item": [
								{
									"name": "Create, Update, and Delete an Incremental Refresh Report",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create an incremental refresh report",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create irr\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_irrId\", pm.response.json().information.objectId);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"information\": {\n        \"destinationFolderId\": \"{{publicObjectsFolderId}}\",\n        \"subType\": \"report_increment_refresh\",\n        \"name\": \"IRR_workflow\"\n    },\n    \"targetCube\": {\n        \"objectId\": \"6C204A564286DEB3E2CACB98762272C0\",\n        \"subType\": \"report_cube\",\n        \"name\": \"Profit and Revenue Cube\"\n    },\n    \"incrementType\": \"filter\",\n    \"refreshType\": \"update_only\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/incrementalRefresh",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"incrementalRefresh"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tree",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
															"disabled": true
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
															"disabled": true
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update an incremental refresh report",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update an irr\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"incrementType\": \"report\",\n    \"refreshType\": \"update\",\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[AnalyticalEngineProperties].[ConsolidationSubtotal]\": {\n                \"name\": \"ConsolidationSubtotal\",\n                \"value\": \"false\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/incrementalRefresh/:irrId?showExpressionAs=tree&showFilterTokens=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"incrementalRefresh",
														":irrId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tree",
															"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "irrId",
															"value": "{{rd_irrId}}",
															"description": "(Required) Incremental Refresh Report ID"
														}
													]
												},
												"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
											},
											"response": []
										},
										{
											"name": "Get the incremental refresh report definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get irr definition\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/incrementalRefresh/:irrId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"incrementalRefresh",
														":irrId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": "tree",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
														},
														{
															"key": "showFilterTokens",
															"value": "true",
															"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
														},
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned."
														}
													],
													"variable": [
														{
															"key": "irrId",
															"value": "{{rd_irrId}}",
															"description": "(Required) Incremental Refresh Report ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the incremental refresh report",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the irr\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:objectId?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":objectId"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
														}
													],
													"variable": [
														{
															"key": "objectId",
															"value": "{{rd_irrId}}",
															"description": "(Required) Incremental Refresh Report ID"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_irrId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "You can use REST API requests to create, update, retrieve, and delete incremental refresh reports through the Modeling service."
								}
							],
							"description": "You can use REST API requests to create, update, retrieve, and delete incremental refresh reports through the Modeling service."
						}
					]
				},
				{
					"name": "Manage datasets",
					"item": [
						{
							"name": "Manage Cube Objects",
							"item": [
								{
									"name": "Retrieve a Cube's Definition",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_cubeId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?type=776&limit=100",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Subcategory",
															"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
															"disabled": true
														},
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\".",
															"disabled": true
														},
														{
															"key": "type",
															"value": "776",
															"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 776 is for cube object type"
														},
														{
															"key": "viewMedia",
															"value": null,
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": null,
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "100",
															"description": "Maximum number of items returned for a single request. Use -1 for no limit."
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Read a cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Read a cube\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"cubes",
														":cubeId"
													],
													"query": [
														{
															"key": "showFilterTokens",
															"value": "false",
															"description": "Specify whether the cube \"filter\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe cube filter is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
															"disabled": true
														},
														{
															"key": "showExpressionAs",
															"value": "tokens",
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_cubeId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to retrieve the definition of an attribute through the Modeling service."
								},
								{
									"name": "Create, Update, and Delete Cube",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create cube\", function () {",
															"    pm.response.to.have.status(201); ",
															"    const cube = pm.response.json();",
															"    pm.environment.set(\"rd_cubeId\", cube.information.objectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"information\": {\n    \"subType\": \"report_cube\",\n    \"name\": \"Test Cube(Year, Category Analysis)\",\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n  \"template\": {\n    \"rows\": [\n      {\n        \"id\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"name\": \"Year\",\n        \"type\": \"attribute\"\n      },\n      {\n        \"id\": \"8D679D3711D3E4981000E787EC6DE8A4\",\n        \"name\": \"Category\",\n        \"type\": \"attribute\"\n      }\n    ],\n    \"columns\": [\n      {\n        \"type\": \"metrics\",\n        \"elements\": [\n          {\n            \"id\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n            \"name\": \"Cost\",\n            \"subType\": \"metric\"\n          },\n          {\n            \"id\": \"4C051DB611D3E877C000B3B2D86C964F\",\n            \"name\": \"Profit\",\n            \"subType\": \"metric\"\n          }\n        ]\n      }\n    ],\n    \"pageBy\": []\n  },\n  \"filter\": {\n    \"text\": \"(Subcategory = Art & Architecture, Business, Computers, Electronics - Miscellaneous) And (Revenue > 100000)\",\n    \"tree\": {\n      \"function\": \"and\",\n      \"children\": [\n        {\n          \"type\": \"predicate_element_list\",\n          \"predicateId\": \"34BD0D556AC6423CB8061BB90A0C1AB2\",\n          \"predicateTree\": {\n            \"attribute\": {\n              \"objectId\": \"8D679D4F11D3E4981000E787EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Subcategory\"\n            },\n            \"elements\": [\n              {\n                \"display\": \"Art & Architecture\",\n                \"elementId\": \"h11\"\n              },\n              {\n                \"display\": \"Business\",\n                \"elementId\": \"h12\"\n              },\n              {\n                \"display\": \"Computers\",\n                \"elementId\": \"h23\"\n              },\n              {\n                \"display\": \"Electronics - Miscellaneous\",\n                \"elementId\": \"h24\"\n              }\n            ],\n            \"function\": \"in\"\n          }\n        },\n        {\n          \"type\": \"predicate_metric_qualification\",\n          \"predicateId\": \"EF616BAECDED4AE0A91C6A4A5092ED92\",\n          \"predicateText\": \"(Revenue > 100000)\",\n          \"predicateTree\": {\n            \"function\": \"greater\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"100000.0\"\n                }\n              }\n            ],\n            \"levelType\": \"none\",\n            \"metric\": {\n              \"objectId\": \"4C05177011D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Revenue\"\n            },\n            \"metricFunction\": \"value\",\n            \"isIndependent\": 0,\n            \"nullInclude\": 0\n          }\n        }\n      ],\n      \"type\": \"operator\"\n    }\n  },\n  \"options\": {\n    \"dataLanguages\": {\n      \"dataLanguageType\": \"project_default\"\n    },\n    \"dataRefresh\": \"replace\",\n    \"dataPartition\": {\n      \"partitionAttribute\": {},\n      \"numberOfPartitions\": 0,\n      \"fetchDataSlicesInParallel\": false\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/cubes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"cubes"
													],
													"query": [
														{
															"key": "cubeTemplateId",
															"value": null,
															"description": "This parameter specifies a cube object that will be used as a template for new cube creation. The new cube will inherit the defintion of this cube, and can be overwritten through request body of POST /model/cubes.\n\nIf ommitted, the new cube will be created based on a blank cube.",
															"disabled": true
														},
														{
															"key": "showExpressionAs",
															"value": null,
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
															"disabled": true
														},
														{
															"key": "showFilterTokens",
															"value": null,
															"description": "Specify whether the cube \"filter\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe cube filter is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
															"disabled": true
														}
													]
												},
												"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.  \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API.     \n"
											},
											"response": []
										},
										{
											"name": "Update a cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create cube\", function () {",
															"    pm.response.to.have.status(201); ",
															"    const cube = pm.response.json();",
															"    pm.environment.set(\"rd_cubeId\", cube.information.objectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"information\": {\n    \"subType\": \"report_cube\",\n    \"name\": \"Test Cube Updated(Year, Category Analysis)\",\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n  \"template\": {\n    \"rows\": [\n      {\n        \"id\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"name\": \"Year\",\n        \"type\": \"attribute\"\n      },\n      {\n        \"id\": \"8D679D3711D3E4981000E787EC6DE8A4\",\n        \"name\": \"Category\",\n        \"type\": \"attribute\"\n      }\n    ],\n    \"columns\": [\n      {\n        \"type\": \"metrics\",\n        \"elements\": [\n          {\n            \"id\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n            \"name\": \"Cost\",\n            \"subType\": \"metric\"\n          },\n          {\n            \"id\": \"4C051DB611D3E877C000B3B2D86C964F\",\n            \"name\": \"Profit\",\n            \"subType\": \"metric\"\n          }\n        ]\n      }\n    ],\n    \"pageBy\": []\n  },\n  \"filter\": {\n    \"text\": \"(Subcategory = Art & Architecture, Business, Computers, Electronics - Miscellaneous) And (Revenue > 100000)\",\n    \"tree\": {\n      \"function\": \"and\",\n      \"children\": [\n        {\n          \"type\": \"predicate_element_list\",\n          \"predicateId\": \"34BD0D556AC6423CB8061BB90A0C1AB2\",\n          \"predicateTree\": {\n            \"attribute\": {\n              \"objectId\": \"8D679D4F11D3E4981000E787EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Subcategory\"\n            },\n            \"elements\": [\n              {\n                \"display\": \"Art & Architecture\",\n                \"elementId\": \"h11\"\n              },\n              {\n                \"display\": \"Business\",\n                \"elementId\": \"h12\"\n              },\n              {\n                \"display\": \"Computers\",\n                \"elementId\": \"h23\"\n              },\n              {\n                \"display\": \"Electronics - Miscellaneous\",\n                \"elementId\": \"h24\"\n              }\n            ],\n            \"function\": \"in\"\n          }\n        },\n        {\n          \"type\": \"predicate_metric_qualification\",\n          \"predicateId\": \"EF616BAECDED4AE0A91C6A4A5092ED92\",\n          \"predicateText\": \"(Revenue > 100000)\",\n          \"predicateTree\": {\n            \"function\": \"greater\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"100000.0\"\n                }\n              }\n            ],\n            \"levelType\": \"none\",\n            \"metric\": {\n              \"objectId\": \"4C05177011D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Revenue\"\n            },\n            \"metricFunction\": \"value\",\n            \"isIndependent\": 0,\n            \"nullInclude\": 0\n          }\n        }\n      ],\n      \"type\": \"operator\"\n    }\n  },\n  \"options\": {\n    \"dataLanguages\": {\n      \"dataLanguageType\": \"project_default\"\n    },\n    \"dataRefresh\": \"replace\",\n    \"dataPartition\": {\n      \"partitionAttribute\": {},\n      \"numberOfPartitions\": 0,\n      \"fetchDataSlicesInParallel\": false\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"cubes",
														":cubeId"
													],
													"query": [
														{
															"key": "showExpressionAs",
															"value": null,
															"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
															"disabled": true
														},
														{
															"key": "showFilterTokens",
															"value": null,
															"description": "Specify whether the cube \"filter\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe cube filter is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.  \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API.     \n"
											},
											"response": []
										},
										{
											"name": "Publish cube to library",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"publish cube\", function () {",
															"    pm.response.to.have.status(202); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cubes",
														":cubeId"
													],
													"query": [
														{
															"key": "fields",
															"value": null,
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.  \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API.     \n"
											},
											"response": []
										},
										{
											"name": "Delete created cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete cube\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:objectId?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":objectId"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 3 is for cube object type."
														}
													],
													"variable": [
														{
															"key": "objectId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_cubeId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to create an attribute object through the Modeling service."
								}
							],
							"description": "You can use REST API requests to retrieve, create and update attribute objects through the Modeling service."
						},
						{
							"name": "Make External Data Available Using the Push Data API",
							"item": [
								{
									"name": "Create a dataset with one request",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"require(\"btoa\")",
															"//Small dataset for demo purpose",
															"const dataset = [",
															"  {",
															"    \"State\": \"Alabama\",",
															"    \"State_Latitude\": 32.6144,",
															"    \"State_Longitude\": -86.6807,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 60,",
															"    \"Profit\": 174.46",
															"  },",
															"  {",
															"    \"State\": \"Alaska\",",
															"    \"State_Latitude\": 64.0003,",
															"    \"State_Longitude\": -150,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 136,",
															"    \"Profit\": 97.26",
															"  },",
															"  {",
															"    \"State\": \"Arizona\",",
															"    \"State_Latitude\": 34.1679,",
															"    \"State_Longitude\": -111.931,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 197,",
															"    \"Profit\": 64.68",
															"  },",
															"  {",
															"    \"State\": \"Arkansas\",",
															"    \"State_Latitude\": 34.7519,",
															"    \"State_Longitude\": -92.1305,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 25,",
															"    \"Profit\": 39.7",
															"  },",
															"  {",
															"    \"State\": \"California\",",
															"    \"State_Latitude\": 37.2719,",
															"    \"State_Longitude\": -119.27,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 181,",
															"    \"Profit\": 583.89",
															"  }",
															"]",
															"let encodedDataset = btoa(JSON.stringify(dataset))",
															"pm.environment.set(\"rd_dataset\", encodedDataset);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"    const json = pm.response.json();",
															"",
															"    pm.environment.set(\"rd_datasetId\", json.datasetId);",
															"    //save the table id. use it to update the table",
															"    pm.environment.set(\"rd_tableId\", json.tables[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Demo\",\n    \"tables\": [\n        {\n            \"data\": \"{{rd_dataset}}\",\n            \"name\": \"SALES_TABLE\",\n            \"columnHeaders\": [\n                {\n                    \"name\": \"State\",\n                    \"dataType\": \"STRING\"\n                },\n                {\n                    \"name\": \"State_Latitude\",\n                    \"dataType\": \"DOUBLE\"\n                },\n                {\n                    \"name\": \"State_Longitude\",\n                    \"dataType\": \"DOUBLE\"\n                },\n                {\n                    \"name\": \"Quarter\",\n                    \"dataType\": \"STRING\"\n                },\n                {\n                    \"name\": \"Arbitrary_Number\",\n                    \"dataType\": \"DOUBLE\"\n                },\n                {\n                    \"name\": \"Profit\",\n                    \"dataType\": \"DOUBLE\"\n                }\n            ]\n        }\n    ],\n    \"metrics\": [\n        {\n            \"name\": \"Arbitrary Number\",\n            \"dataType\": \"number\",\n            \"expressions\": [\n                {\n                    \"formula\": \"SALES_TABLE.Arbitrary_Number\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Profit\",\n            \"dataType\": \"number\",\n            \"expressions\": [\n                {\n                    \"formula\": \"SALES_TABLE.Profit\"\n                }\n            ]\n        }\n    ],\n    \"attributes\": [\n        {\n            \"name\": \"State\",\n            \"attributeForms\": [\n                {\n                    \"category\": \"ID\",\n                    \"expressions\": [\n                        {\n                            \"formula\": \"SALES_TABLE.State\"\n                        }\n                    ],\n                    \"dataType\": \"string\"\n                },\n                {\n                    \"category\": \"Latitude\",\n                    \"expressions\": [\n                        {\n                            \"formula\": \"SALES_TABLE.State_Latitude\"\n                        }\n                    ],\n                    \"dataType\": \"number\"\n                },\n                {\n                    \"category\": \"Longitude\",\n                    \"expressions\": [\n                        {\n                            \"formula\": \"SALES_TABLE.State_Longitude\"\n                        }\n                    ],\n                    \"dataType\": \"number\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Quarter\",\n            \"attributeForms\": [\n                {\n                    \"category\": \"ID\",\n                    \"expressions\": [\n                        {\n                            \"formula\": \"SALES_TABLE.Quarter\"\n                        }\n                    ],\n                    \"dataType\": \"string\"\n                }\n            ]\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update data in a single-table dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"require(\"btoa\")",
															"//Small dataset for demo purpose.  Changing the Profit value to test",
															"const dataset = [",
															"  {",
															"    \"State\": \"Alabama\",",
															"    \"State_Latitude\": 32.6144,",
															"    \"State_Longitude\": -86.6807,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 60,",
															"    \"Profit\": 200",
															"  },",
															"  {",
															"    \"State\": \"Alaska\",",
															"    \"State_Latitude\": 64.0003,",
															"    \"State_Longitude\": -150,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 136,",
															"    \"Profit\": 97.26",
															"  },",
															"  {",
															"    \"State\": \"Arizona\",",
															"    \"State_Latitude\": 34.1679,",
															"    \"State_Longitude\": -111.931,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 197,",
															"    \"Profit\": 64.68",
															"  },",
															"  {",
															"    \"State\": \"Arkansas\",",
															"    \"State_Latitude\": 34.7519,",
															"    \"State_Longitude\": -92.1305,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 25,",
															"    \"Profit\": 39.7",
															"  },",
															"  {",
															"    \"State\": \"California\",",
															"    \"State_Latitude\": 37.2719,",
															"    \"State_Longitude\": -119.27,",
															"    \"Quarter\": \"Q1\",",
															"    \"Arbitrary_Number\": 181,",
															"    \"Profit\": 583.89",
															"  }",
															"]",
															"let encodedDataset = btoa(JSON.stringify(dataset))",
															"pm.environment.set(\"rd_dataset\", encodedDataset);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"description": "Update operation type: Add, Update, Upsert, Replace",
														"key": "updatePolicy",
														"value": "Replace"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": \"{{rd_dataset}}\",\n    \"name\": \"SALES_TABLE\",\n    \"columnHeaders\": [\n        {\n            \"name\": \"State\",\n            \"dataType\": \"STRING\"\n        },\n        {\n            \"name\": \"State_Latitude\",\n            \"dataType\": \"DOUBLE\"\n        },\n        {\n            \"name\": \"State_Longitude\",\n            \"dataType\": \"DOUBLE\"\n        },\n        {\n            \"name\": \"Quarter\",\n            \"dataType\": \"STRING\"\n        },\n        {\n            \"name\": \"Arbitrary_Number\",\n            \"dataType\": \"DOUBLE\"\n        },\n        {\n            \"name\": \"Profit\",\n            \"dataType\": \"DOUBLE\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/tables/:tableId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"tables",
														":tableId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required) Dataset ID"
														},
														{
															"key": "tableId",
															"value": "{{rd_tableId}}",
															"description": "(Required) Table ID or name"
														}
													]
												},
												"description": "Update a structured dataset with a single table, using external data uploaded to the MicroStrategy Intelligence Server. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token, the project ID, and the update operation to be performed ('add', 'update', 'upsert', or 'replace') in the request header. You specify the IDs of the dataset and table being updated in the path of the request. You provide the information needed to update the dataset in the body parameter of the request, including the name of the table to be updated, a description of the columns in the table, and the data used by the update operation. "
											},
											"response": []
										},
										{
											"name": "Get the definition of a dataset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get the definition of a dataset\", function () {",
															"    pm.response.to.have.status(200);",
															" ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Specifies object types to be returned. Possible values include tables, columns, attributes, and metrics. If no value is set, attributes and metrics are returned.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Get the definition of a specific MTDI dataset; this can be either a single-table dataset or a dataset with multiple tables. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request; you obtain the dataset ID from POST /datasets or POST /datasets/models. You specify the kind of data to return using the 'fields' query parameter in the request; possible values include tables, columns, attributes, and metrics. You can specify multiple values for the 'fields' parameter by adding each value in a new line in the 'fields' value textbox; if you don't specify any value, attributes and metrics will be returned."
											},
											"response": []
										},
										{
											"name": "Get cube definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get cube definition\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cubes",
														":cubeId"
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new cube instance",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Sort Cube Instance/Create a new cube instance\", function () {",
															"    pm.response.to.have.status(200);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/cubes/:cubeId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes",
														":cubeId",
														"instances"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
											},
											"response": []
										},
										{
											"name": "Delete created dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete created dataset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:id?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":id"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 3 is for dataset object type."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_datasetId}}",
															"description": "(Required) Object ID"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_datasetId\");",
															"    pm.environment.unset(\"rd_tableId\");",
															"    pm.environment.unset(\"rd_dataset\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "You use REST APIs to create and modify datasets using external data uploaded directly to the Intelligence Server. This example shows how to create a dataset with one request."
								},
								{
									"name": "Create multi-table dataset",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create the definition of a multi-table dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create the definition of a multi-table dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_datasetId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\":\"testDataset\",\n  \"description\":\"This is a dataset definition created by the Push Data API\",\n  \"folderId\":\"{{publicReportsFolderId}}\",\n  \"tables\":[\n    {\n      \"name\": \"table1\",\n      \"columnHeaders\": [\n        {\n          \"name\": \"ID\",\n          \"dataType\": \"Integer\"\n        },{\n          \"name\": \"Date\",\n          \"dataType\": \"Date\"\n        },{\n          \"name\": \"Time\",\n          \"dataType\": \"Time\"\n        },{\n          \"name\": \"Category\",\n          \"dataType\": \"String\"\n        },{\n          \"name\": \"Cost\",\n          \"dataType\": \"Double\"\n        }\n      ]\n    },\n    {\n      \"name\": \"table2\",\n      \"columnHeaders\": [\n        {\n          \"name\": \"Year\",\n          \"dataType\": \"Integer\"\n        },{\n          \"name\": \"DateTime\",\n          \"dataType\": \"DateTime\"\n        },{\n          \"name\": \"Profit\",\n          \"dataType\": \"Double\"\n        }\n      ]\n    }\n  ],\n  \"metrics\":[\n    {\n      \"name\": \"Cost\",\n      \"expressions\": [\n        {\n          \"tableName\": \"table1\",\n          \"columnName\": \"Cost\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Profit\",\n      \"expressions\": [\n        {\n          \"tableName\": \"table2\",\n          \"columnName\": \"Profit\"\n        }\n      ]\n    }\n  ],\n  \"attributes\":[\n    {\n      \"name\": \"ID\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table1\",\n              \"columnName\": \"ID\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"Date\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table1\",\n              \"columnName\": \"Date\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"Time\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table1\",\n              \"columnName\": \"Time\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"Category\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table1\",\n              \"columnName\": \"Category\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"Year\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table2\",\n              \"columnName\": \"Year\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"DateTime\",\n      \"attributeForms\": [\n        {\n          \"category\": \"ID\",\n          \"expressions\": [\n            {\n              \"tableName\": \"table2\",\n              \"columnName\": \"DateTime\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/models",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														"models"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create the definition of a dataset containing one or more tables. The definition includes the name and description of the dataset and the name and description of each table, attribute, and metric within the dataset. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the information used to create the dataset definition in the body parameter of the request; you specify the name and description of the dataset, the ID of the folder where the dataset definition will be saved, and a description of the tables, attributes, and metrics in the dataset. If the folder ID is not provided, the dataset will be saved in the user's My Reports folder. For each table in the dataset, you provide the name of the table and the name and datatype of each column in the table. For each metric in the dataset, provide the name of the metric, the names of all of the tables that include that metric, and the name of the column in each table that holds the metric. For each attribute in the dataset, provide the name of the attribute, the attribute form, the names of all of the tables that include that attribute, and the name of the column in each table that holds the attribute. Valid attribute forms are ID or DESC; longitude and latitude attribute forms are not supported. This request returns the name and ID of the dataset.\n\nTo create a multi-table dataset, use the requests in the order shown below:\n\n1. POST /datasets/models\n2. POST /datasets/{datasetId}/uploadSessions\n3. PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId}\n4. POST /datasets/{datasetId}/uploadSessions/{uploadSessionId}/publish\n5. GET /datasets/{datasetId}/uploadSessions/{uploadSessionId}/publishStatus\n\nNote: datasets created by this API can only be published or republished by APIs under /datasets/{datasetId}/uploadSessions endpoint."
											},
											"response": []
										},
										{
											"name": "Get the definition of a dataset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get the definition of a dataset\", function () {",
															"    pm.response.to.have.status(200);",
															" ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Specifies object types to be returned. Possible values include tables, columns, attributes, and metrics. If no value is set, attributes and metrics are returned.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Get the definition of a specific MTDI dataset; this can be either a single-table dataset or a dataset with multiple tables. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request; you obtain the dataset ID from POST /datasets or POST /datasets/models. You specify the kind of data to return using the 'fields' query parameter in the request; possible values include tables, columns, attributes, and metrics. You can specify multiple values for the 'fields' parameter by adding each value in a new line in the 'fields' value textbox; if you don't specify any value, attributes and metrics will be returned."
											},
											"response": []
										},
										{
											"name": "Instantiate upload session",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"instantiate upload session\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_uploadSessionId\", pm.response.json().uploadSessionId)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tables\":[\n    {\n      \"columnHeaders\": [\n        \"ID\",\n        \"Date\",\n        \"Time\",\n        \"Category\",\n        \"Cost\"\n      ],\n      \"name\":\"table1\",\n      \"orientation\":\"row\",\n      \"updatePolicy\":\"replace\"\n    },\n    {\n      \"columnHeaders\": [\n        \"Year\",\n        \"DateTime\",\n        \"Profit\"\n      ],\n      \"name\":\"table2\",\n      \"orientation\":\"row\",\n      \"updatePolicy\":\"add\"\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "Add data to upload session",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"require(\"btoa\")",
															"//Small dataset for demo purpose",
															"const dataset = [",
															"  [",
															"    1,",
															"    \"2017-12-04\",",
															"    \"11:00:00\",",
															"    \"Books\",",
															"    100.52",
															"  ]",
															"]",
															"let encodedDataset = btoa(JSON.stringify(dataset))",
															"pm.environment.set(\"rd_dataset\", encodedDataset);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Add data to upload session\", function () {",
															"    pm.response.to.have.status(200);",
															" ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\":\"{{rd_dataset}}\",\n  \"index\":\"1\",\n  \"tableName\":\"table1\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_uploadSessionId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "Add more data to upload session",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"require(\"btoa\");",
															"//Small dataset for demo purpose",
															"const dataset = [",
															"  [",
															"    2,",
															"    \"2017-12-05\",",
															"    \"11:00:00\",",
															"    \"Books\",",
															"    200",
															"  ]",
															"];",
															"let encodedDataset = btoa(JSON.stringify(dataset));",
															"pm.environment.set(\"rd_dataset\", encodedDataset);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Add more data to upload session\", function () {",
															"    pm.response.to.have.status(200);",
															" ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\":\"{{rd_dataset}}\",\n  \"index\":\"2\",\n  \"tableName\":\"table1\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_uploadSessionId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "Publish the dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Publish the dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"    //wait for dataset to be published",
															"    setTimeout(function(){}, [2000]);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId/publish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId",
														"publish"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_uploadSessionId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "View publish status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"View publish status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId/publishStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId",
														"publishStatus"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_uploadSessionId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "Delete upload session",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the upload session\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_uploadSessionId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Create a multi-table dataset upload session and provide formatting information for data that is to be uploaded to the Intelligence Server. Formatting information is used by the Intelligence Server to parse data from a subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} request. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the dataset ID in the path of the request. You obtain the dataset ID from POST /datasets/models. In the body of the request, you must provide the name and update policy for each table in the dataset. The update policy refers to how updates are applied to existing data in the dataset; valid values are 'add', 'update', 'upsert', and 'replace'. Optionally, you can also provide the orientation and column headers for each table in the body of the request; these parameters define how data is arranged in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests and processed by the Intelligence Server. The orientation parameter specifies whether the array of data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests is arranged by rows or columns. Valid orientations are 'ROW' and 'COLUMN'; if the orientation parameter is not provided, 'ROW' is used. Refer to documentation within PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} for an example of 'ROW' and 'COLUMN' orientation. The columnHeaders parameter accepts an optional list of column names; data provided in subsequent PUT /datasets/{datasetId}/uploadSessions/{uploadSessionId} requests should have the same order as the column names in columnHeaders. If the columnHeaders parameter is not provided, the order of column names in the response of GET datasets/{datasetId}?fields=columns is used."
											},
											"response": []
										},
										{
											"name": "Delete created dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete created dataset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:id?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":id"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 3 is for dataset object type."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_datasetId}}",
															"description": "(Required) Object ID"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_datasetId\");",
															"    pm.environment.unset(\"rd_uploadSessionId\");",
															"    pm.environment.unset(\"rd_dataset\");",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "You use REST APIs to create and modify datasets using external data uploaded directly to the Intelligence Server."
								}
							]
						}
					]
				},
				{
					"name": "Data API",
					"item": [
						{
							"name": "Report",
							"item": [
								{
									"name": "Create a Report Instance and Get Definition",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get report\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_reportId\", pm.response.json().result[0].id)",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?name=Forecast (Grid)&type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Forecast (Grid)"
														},
														{
															"key": "type",
															"value": "3"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance of report with attribute element prompt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create report instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required) Report ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get report definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get report definition\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"rd_reportInstanceId\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to answer object prompts within a report."
								},
								{
									"name": "Create a Report Instance and Update Page By",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance of report with attribute element prompt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"6E105112477A4D178B1F59BAA3314210\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create report instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required) Report ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get available page-by elements of the report.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get available page-by elements\", function () {",
															"    pm.response.to.have.status(200);",
															"    const response = pm.response.json();",
															"    pm.environment.set(\"rd_pageByElementId\", response.pageBy[0].elements[1].id); //get the second page-by element whic should be  \"West Coast\"",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId/pageBy/elements?offset=0&limit=1000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId",
														"pageBy",
														"elements"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														},
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Get the valid pageBy elements combinations of the report. These combinations could be used to jump to a specific page of the report."
											},
											"response": []
										},
										{
											"name": "Update page-by",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update page-by\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPageBy\": [\n        {\n            \"id\": \"{{rd_pageByElementId}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId?offset=0&limit=1000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Do manipulations on top of the specified instance"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"rd_reportInstanceId\")",
															"     pm.environment.unset(\"rd_pageByElementId\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to answer object prompts within a report."
								},
								{
									"name": "Create a Report Instance and Update Multiple Page By",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance of report with attribute element prompt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"FA055E5B408A9A7ABA47C6A001E8D72C\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create report instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required) Report ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get available page-by elements of the report.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get available page-by elements\", function () {",
															"    pm.response.to.have.status(200);",
															"    const response = pm.response.json();",
															"    pm.environment.set(\"rd_pageByElementId\", response.pageBy[0].elements[0].id); ",
															"    pm.environment.set(\"rd_pageBy2ElementId\", response.pageBy[1].elements[0].id); ",
															"    pm.environment.set(\"rd_pageBy3ElementId\", response.pageBy[2].elements[0].id); ",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId/pageBy/elements?offset=0&limit=1000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId",
														"pageBy",
														"elements"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														},
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Get the valid pageBy elements combinations of the report. These combinations could be used to jump to a specific page of the report."
											},
											"response": []
										},
										{
											"name": "Update page-by",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update page-by\", function () {",
															"    pm.response.to.have.status(200);",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"currentPageBy\": [\n        {\n            \"id\": \"{{rd_pageByElementId}}\"\n        },\n        {\n            \"id\": \"{{rd_pageBy2ElementId}}\"\n        },\n        {\n            \"id\": \"{{rd_pageBy3ElementId}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId?offset=0&limit=1000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Do manipulations on top of the specified instance"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"rd_reportInstanceId\")",
															"    pm.environment.unset(\"rd_pageByElementId\")",
															"    pm.environment.unset(\"rd_pageBy2ElementId\")",
															"    pm.environment.unset(\"rd_pageBy3ElementId\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to answer object prompts within a report."
								},
								{
									"name": "Create a Report Instance and Update Sorting",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance of report",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"743A98F045B5EF766121BEA692E9F6C7\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Sort Report Instance/Create instance of report\", function () {",
															"    pm.response.to.have.status(200); ",
															"",
															"    const reportObject = pm.response.json();",
															"    const instanceId = reportObject.instanceId;",
															"    pm.environment.set(\"rd_reportInstanceId\", instanceId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Sort instance by metric and attribute",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Sort Report Instance/Sort Instance by Metric and Attribute\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sorting\": [\n    {\n      \"type\": \"metric\",\n      \"metric\": {\n        \"id\": \"08F9966749975B5C1A4980A3FA8CE3E7\",\n        \"name\": \"Forecast\"\n      }\n    },\n    {\n      \"type\": \"attribute\",\n      \"attribute\": {\n        \"id\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"name\": \"Year\"\n      }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_reportId\")",
															"    pm.environment.unset(\"rd_reportInstanceId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "The workflow demonstrates how to sort a report instance by metric and attribute."
								},
								{
									"name": "Create a Cross-Tab Report Instance and Update Sorting",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance of report with attribute element prompt",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"997EEF464C0758FDCDF9508FB9918B9A\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create report instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
															"    ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required) Project ID"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required) Report ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update sorting on report instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update sorting\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sorting\": {\n        \"rows\": [\n                    {\n                        \"type\": \"form\",\n                        \"attribute\": {\n                            \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\",\n                            \"name\": \"Region\"\n                        },\n                        \"form\": {\n                            \"id\": \"CCFBE2A5EADB4F50941FB879CCF1721C\"\n                        },\n                        \"subtotalsPosition\": \"inherit\",\n                        \"order\": \"descending\"\n                    },{\n                        \"type\": \"form\",\n                        \"attribute\": {\n                            \"id\": \"8D679D3F11D3E4981000E787EC6DE8A4\",\n                            \"name\": \"Employee\"\n                        },\n                        \"form\": {\n                            \"id\": \"8D67A52E11D3E4981000E787EC6DE8A4\"\n                        },\n                        \"order\": \"descending\"\n                    }\n                    ]\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId?offset=0&limit=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"reports",
														":reportId",
														"instances",
														":instanceId"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "10"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_reportInstanceId}}",
															"description": "Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"    pm.environment.unset(\"rd_reportInstanceId\")",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to answer object prompts within a report."
								},
								{
									"name": "Filter Reports Using View Filters",
									"item": [
										{
											"name": "Filter on Attribute Elements",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Get a report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Get elements for a specific attribute in a specific report",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Get elements for a specific attribute in a specific report\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/attributes/:attributeId/elements?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"attributes",
																":attributeId",
																"elements"
															],
															"query": [
																{
																	"key": "baseFormIds",
																	"value": "est laborum aliquip",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "baseFormIds",
																	"value": "occaecat sed",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "searchPattern",
																	"value": "sed minim",
																	"description": "Search pattern",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																},
																{
																	"key": "attributeId",
																	"value": "{{rd_attributeId}}",
																	"description": "(Required) Attribute ID - From GET api/reports/:reportId"
																}
															]
														},
														"description": "Get a list of elements for a specific attribute in a specific report in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the report ID, and the attribute ID in the path  of the request. You use the offset and limit query parameters to control paging behavior; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. You use the searchPattern query parameter to define a search pattern to apply, such as Begins With or Exactly. A list of Base Form IDs can be passed in as query parameter to specify what forms of elements be returned. If base form IDs not specified, all browse form values in the report are returned."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on Elements",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"In\",\n    \"operands\":[\n      {\n        \"type\":\"attribute\",\n        \"id\":\"{{rd_attributeId}}\",\n        \"name\":\"Region\"\n      },\n\n      {\n        \"type\":\"elements\",\n        \"elements\":[\n          {\n            \"id\":\"{{rd_elementId}}\",\n            \"name\":\"Northeast\"\n          }\n        ]\n      }\n    ]\n\n  }\n\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on Form",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Forms/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"Between\",\n    \"operands\":[\n      {\n        \"type\":\"form\",\n        \"attribute\":{\n          \"id\":\"5B81D4D541A551CCC0535EA54B88B611\",\n          \"name\":\"Customer Latitude\"\n        },\n        \"form\":{\n          \"id\":\"45C11FA478E745FEA08D781CEA190FE5\",\n          \"name\":\"ID\"\n        }\n      },\n      {\n        \"type\":\"constant\",\n        \"dataType\":\"Real\",\n        \"value\":\"25\"\n      },\n      {\n        \"type\":\"constant\",\n        \"dataType\":\"Real\",\n        \"value\":\"30\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on multiple forms",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Multiple Filters on Attribute Forms/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"viewFilter\": {\n        \"operator\": \"In\",\n        \"operands\": [\n            {\n                \"type\": \"form\",\n                \"attribute\": {\n                    \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\"\n                },\n                \"form\": {\n                    \"id\": \"CCFBE2A5EADB4F50941FB879CCF1721C\",\n                    \"name\": \"DESC\"\n                }\n            },\n            {\n                \"type\": \"constants\",\n                \"dataType\": \"Char\",\n                \"values\": [\"Central\", \"Northeast\"]\n            }\n        ]\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Browse folders/logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_attributeId\");  ",
																	"    pm.environment.unset(\"rd_elementId\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"//Requirement: Need a report with Region Attribute to run the request in this folder",
															"pm.environment.set(\"rd_reportId\",\"272B08F440B0C2AB9764F7AAC7954ED8\");",
															"pm.environment.set(\"rd_attributeId\",\"8D679D4B11D3E4981000E787EC6DE8A4\");",
															"pm.environment.set(\"rd_elementId\", \"8D679D4B11D3E4981000E787EC6DE8A4:1\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Filter on Metrics",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Metrics/Get a report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on two metrics",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Metrics/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"Greater\",\n    \"operands\":[\n      {\n        \"type\":\"metric\",\n        \"id\":\"{{rd_metric1}}\",\n        \"name\":\"Revenue\"\n      },\n      {\n        \"type\":\"metric\",\n        \"id\":\"{{rd_metric2}}\",\n        \"name\":\"Revenue Forecast\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on Metric value greater than",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"create report instance\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"metricLimits\": {\n    \"{{rd_metric1}}\": {\n      \"operator\": \">\",\n      \"operands\": [\n        {\n          \"type\": \"metric\",\n          \"id\": \"{{rd_metric1}}\",\n          \"name\": \"Revenue\"\n        },\n        {\n          \"type\": \"constant\",\n          \"value\": \"50000\",\n          \"dataType\": \"Real\"\n        }\n      ]\n    },\n    \"{{rd_metric3}}\": {\n      \"operator\": \"|\",\n      \"operands\": [\n        {\n          \"operator\": \"<\",\n          \"operands\": [\n            {\n              \"type\": \"metric\",\n              \"id\": \"{{rd_metric3}}\",\n              \"name\": \"Profit Margin\"\n            },\n            {\n              \"type\": \"constant\",\n              \"value\": \"16.5\",\n              \"dataType\": \"Real\"\n            }\n          ]\n        },\n        {\n          \"operator\": \">\",\n          \"operands\": [\n            {\n              \"type\": \"metric\",\n              \"id\": \"{{rd_metric3}}\",\n              \"name\": \"Profit Margin\"\n            },\n            {\n              \"type\": \"constant\",\n              \"value\": \"19\",\n              \"dataType\": \"Real\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Browse folders/logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_metric1\");  ",
																	"    pm.environment.unset(\"rd_metric2\");  ",
																	"    pm.environment.unset(\"rd_metric3\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"",
															"//This is using report named \"Executive Business User Data\". ",
															"//This workflow shows metric filter on metric 1 > metric 2",
															"pm.environment.set(\"rd_reportId\",\"B7E14BD6439AC1F680AD298860D1F16D\");",
															"pm.environment.set(\"rd_metric1\",\"4C05177011D3E877C000B3B2D86C964F\"); // Revenue",
															"pm.environment.set(\"rd_metric2\",\"8D7D59C144AB891C57FEFA873ABE1C92\"); // Revenue_Forecase",
															"pm.environment.set(\"rd_metric3\", \"2680DF9E11D5C3FEC0000B881FDA1A4F\"); // Profit_Margin",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Filter Using requestedObjects",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"get report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Get elements for a specific attribute in a specific report",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"get elements in report\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/attributes/:attributeId/elements?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"attributes",
																":attributeId",
																"elements"
															],
															"query": [
																{
																	"key": "baseFormIds",
																	"value": "est laborum aliquip",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "baseFormIds",
																	"value": "occaecat sed",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "searchPattern",
																	"value": "sed minim",
																	"description": "Search pattern",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																},
																{
																	"key": "attributeId",
																	"value": "{{rd_attribute}}",
																	"description": "(Required) Attribute ID - From GET api/reports/:reportId"
																}
															]
														},
														"description": "Get a list of elements for a specific attribute in a specific report in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the report ID, and the attribute ID in the path  of the request. You use the offset and limit query parameters to control paging behavior; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. You use the searchPattern query parameter to define a search pattern to apply, such as Begins With or Exactly. A list of Base Form IDs can be passed in as query parameter to specify what forms of elements be returned. If base form IDs not specified, all browse form values in the report are returned."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter using requestedObjects",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"create report instance\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"requestedObjects\": {\n    \"attributes\": [\n      {\n        \"id\": \"{{rd_attribute}}\",\n        \"name\": \"Region\"\n      }\n    ],\n    \"metrics\": [\n      {\n        \"id\": \"{{rd_metric}}\",\n        \"name\": \"Revenue\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_attribute\");  ",
																	"    pm.environment.unset(\"rd_metric\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"//Requirement: Need a report with Region Attribute to run the request in this folder",
															"pm.environment.set(\"rd_reportId\",\"272B08F440B0C2AB9764F7AAC7954ED8\"); //Customer Income Analysis by Geography",
															"pm.environment.set(\"rd_attribute\",\"8D679D4B11D3E4981000E787EC6DE8A4\"); //Region",
															"pm.environment.set(\"rd_metric\", \"4C05177011D3E877C000B3B2D86C964F\"); //Revenue"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"description": "When you create a MicroStrategy report or cube instance using the following REST API endpoints, you can use a parameter called viewFilter in the body parameter of the request to filter the data that is returned."
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cube and Dataset",
							"item": [
								{
									"name": "Create Intelligent Cube, Publish, Get Definition, and Delete",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create cube",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create cube\", function () {",
															"    pm.response.to.have.status(201);",
															"    const cubeObject = pm.response.json();",
															"    pm.environment.set(\"rd_cubeId\", cubeObject.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "accept",
														"value": "*/*",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Cube 1\",\n  \"description\": \"Created through Rest API\",\n  \"folderId\":\"{{publicReportsFolderId}}\",\n  \"overwrite\": true,\n  \"definition\": {\n    \"availableObjects\": {\n      \"attributes\": [\n        {\n          \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\",\n          \"name\": \"Region\",\n          \"type\": \"attribute\"\n        },\n        {\n          \"id\": \"8D679D3511D3E4981000E787EC6DE8A4\",\n          \"name\": \"Call Center\",\n          \"type\": \"attribute\"\n        }\n      ],\n      \"metrics\": [\n        {\n          \"id\": \"4C05177011D3E877C000B3B2D86C964F\",\n          \"name\": \"Revenue\"\n         \n        }\n      ]\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cubes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cubes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Publish cube\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes",
														":cubeId"
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if cube is published",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check cube\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "HEAD",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes",
														":cubeId"
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}"
														}
													]
												},
												"description": "Get the status of a specific cube in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. The status is returned in HEADER X-MSTR-CubeStatus with a value from [EnumDSSCubeStates](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSCubeStates.html), which is a bit vector."
											},
											"response": []
										},
										{
											"name": "Get cube definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get cube definition\", function () {",
															"    pm.response.to.have.status(200);",
															"    });",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/cubes/:cubeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cubes",
														":cubeId"
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the cube",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the cube\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:objectId?type=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":objectId"
													],
													"query": [
														{
															"key": "type",
															"value": "3",
															"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 3 is for cube object type."
														}
													],
													"variable": [
														{
															"key": "objectId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_cubeId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create, Upload, Get Definition, and Delete Dataset",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create multi-table dataset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"    const datasetObject = pm.response.json();",
															"    pm.environment.set(\"rd_datasetId\", datasetObject.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Customer_Order_Details\",\n  \"description\": \"Customer purchase information\",\n  \"folderId\": \"{{publicReportsFolderId}}\",\n  \"tables\": [\n      {\n         \"name\":\"Customer\",\n         \"columnHeaders\":[\n            {\n               \"name\":\"customer_id\",\n               \"dataType\":\"DOUBLE\"\n            },\n            {\n               \"name\":\"customer_name\",\n               \"dataType\":\"STRING\"\n            }\n         ]\n      },\n      {\n         \"name\":\"Order\",\n         \"columnHeaders\":[\n            {\n               \"name\":\"customer_id\",\n               \"dataType\":\"DOUBLE\"\n            },\n            {\n               \"name\":\"order_date\",\n               \"dataType\":\"DATETIME\"\n            },\n            {\n               \"name\":\"price\",\n               \"dataType\":\"DOUBLE\"\n            }\n         ]\n      }\n  ],\n  \"metrics\": [\n      {\n         \"name\":\"Price\",\n         \"expressions\":[\n            {\n               \"tableName\":\"Order\",\n               \"columnName\":\"price\"\n            }\n         ]\n      }\n  ],\n  \"attributes\": [\n      {\n         \"name\":\"Customer\",\n         \"attributeForms\":[\n            {\n               \"category\":\"ID\",\n               \"expressions\":[\n                  {\n                     \"tableName\":\"Customer\",\n                     \"columnName\":\"customer_id\"\n                  },\n                  {\n                     \"tableName\":\"Order\",\n                     \"columnName\":\"customer_id\"\n                  }\n               ]\n            },\n            {\n               \"category\":\"DESC\",\n               \"expressions\":[\n                  {\n                     \"tableName\":\"Customer\",\n                     \"columnName\":\"customer_name\"\n                  }\n               ]\n            }\n         ]\n      },\n      {\n         \"name\":\"Order_Date\",\n         \"attributeForms\":[\n            {\n               \"category\":\"ID\",\n               \"expressions\":[\n                  {\n                     \"tableName\":\"Order\",\n                     \"columnName\":\"order_date\"\n                  }\n               ]\n            }\n         ]\n      }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/models",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														"models"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create multi-table dataset upload session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create upload session\", function () {",
															"    pm.response.to.have.status(200);",
															"    const datasetObject = pm.response.json();",
															"    pm.environment.set(\"rd_datasetUploadSessionId\", datasetObject.uploadSessionId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tables\": [\n    {\n      \"name\": \"Customer\",\n      \"updatePolicy\": \"REPLACE\",\n      \"orientation\": \"ROW\"\n    },\n    {\n      \"name\": \"Order\",\n      \"updatePolicy\": \"REPLACE\",\n      \"orientation\": \"ROW\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload data to a multi-table dataset chunk 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Upload data `\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tableName\": \"Customer\",\n  \"index\": 1,\n  \"data\": \"W1sxLCJTbWl0aCJdLFsyLCAiUm9iZXJ0Il1d\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_datasetUploadSessionId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload data to a multi-table dataset chunk 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Upload data 2\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tableName\": \"Order\",\n  \"index\": 1,\n  \"data\": \"W1sxLCIyMDE5LTAxLTA3IiwxMDUuOTVdLFsyLCIyMDIwLTAxLTA3Iiw1MjEuODFdXQ==\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_datasetUploadSessionId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the definition of a dataset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get definition\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish  multi-table dataset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Publish dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId/publish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId",
														"publish"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_datasetUploadSessionId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get multi-table dataset publish status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get publish status of dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId/publishStatus",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId",
														"publishStatus"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}",
															"description": "(Required)"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_datasetUploadSessionId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create cube instance and get data",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create cube and get data\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/cubes/:cubeId/instances?offset=0&limit=20",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"cubes",
														":cubeId",
														"instances"
													],
													"query": [
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "limit",
															"value": "20"
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_datasetId}}"
														}
													]
												},
												"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
											},
											"response": []
										},
										{
											"name": "Delete a multi-table dataset upload session and cancel publication",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete dataset\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasets/:datasetId/uploadSessions/:uploadSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasets",
														":datasetId",
														"uploadSessions",
														":uploadSessionId"
													],
													"variable": [
														{
															"key": "datasetId",
															"value": "{{rd_datasetId}}"
														},
														{
															"key": "uploadSessionId",
															"value": "{{rd_datasetUploadSessionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_datasetId\");",
															"    pm.environment.unset(\"rd_datasetUploadSessionId\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Sort Cube Instance",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get information for specific cubes",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_cubeId\", \"0A9EBE87468B751C3663818889B10D73\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get information for specific cubes\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/cubes?id={{rd_cubeId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes"
													],
													"query": [
														{
															"key": "id",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube Object IDs"
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get information for specific cubes in a specific project. The cubes can be either OLAP cubes or Direct Data Access (DDA)/MDX cubes. This request returns the cube name, ID, size, status, path, last modification date, and owner name and ID. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the IDs of the cubes that you want to get information about as the value of a query parameter; the value is an array of cube IDs."
											},
											"response": []
										},
										{
											"name": "Create a new cube instance - no sort",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Sort Cube Instance/Create a new cube instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    const cubeDefn = pm.response.json().result.definition",
															"    const metric_id = cubeDefn.metrics[0].id;",
															"    const attribute_id = cubeDefn.attributes[0].id;",
															"    pm.environment.set(\"rd_metricId\", metric_id);",
															"    pm.environment.set(\"rd_attributeId\", attribute_id);",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/cubes/:cubeId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes",
														":cubeId",
														"instances"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
											},
											"response": []
										},
										{
											"name": "Create a new cube instance - with sort",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Sort Cube Instance/Create a new cube instance\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sorting\": [\n   {\n      \"type\": \"metric\",\n      \"metric\": {\n        \"id\": \"{{rd_metricId}}\"\n      }\n    },\n    {\n      \"type\": \"attribute\",\n      \"attribute\": {\n        \"id\": \"{{rd_attributeId}}\"\n     }\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/cubes/:cubeId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"cubes",
														":cubeId",
														"instances"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "cubeId",
															"value": "{{rd_cubeId}}",
															"description": "(Required) Cube ID"
														}
													]
												},
												"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_metricId\");",
															"    pm.environment.unset(\"rd_attributeId\");    ",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to sort a cube instance."
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Dossier",
							"item": [
								{
									"name": "Export Dossier",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get quick search results in a list format",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_dossierId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?name=Office Royale Sales&pattern=2&type=55",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Office Royale Sales",
															"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
														},
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
														},
														{
															"key": "type",
															"value": "55",
															"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 55 is for dossier."
														},
														{
															"key": "limit",
															"value": "100",
															"description": "Maximum number of items returned for a single request. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create dossier instance",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create dossier instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_dossierInstanceId\", pm.response.json().mid);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dossiers",
														":dossierId",
														"instances"
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Export to PDF (base64)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Export to PDF - Check POSTMAN console for output\", function () {",
															"    pm.response.to.have.status(200);",
															"    let temp_string = pm.response.json().data;",
															"    console.info(\"To view the actual PDF, send the following base64 encoding as input to a base64-to-PDF program.\\nData:\\n\"+temp_string);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"includeOverview\":false,\n   \"includeDetailedPages\":true,\n   \"includeHeader\":true,\n   \"includeFooter\":true,\n   \"includeToc\":false,\n   \"orientation\":\"NONE\",\n   \"pageOption\":\"PAGE\",\n   \"pageHeight\":8.5,\n   \"pageWidth\":11,\n   \"viewportHeight\":0,\n   \"viewportWidth\":0,\n   \"filterSummary\":\"PAGE\",\n   \"gridPagingMode\":\"none\",\n   \"fitToPage\":true,\n   \"repeatColumnHeader\":true,\n   \"responsiveView\":false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:documentId/instances/:instanceId/pdf",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":documentId",
														"instances",
														":instanceId",
														"pdf"
													],
													"variable": [
														{
															"key": "documentId",
															"value": "{{rd_dossierId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_dossierInstanceId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Export to mstr",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Export to mstr\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"includeOverview\":false,\n   \"includeDetailedPages\":true,\n   \"includeHeader\":true,\n   \"includeFooter\":true,\n   \"includeToc\":false,\n   \"orientation\":\"NONE\",\n   \"pageOption\":\"PAGE\",\n   \"pageHeight\":8.5,\n   \"pageWidth\":11,\n   \"viewportHeight\":0,\n   \"viewportWidth\":0,\n   \"filterSummary\":\"PAGE\",\n   \"gridPagingMode\":\"none\",\n   \"fitToPage\":true,\n   \"repeatColumnHeader\":true,\n   \"responsiveView\":false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/documents/:documentId/instances/:instanceId/mstr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"documents",
														":documentId",
														"instances",
														":instanceId",
														"mstr"
													],
													"variable": [
														{
															"key": "documentId",
															"value": "{{rd_dossierId}}",
															"description": "(Required)"
														},
														{
															"key": "instanceId",
															"value": "{{rd_dossierInstanceId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_dossierId\");",
															"    pm.environment.unset(\"rd_dossierInstanceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to export a document to PDF. Documentation can be found on [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.)"
								},
								{
									"name": "Retrieve Data from Dossier",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dossier instance",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_dossierId\", \"27D332AC6D43352E0928B9A1FCAF4AB0\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create dossier instance\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_dossierInstanceId\", pm.response.json().mid);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dossiers",
														":dossierId",
														"instances"
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the definition of a dossier from the instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create dossier instance\", function () {",
															"    pm.response.to.have.status(200);",
															"    const definition = pm.response.json()",
															"    pm.environment.set(\"rd_chapterKey\", definition.chapters[0].key)",
															"    pm.environment.set(\"rd_vizKey\", definition.chapters[0].pages[0].visualizations[0].key)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/instances/:instanceId/definition",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dossiers",
														":dossierId",
														"instances",
														":instanceId",
														"definition"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}",
															"description": "(Required) Dossier ID"
														},
														{
															"key": "instanceId",
															"value": "{{rd_dossierInstanceId}}",
															"description": "(Required) Dossier instance ID"
														}
													]
												},
												"description": "Get the hierarchy of a specific dossier in a specific project from instance. This API is specifically work to get dossier definition for the prompts which has no default answers."
											},
											"response": []
										},
										{
											"name": "Get the definition and data result of a grid/graph visualization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get defintion of visualization\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/instances/:instanceId/chapters/:chapterKey/visualizations/:visualizationKey?offset=0&limit=1000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dossiers",
														":dossierId",
														"instances",
														":instanceId",
														"chapters",
														":chapterKey",
														"visualizations",
														":visualizationKey"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior."
														},
														{
															"key": "limit",
															"value": "1000",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														},
														{
															"key": "standardDateFormat",
															"value": "<boolean>",
															"description": "Standard date format in ISO8601",
															"disabled": true
														},
														{
															"key": "standardRawDateFormat",
															"value": "<boolean>",
															"description": "Standard raw date format in ISO8601",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "<string>",
															"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras' for a normal grid visualization, and '-data.metricValues.columnSets.raw' / '-data.metricValues.columnSets.formatted' / '-data.metricValues.columnSets.extras' for a compound grid visualization. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}",
															"description": "(Required) Dossier ID"
														},
														{
															"key": "instanceId",
															"value": "{{rd_dossierInstanceId}}",
															"description": "(Required) Dossier instance ID"
														},
														{
															"key": "chapterKey",
															"value": "{{rd_chapterKey}}",
															"description": "(Required) Chapter key"
														},
														{
															"key": "visualizationKey",
															"value": "{{rd_vizKey}}",
															"description": "(Required) Visualization key"
														}
													]
												},
												"description": "Get the definition and data result of a grid/graph visualization in a specific dossier in a specific project. A dossier and a document have the same base object; a dossier is simply a different view of the document. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier, the dossier instance, the dossier chapter, and the dossier visualization in the path of the request, by specifying the IDs of the dossier and dossier instance and the keys of the chapter and visualization.  You are using the document/dossier ID that was generated by another API. You obtain the dossier instance ID using POST /dossiers/{dossierId}/instances. You obtain the dossier chapter key and the dossier visualization key using GET /dossiers/{dossierId}/definition.  It is important to note that concurrent behavior on one dossier instance ID is not currently supported; instead, you can create multi-instance IDs to perform concurrent behavior."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_dossierId\");",
															"    pm.environment.unset(\"rd_dossierInstanceId\");",
															"    pm.environment.unset(\"rd_chapterKey\");",
															"    pm.environment.unset(\"rd_vizKey\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to export a document to PDF. Documentation can be found on [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.)"
								},
								{
									"name": "Apply Filter to Dossier",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get dossier definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_dossierId\",\"69F662EE11E9817800000080AFE34811\"); // Avg Delay (min) by Airline",
															"pm.environment.set(\"rd_attributeId\", \"3CE3EAD011EA0C901A090080EFB5072B\"); // Departure Airport",
															"pm.environment.set(\"rd_elementId\", \"hDCA;3CE3EAD011EA0C901A090080EFB5072B\"); //DCA"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get dossier definition\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dossiers/:id/definition",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dossiers",
														":id",
														"definition"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_dossierId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get attribute elements",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get instance attribute elements\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:dossierInstanceId/elements?targetObjectId={{rd_attributeId}}&targetObjectType=attribute",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dossiers",
														":dossierId",
														"instances",
														":dossierInstanceId",
														"elements"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "targetObjectId",
															"value": "{{rd_attributeId}}",
															"description": "(Required)"
														},
														{
															"key": "targetObjectType",
															"value": "attribute",
															"description": "(Required)"
														}
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}"
														},
														{
															"key": "dossierInstanceId",
															"value": "{{rd_dossierInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Apply new filter values",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Apply new filter values\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required)"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"key\": \"W83\",\n        \"name\": \"Departure Airport\",\n        \"selections\": [\n            {\n                \"id\": \"{{rd_elementId}}\"\n            }\n        ]\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:dossierInstanceId/filters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dossiers",
														":dossierId",
														"instances",
														":dossierInstanceId",
														"filters"
													],
													"query": [
														{
															"key": "ignoreMissingFilter",
															"value": "",
															"description": "The ignoreMissingFilter controls the selector matches no found behavior, if true and no selector matches are found, then this filter input will NOT be applied and will be ignored, if false and no found, then the request will fail.\n\nDefault value : false",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}"
														},
														{
															"key": "dossierInstanceId",
															"value": "{{rd_dossierInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get dossier instance definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_dossierId\",\"69F662EE11E9817800000080AFE34811\"); // Avg Delay (min) by Airline",
															"pm.environment.set(\"rd_attributeId\", \"3CE3EAD011EA0C901A090080EFB5072B\"); // Departure Airport",
															"pm.environment.set(\"rd_elementId\", \"hDCA;3CE3EAD011EA0C901A090080EFB5072B\"); //DCA"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get dossier instance definition\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/dossiers/:id/instances/:instanceId/definition",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"dossiers",
														":id",
														"instances",
														":instanceId",
														"definition"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_dossierId}}"
														},
														{
															"key": "instanceId",
															"value": "{{rd_dossierInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create dossier instance",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create dossier instance\", function () {",
															"    pm.response.to.have.status(201);",
															"",
															"    instanceID = pm.response.json().mid;",
															"    pm.environment.set(\"rd_dossierInstanceId\", instanceID);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dossiers",
														":dossierId",
														"instances"
													],
													"variable": [
														{
															"key": "dossierId",
															"value": "{{rd_dossierId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_dossierId\");  ",
															"    pm.environment.unset(\"rd_dossierInstanceId\");  ",
															"    pm.environment.unset(\"rd_attributeId\");",
															"    pm.environment.unset(\"rd_elementId\");  ",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "You can use the following REST APIs to filter the data that is returned when you create or update an instance of a dossier, including clearing the filter selections.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Sort Data",
					"item": [
						{
							"name": "Sort Report Instance",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create instance of report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Sort Report Instance/Create instance of report\", function () {",
													"    pm.response.to.have.status(200); ",
													"",
													"    const reportObject = pm.response.json();",
													"    const instanceId = reportObject.instanceId;",
													"    pm.environment.set(\"rd_reportInstanceId\", instanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "Prefer",
													"value": null,
													"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sort instance by metric and attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Sort Report Instance/Sort Instance by Metric and Attribute\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.collectionVariables.unset(\"runtimeData\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sorting\": [\n    {\n      \"type\": \"metric\",\n      \"metric\": {\n        \"id\": \"4C051DB611D3E877C000B3B2D86C964F\",\n        \"name\": \"Profit\"\n      }\n    },\n    {\n      \"type\": \"attribute\",\n      \"attribute\": {\n        \"id\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"name\": \"Year\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0\n\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{reportId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_reportInstanceId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "The workflow demonstrates how to sort a report instance by metric and attribute."
						},
						{
							"name": "Sort Cube Instance",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get information for specific cubes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// const rd = JSON.parse(pm.collectionVariables.get(\"runtimeData\"));",
													"",
													"// pm.variables.set(\"projectId\", rd.reportObject.projectId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Sort Cube Instance/Get information for specific cubes\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/cubes?id={{cubeId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"cubes"
											],
											"query": [
												{
													"key": "id",
													"value": "{{cubeId}}",
													"description": "(Required) Cube Object IDs"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for specific cubes in a specific project. The cubes can be either OLAP cubes or Direct Data Access (DDA)/MDX cubes. This request returns the cube name, ID, size, status, path, last modification date, and owner name and ID. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the IDs of the cubes that you want to get information about as the value of a query parameter; the value is an array of cube IDs."
									},
									"response": []
								},
								{
									"name": "Create a new cube instance - no sort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Sort Cube Instance/Create a new cube instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    const cubeDefn = pm.response.json().result.definition",
													"    const metric_id = cubeDefn.metrics[0].id;",
													"    const attribute_id = cubeDefn.attributes[0].id;",
													"    pm.environment.set(\"rd_metricId\", metric_id);",
													"    pm.environment.set(\"rd_attributeId\", attribute_id);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/cubes/:cubeId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"cubes",
												":cubeId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "cubeId",
													"value": "{{cubeId}}",
													"description": "(Required) Cube ID"
												}
											]
										},
										"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Create a new cube instance - with sort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Sort Cube Instance/Create a new cube instance\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"sorting\": [\n   {\n      \"type\": \"metric\",\n      \"metric\": {\n        \"id\": \"{{rd_metricId}}\"\n      }\n    },\n    {\n      \"type\": \"attribute\",\n      \"attribute\": {\n        \"id\": \"{{rd_attributeId}}\"\n     }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/cubes/:cubeId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"cubes",
												":cubeId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "cubeId",
													"value": "{{cubeId}}",
													"description": "(Required) Cube ID"
												}
											]
										},
										"description": "Create a new instance of a specific cube. This in-memory instance can be used by other requests. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the cube ID in the path of the request. You use the offset and limit query parameters in the request to determine the data displayed on the page; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. In the body parameter of the request, you specify the data to be included in the instance, such as attributes, metrics, view filter, metric limits, and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_metricId\");",
													"    pm.environment.unset(\"rd_attributeId\");    ",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to sort a cube instance."
						}
					],
					"description": "When you use a REST API request to create a cube or report, you can sort the data that is returned. This is particularly helpful when you are using incremental fetch. You define the kind of sorting to apply in the body parameter of the request. You can apply sorting on all rows, columns, and pages.\n\nYou can sort the results of the following requests:\n\n* POST /v2/reports/{reportId}/instances\n* PUT /v2/reports/{reportId}/instances/{instanceId}\n* POST /v2/cubes/{cubeId}/instances\n* PUT /v2/cubes/{reportId}/instances/{instanceId}"
				},
				{
					"name": "Filter Data",
					"item": [
						{
							"name": "Filter Report and Cube Instances",
							"item": [
								{
									"name": "View Filters",
									"item": [
										{
											"name": "Filter on Attribute Elements",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Get a report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Get elements for a specific attribute in a specific report",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Get elements for a specific attribute in a specific report\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/attributes/:attributeId/elements?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"attributes",
																":attributeId",
																"elements"
															],
															"query": [
																{
																	"key": "baseFormIds",
																	"value": "",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "searchPattern",
																	"value": "",
																	"description": "Search pattern",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																},
																{
																	"key": "attributeId",
																	"value": "{{rd_attributeId}}",
																	"description": "(Required) Attribute ID - From GET api/reports/:reportId"
																}
															]
														},
														"description": "Get a list of elements for a specific attribute in a specific report in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the report ID, and the attribute ID in the path  of the request. You use the offset and limit query parameters to control paging behavior; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. You use the searchPattern query parameter to define a search pattern to apply, such as Begins With or Exactly. A list of Base Form IDs can be passed in as query parameter to specify what forms of elements be returned. If base form IDs not specified, all browse form values in the report are returned."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on Elements",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Elements/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"In\",\n    \"operands\":[\n      {\n        \"type\":\"attribute\",\n        \"id\":\"{{rd_attributeId}}\",\n        \"name\":\"Region\"\n      },\n\n      {\n        \"type\":\"elements\",\n        \"elements\":[\n          {\n            \"id\":\"{{rd_elementId}}\",\n            \"name\":\"Northeast\"\n          }\n        ]\n      }\n    ]\n\n  }\n\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on Form",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Attribute Forms/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"Between\",\n    \"operands\":[\n      {\n        \"type\":\"form\",\n        \"attribute\":{\n          \"id\":\"5B81D4D541A551CCC0535EA54B88B611\",\n          \"name\":\"Customer Latitude\"\n        },\n        \"form\":{\n          \"id\":\"45C11FA478E745FEA08D781CEA190FE5\",\n          \"name\":\"ID\"\n        }\n      },\n      {\n        \"type\":\"constant\",\n        \"dataType\":\"Real\",\n        \"value\":\"25\"\n      },\n      {\n        \"type\":\"constant\",\n        \"dataType\":\"Real\",\n        \"value\":\"30\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on multiple forms",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Multiple Filters on Attribute Forms/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"viewFilter\": {\n        \"operator\": \"In\",\n        \"operands\": [\n            {\n                \"type\": \"form\",\n                \"attribute\": {\n                    \"id\": \"8D679D4B11D3E4981000E787EC6DE8A4\"\n                },\n                \"form\": {\n                    \"id\": \"CCFBE2A5EADB4F50941FB879CCF1721C\",\n                    \"name\": \"DESC\"\n                }\n            },\n            {\n                \"type\": \"constants\",\n                \"dataType\": \"Char\",\n                \"values\": [\"Central\", \"Northeast\"]\n            }\n        ]\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Browse folders/logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_attributeId\");  ",
																	"    pm.environment.unset(\"rd_elementId\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"//Requirement: Need a report with Region Attribute to run the request in this folder",
															"pm.environment.set(\"rd_reportId\",\"272B08F440B0C2AB9764F7AAC7954ED8\");",
															"pm.environment.set(\"rd_attributeId\",\"8D679D4B11D3E4981000E787EC6DE8A4\");",
															"pm.environment.set(\"rd_elementId\", \"8D679D4B11D3E4981000E787EC6DE8A4:1\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Filter on Metrics",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Metrics/Get a report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on two metrics",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Filter on Metrics/Create a report instance and get the results\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"viewFilter\":{\n    \"operator\":\"Greater\",\n    \"operands\":[\n      {\n        \"type\":\"metric\",\n        \"id\":\"{{rd_metric1}}\",\n        \"name\":\"Revenue\"\n      },\n      {\n        \"type\":\"metric\",\n        \"id\":\"{{rd_metric2}}\",\n        \"name\":\"Revenue Forecast\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter on metric value greater than",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"create report instance\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"metricLimits\": {\n    \"{{rd_metric1}}\": {\n      \"operator\": \">\",\n      \"operands\": [\n        {\n          \"type\": \"metric\",\n          \"id\": \"{{rd_metric1}}\",\n          \"name\": \"Revenue\"\n        },\n        {\n          \"type\": \"constant\",\n          \"value\": \"50000\",\n          \"dataType\": \"Real\"\n        }\n      ]\n    },\n    \"{{rd_metric3}}\": {\n      \"operator\": \"|\",\n      \"operands\": [\n        {\n          \"operator\": \"<\",\n          \"operands\": [\n            {\n              \"type\": \"metric\",\n              \"id\": \"{{rd_metric3}}\",\n              \"name\": \"Profit Margin\"\n            },\n            {\n              \"type\": \"constant\",\n              \"value\": \"16.5\",\n              \"dataType\": \"Real\"\n            }\n          ]\n        },\n        {\n          \"operator\": \">\",\n          \"operands\": [\n            {\n              \"type\": \"metric\",\n              \"id\": \"{{rd_metric3}}\",\n              \"name\": \"Profit Margin\"\n            },\n            {\n              \"type\": \"constant\",\n              \"value\": \"19\",\n              \"dataType\": \"Real\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Browse folders/logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_metric1\");  ",
																	"    pm.environment.unset(\"rd_metric2\");  ",
																	"    pm.environment.unset(\"rd_metric3\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"",
															"//This is using report named \"Executive Business User Data\". ",
															"//This workflow shows metric filter on metric 1 > metric 2",
															"pm.environment.set(\"rd_reportId\",\"B7E14BD6439AC1F680AD298860D1F16D\");",
															"pm.environment.set(\"rd_metric1\",\"4C05177011D3E877C000B3B2D86C964F\"); // Revenue",
															"pm.environment.set(\"rd_metric2\",\"8D7D59C144AB891C57FEFA873ABE1C92\"); // Revenue_Forecase",
															"pm.environment.set(\"rd_metric3\", \"2680DF9E11D5C3FEC0000B881FDA1A4F\"); // Profit_Margin",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Filter Using requestedObjects",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get a report definition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"get report definition\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the definition of a specific report, including attributes and metrics. This in-memory report definition provides information about all available objects without actually running any data query/report. The results can be used by other requests to help filter large datasets and retrieve values dynamically, helping with performance and scalability. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the path of the request."
													},
													"response": []
												},
												{
													"name": "Get elements for a specific attribute in a specific report",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"get elements in report\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/attributes/:attributeId/elements?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"attributes",
																":attributeId",
																"elements"
															],
															"query": [
																{
																	"key": "baseFormIds",
																	"value": "",
																	"description": "Attribute Base Form IDs",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "searchPattern",
																	"value": "sed minim",
																	"description": "Search pattern",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "sed minim",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																},
																{
																	"key": "attributeId",
																	"value": "{{rd_attribute}}",
																	"description": "(Required) Attribute ID - From GET api/reports/:reportId"
																}
															]
														},
														"description": "Get a list of elements for a specific attribute in a specific report in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You pass the report ID, and the attribute ID in the path  of the request. You use the offset and limit query parameters to control paging behavior; the offset parameter specifies where to start returning results, and the limit parameter specifies how many results to return. You use the searchPattern query parameter to define a search pattern to apply, such as Begins With or Exactly. A list of Base Form IDs can be passed in as query parameter to specify what forms of elements be returned. If base form IDs not specified, all browse form values in the report are returned."
													},
													"response": []
												},
												{
													"name": "Create a report instance filter using requestedObjects",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"create report instance\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															},
															{
																"description": "(Required) Project ID",
																"key": "X-MSTR-ProjectID",
																"value": "{{projectId}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"requestedObjects\": {\n    \"attributes\": [\n      {\n        \"id\": \"{{rd_attribute}}\",\n        \"name\": \"Region\"\n      }\n    ],\n    \"metrics\": [\n      {\n        \"id\": \"{{rd_metric}}\",\n        \"name\": \"Revenue\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/reports/:reportId/instances?offset=0&limit=1000",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"reports",
																":reportId",
																"instances"
															],
															"query": [
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned results. Used to control paging behavior."
																},
																{
																	"key": "limit",
																	"value": "1000",
																	"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "{{rd_reportId}}"
																}
															]
														},
														"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"rd_reportId\");  ",
																	"    pm.environment.unset(\"rd_attribute\");  ",
																	"    pm.environment.unset(\"rd_metric\");  ",
																	"    pm.environment.unset(\"authToken\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"//Requirement: Need a report with Region Attribute to run the request in this folder",
															"pm.environment.set(\"rd_reportId\",\"272B08F440B0C2AB9764F7AAC7954ED8\"); //Customer Income Analysis by Geography",
															"pm.environment.set(\"rd_attribute\",\"8D679D4B11D3E4981000E787EC6DE8A4\"); //Region",
															"pm.environment.set(\"rd_metric\", \"4C05177011D3E877C000B3B2D86C964F\"); //Revenue"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"description": "When you create a MicroStrategy report or cube instance using the following REST API endpoints, you can use a parameter called viewFilter in the body parameter of the request to filter the data that is returned."
								}
							],
							"description": "You can filter data that is returned by the following REST API requests when you create an instance of a report or cube:\n\n*   POST /reports/{reportId}/instances\n    \n\nReports must have attributes on rows and metrics on columns. Otherwise, filtering is not applied.\n\n*   POST /cubes/{cubeId}/instances\n    \n\nYou can filter all types of cubes-normal cubes, DDA cubes, and MDX cubes."
						},
						{
							"name": "Apply Filter to Dossier",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_dossierId\",\"69F662EE11E9817800000080AFE34811\"); // Avg Delay (min) by Airline",
													"pm.environment.set(\"rd_attributeId\", \"3CE3EAD011EA0C901A090080EFB5072B\"); // Departure Airport",
													"pm.environment.set(\"rd_elementId\", \"hDCA;3CE3EAD011EA0C901A090080EFB5072B\"); //DCA"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get dossier definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:id/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":id",
												"definition"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create dossier instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create dossier instance\", function () {",
													"    pm.response.to.have.status(201);",
													"    instanceID = pm.response.json().mid;",
													"    pm.environment.set(\"rd_dossierInstanceId\", instanceID);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get attribute elements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get instance attribute elements\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:dossierInstanceId/elements?targetObjectId={{rd_attributeId}}&targetObjectType=attribute",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances",
												":dossierInstanceId",
												"elements"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "targetObjectId",
													"value": "{{rd_attributeId}}",
													"description": "(Required)"
												},
												{
													"key": "targetObjectType",
													"value": "attribute",
													"description": "(Required)"
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "dossierInstanceId",
													"value": "{{rd_dossierInstanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply new filter values",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Apply new filter values\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"key\": \"W83\",\n        \"name\": \"Departure Airport\",\n        \"selections\": [\n            {\n                \"id\": \"{{rd_elementId}}\"\n            }\n        ]\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:dossierInstanceId/filters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances",
												":dossierInstanceId",
												"filters"
											],
											"query": [
												{
													"key": "ignoreMissingFilter",
													"value": "",
													"description": "The ignoreMissingFilter controls the selector matches no found behavior, if true and no selector matches are found, then this filter input will NOT be applied and will be ignored, if false and no found, then the request will fail.\n\nDefault value : false",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "dossierInstanceId",
													"value": "{{rd_dossierInstanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier instance definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_dossierId\",\"69F662EE11E9817800000080AFE34811\"); // Avg Delay (min) by Airline",
													"pm.environment.set(\"rd_attributeId\", \"3CE3EAD011EA0C901A090080EFB5072B\"); // Departure Airport",
													"pm.environment.set(\"rd_elementId\", \"hDCA;3CE3EAD011EA0C901A090080EFB5072B\"); //DCA"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get dossier instance definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:id/instances/:instanceId/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":id",
												"instances",
												":instanceId",
												"definition"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_dossierInstanceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_dossierId\");  ",
													"    pm.environment.unset(\"rd_dossierInstanceId\");  ",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_elementId\");  ",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can use the following REST APIs to filter the data that is returned when you create or update an instance of a dossier, including clearing the filter selections.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Retrieve a Visualization in a Dossier's Filters",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get dossier definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    chapter = pm.response.json().chapters[0];",
													"    chapterKey = chapter.key;",
													"    filterKey = chapter.filters[0].key;",
													"    visKey = chapter.pages[0].visualizations[0].key;",
													"",
													"    pm.environment.set(\"rd_filterKey\",filterKey);",
													"    pm.environment.set(\"rd_chapterKey\",chapterKey);",
													"    pm.environment.set(\"rd_visualizationKey\",visKey);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"definition"
											],
											"query": [
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create dossier instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create dossier instance\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_dossierInstanceId\", pm.response.json().mid);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances"
											],
											"query": [
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get visualization's filter information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get visualization's filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/instances/:dossierInstanceId/chapters/:chapterKey/visualizations/:visualizationKey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":dossierId",
												"instances",
												":dossierInstanceId",
												"chapters",
												":chapterKey",
												"visualizations",
												":visualizationKey"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFromat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras' for a normal grid visualization, and '-data.metricValues.columnSets.raw' / '-data.metricValues.columnSets.formatted' / '-data.metricValues.columnSets.extras' for a compound grid visualization.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "dossierInstanceId",
													"value": "{{rd_dossierInstanceId}}"
												},
												{
													"key": "chapterKey",
													"value": "{{rd_chapterKey}}"
												},
												{
													"key": "visualizationKey",
													"value": "{{rd_visualizationKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_dossierId\");",
													"    pm.environment.unset(\"rd_dossierInstanceId\");",
													"    pm.environment.unset(\"rd_chapterKey\");",
													"    pm.environment.unset(\"rd_visualizationKey\");",
													"    ",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can use the following REST API endpoint to return information about the individual filters that have been applied to the dataset available to a visualization in a dossier, called the visualization-level dataset. The filtering information that is returned can be used by other REST API endpoints.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"rd_dossierId\",\"0D0CDC8F11E97E8F00000080AFB3A407\"); // Campaign Finance"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "You can use REST API requests to filter data that is returned and to retrieve information about filters that were applied."
				},
				{
					"name": "Prompted Reports",
					"item": [
						{
							"name": "Object Prompts",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create instance of report with object prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_reportId\", \"1A0E36AA42A062734A8CB2BE28EFB2C8\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Object Prompt/Create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of prompts in report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of prompts in report \", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptList\", pm.response.json())",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts"
											],
											"query": [
												{
													"key": "closed",
													"value": null,
													"description": "Prompt status, true means get closed prompt, false means get open prompt",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required) Report Instance ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available objects (prompt 1)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_promptId\", pm.environment.get(\"rd_promptList\")[0].id)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of available prompt objets (prompt 1)\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptObjects\", pm.response.json().objects )",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/:promptId/objects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												":promptId",
												"objects"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 200\n\nDefault value : 100",
													"disabled": true
												},
												{
													"key": "searchPattern",
													"value": null,
													"description": "Search pattern",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) The ID of the prompt object you want objects for. In this case, it is the first element of the \"rd_promptList\"(set in pre-request script)."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available objects (prompt 2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_prompt2Id\", pm.environment.get(\"rd_promptList\")[1].id)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of available prompt objects (prompt 2)\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_prompt2Objects\", pm.response.json().objects)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/:promptId/objects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												":promptId",
												"objects"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 200\n\nDefault value : 100",
													"disabled": true
												},
												{
													"key": "searchPattern",
													"value": null,
													"description": "Search pattern",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												},
												{
													"key": "promptId",
													"value": "{{rd_prompt2Id}}",
													"description": "(Required) The ID of the prompt object you want objects for. In this case, it is the first element of the \"rd_promptList\"(set in pre-request script)."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer prompts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"rd_promptObject1\", JSON.stringify(pm.environment.get(\"rd_promptObjects\")[0]))",
													"pm.variables.set(\"rd_prompt2Object1\", JSON.stringify(pm.environment.get(\"rd_prompt2Objects\")[0]))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Answer prompts\", function () {",
													"    pm.response.to.have.status(204);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"prompts\": [\n    {\n      \"id\": \"{{rd_promptId}}\",\n      \"type\": \"OBJECTS\",\n      \"answers\": [\n          {{rd_promptObject1}}\n      ]\n    },\n    {\n      \"id\": \"{{rd_prompt2Id}}\",\n      \"type\": \"OBJECTS\",\n      \"answers\": [\n          {{rd_prompt2Object1}}\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/answers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												"answers"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition after answering",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_reportInstanceId\")",
													"    pm.environment.unset(\"rd_promptList\")",
													"    pm.environment.unset(\"rd_promptId\")",
													"    pm.environment.unset(\"rd_prompt2Id\")",
													"    pm.environment.unset(\"rd_promptObjects\")",
													"    pm.environment.unset(\"rd_prompt2Objects\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to answer object prompts within a report."
						},
						{
							"name": "Attribute Element Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create instance of report with attribute element prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_reportId\", \"987CFFEF40B54B8530AC458531CDA765\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of prompts in report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of prompts in report \", function () {",
													"    pm.response.to.have.status(200);",
													"    const promptList = pm.response.json();",
													"    pm.environment.set(\"rd_promptId\", promptList[0].id)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts"
											],
											"query": [
												{
													"key": "closed",
													"value": null,
													"description": "Prompt status, true means get closed prompt, false means get open prompt\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required) Report Instance ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available elements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of available elements\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptElements\", pm.response.json().elements)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/:promptId/elements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												":promptId",
												"elements"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 200\n\nDefault value : 100",
													"disabled": true
												},
												{
													"key": "searchPattern",
													"value": null,
													"description": "Search pattern\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) The ID of the prompt object you want elements from."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer prompts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"allPromptElements\", JSON.stringify(pm.environment.get(\"rd_promptElements\")))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Answer prompts\", function () {",
													"    pm.response.to.have.status(204);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"prompts\": [\n    {\n      \"id\": \"{{rd_promptId}}\",\n      \"type\": \"ELEMENTS\",\n      \"answers\": {{allPromptElements}}\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/answers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												"answers"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition after answering",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_reportInstanceId\")",
													"    pm.environment.unset(\"rd_promptId\")",
													"    pm.environment.unset(\"rd_promptElements\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to answer attribute element prompts within a report."
						},
						{
							"name": "Attribute Qualification Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create instance of report with attribute qualification prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_reportId\", \"671B15174700EC469104ACB1C7F196AE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of prompts in report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of prompts in report \", function () {",
													"    pm.response.to.have.status(200);",
													"    const promptList = pm.response.json();",
													"    pm.environment.set(\"rd_promptId\", promptList[0].id)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts"
											],
											"query": [
												{
													"key": "closed",
													"value": null,
													"description": "Prompt status, true means get closed prompt, false means get open prompt\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required) Report Instance ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available objects",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of available objects\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptObjects\", pm.response.json().objects)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/:promptId/objects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												":promptId",
												"objects"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 200\n\nDefault value : 100",
													"disabled": true
												},
												{
													"key": "searchPattern",
													"value": null,
													"description": "Search pattern\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) The ID of the prompt object you want objects from."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get hierarchy definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"rd_hierarchyId\", \"13053CBE402A948E22DD9CB05648FBC8\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get user hierarchy definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/hierarchies/:hierarchyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"hierarchies",
												":hierarchyId"
											],
											"variable": [
												{
													"key": "hierarchyId",
													"value": "{{rd_hierarchyId}}",
													"description": "(Required) Hierarchy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get attribute elements",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const monthId = \"8D679D4411D3E4981000E787EC6DE8A4\"",
													"pm.variables.set(\"rd_attributeId\", monthId)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get attribute elements\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/attributes/:attributeId/elements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"attributes",
												":attributeId",
												"elements"
											],
											"query": [
												{
													"key": "instanceId",
													"value": null,
													"description": "Report instance ID",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Block to begin with. Default is 0, the first block.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Number of blocks to include (0-based). Default is 50 and -1 means to include all blocks\n\nDefault value : 50",
													"disabled": true
												},
												{
													"key": "searchTerm",
													"value": null,
													"description": "The search term from name of attribute element. For example, if this parameter is “Q3 year”, the search would return all results containing “Q3” or “year”. If it is empty, the search would return all elements of the attribute.\n\n",
													"disabled": true
												},
												{
													"key": "filterId",
													"value": null,
													"description": "the filter id used for browsing elements\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID. We set it in pre-request script."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer prompts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ans = {",
													"   \"content\":\"Month in [Jan-Mar] 2017\",",
													"   \"expression\":{",
													"      \"operator\":\"And\",",
													"      \"operands\":[",
													"         {",
													"            \"operator\":\"in\",",
													"            \"operands\":[",
													"               {",
													"                  \"type\":\"attribute\",",
													"                  \"id\":\"8D679D4411D3E4981000E787EC6DE8A4\",",
													"                  \"name\":\"Month\"",
													"               },",
													"               {",
													"                  \"type\":\"elements\",",
													"                  \"elements\":[",
													"                     {",
													"                        \"id\":\"8D679D4411D3E4981000E787EC6DE8A4:201701\"",
													"                     },",
													"                     {",
													"                        \"id\":\"8D679D4411D3E4981000E787EC6DE8A4:201702\"",
													"                     },",
													"                     {",
													"                        \"id\":\"8D679D4411D3E4981000E787EC6DE8A4:201703\"",
													"                     }",
													"                  ]",
													"               }",
													"            ]",
													"         }",
													"      ]",
													"   }",
													"}",
													"pm.variables.set(\"answer\", JSON.stringify(ans))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Answer prompts\", function () {",
													"    pm.response.to.have.status(204);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"prompts\": [\n    {\n      \"id\": \"{{rd_promptId}}\",\n      \"type\": \"EXPRESSION\",\n      \"answers\": {{answer}}\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/answers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												"answers"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition after answering",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_reportInstanceId\")",
													"    pm.environment.unset(\"rd_promptId\")",
													"    pm.environment.unset(\"rd_promptObjects\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to answer attribute qualification prompts within a report."
						},
						{
							"name": "Value Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create instance of report with value prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_reportId\", \"8F4C37FF40D632402F6F048817A8AEC9\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_reportInstanceId\", pm.response.json().instanceId);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of prompts in report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of prompts in report \", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptList\", pm.response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts"
											],
											"query": [
												{
													"key": "closed",
													"value": null,
													"description": "Prompt status, true means get closed prompt, false means get open prompt\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required) Report ID"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required) Report Instance ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Answer prompts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"rd_promptId\", pm.environment.get(\"rd_promptList\")[0].id)",
													"pm.environment.set(\"rd_prompt2Id\", pm.environment.get(\"rd_promptList\")[1].id)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Answer prompts\", function () {",
													"    pm.response.to.have.status(204);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"prompts\" : [\n        {\n            \"id\" : \"{{rd_promptId}}\",\n            \"type\" : \"VALUE\",\n            \"answers\" : \"Northeast\"\n        },\n        {\n            \"id\" : \"{{rd_prompt2Id}}\",\n            \"type\" : \"VALUE\",\n            \"answers\" : \"2015-01-01T04:00:00.000+0000\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId/instances/:instanceId/prompts/answers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"prompts",
												"answers"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition after answering",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}",
													"description": "(Required)"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_reportInstanceId\")",
													"    pm.environment.unset(\"rd_promptList\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to answer value prompts within a report."
						}
					],
					"description": "You can use REST APIs to answer prompts in several different ways. See: [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Prompts_AnsweringPrompts.htm](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Prompts_AnsweringPrompts.htm)"
				},
				{
					"name": "Export to PDF",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get quick search results in a list format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get quick search results\", function () {",
											"    pm.response.to.have.status(200);",
											"    const results = pm.response.json().result;",
											"    pm.environment.set(\"rd_documentId\", results[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/searches/results?name=Regional Sales Overview",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"searches",
										"results"
									],
									"query": [
										{
											"key": "name",
											"value": "Regional Sales Overview",
											"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
										},
										{
											"key": "pattern",
											"value": "2",
											"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\".",
											"disabled": true
										},
										{
											"key": "type",
											"value": "257",
											"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 257 is for custom groups object subtype.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100",
											"description": "Maximum number of items returned for a single request. Use -1 for no limit.",
											"disabled": true
										},
										{
											"key": "root",
											"value": "{{publicObjectsFolderId}}",
											"description": "Folder ID of the root folder where the search will be performed.",
											"disabled": true
										},
										{
											"key": "getAncestors",
											"value": "false",
											"description": "Specifies whether to return the list of ancestors for each object",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
											"disabled": true
										},
										{
											"key": "certifiedStatus",
											"value": "ALL",
											"description": "Defines a search criteria based on the certified status of the object",
											"disabled": true
										},
										{
											"key": "isCrossCluster",
											"value": "false",
											"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										},
										{
											"key": "viewMedia",
											"value": null,
											"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.\n\n",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": null,
											"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
											"disabled": true
										},
										{
											"key": "result.hidden",
											"value": null,
											"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.\n\n",
											"disabled": true
										}
									]
								},
								"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
							},
							"response": []
						},
						{
							"name": "Create document instance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create document instance\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"rd_documentInstanceId\", pm.response.json().mid);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"type": "text",
										"description": "(Required)"
									},
									{
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}",
										"type": "text",
										"description": "(Required)"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/documents/:documentId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents",
										":documentId",
										"instances"
									],
									"query": [
										{
											"key": "fields",
											"value": null,
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "documentId",
											"value": "{{rd_documentId}}",
											"description": "(Required)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export to PDF (base64)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Export to PDF - Check POSTMAN console for output\", function () {",
											"    pm.response.to.have.status(200);",
											"    let temp_string = pm.response.json().data;",
											"    console.info(\"To view the actual PDF, send the following base64 encoding as input to a base64-to-PDF program.\\nData:\\n\"+temp_string);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"type": "text",
										"description": "(Required)"
									},
									{
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}",
										"type": "text",
										"description": "(Required)"
									},
									{
										"key": "Prefer",
										"value": "",
										"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/documents/:documentId/instances/:instanceId/pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents",
										":documentId",
										"instances",
										":instanceId",
										"pdf"
									],
									"query": [
										{
											"key": "fields",
											"value": null,
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "documentId",
											"value": "{{rd_documentId}}",
											"description": "(Required)"
										},
										{
											"key": "instanceId",
											"value": "{{rd_documentInstanceId}}",
											"description": "(Required)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"authToken\");",
											"    pm.environment.unset(\"rd_documentId\");",
											"    pm.environment.unset(\"rd_documentInstanceId\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"type": "text",
										"description": "(Required)"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "This workflow demonstrates how to export a document to PDF. Documentation can be found on [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/topics/REST_API/REST_API_Workflow_ExportingToPDF.htm#Export_doc_to_PDF.)"
				},
				{
					"name": "Retrieve Data from the Intelligence Server",
					"item": [
						{
							"name": "Retrieve data from the intelligence server",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for reports",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Search for reports\", function () {",
													"    pm.response.to.have.status(200);",
													"    reportId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_reportId\", reportId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=768",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": null,
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": null,
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4\n\n",
													"disabled": true
												},
												{
													"key": "root",
													"value": null,
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "768",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": null,
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": null,
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": null,
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/reports/:reportId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"reports",
												":reportId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for dossiers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for dossiers\", function () {",
													"    pm.response.to.have.status(200);",
													"    dossierId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_dossierId\", dossierId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Graphs&type=55",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Graphs",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4\n\n",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "55",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "",
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "",
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    chapterId = pm.response.json().chapters[0].key;",
													"    visualizationId = pm.response.json().chapters[0].pages[0].visualizations[0].key;",
													"    pm.environment.set(\"rd_chapterId\", chapterId);",
													"    pm.environment.set(\"rd_visualizationId\", visualizationId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":dossierId",
												"definition"
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for cubes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for cubes\", function () {",
													"    pm.response.to.have.status(200);",
													"    cubeId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_cubeId\", cubeId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=776",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Graphs",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4\n\n",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "776",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "",
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "",
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get cube definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/cubes/:cubeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"cubes",
												":cubeId"
											],
											"variable": [
												{
													"key": "cubeId",
													"value": "{{rd_cubeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a report instance and get the results",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a cube instance and get the results",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/cubes/:cubeId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"cubes",
												":cubeId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras'.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "cubeId",
													"value": "{{rd_cubeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a dossier instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Create dissier instance\", function () {",
													"    pm.response.to.have.status(201);",
													"    dossierInstanceId = pm.response.json().mid;",
													"    pm.environment.set(\"rd_dossierInstanceId\", dossierInstanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode\n\n",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances"
											],
											"query": [
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get visualization data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve definitions from the intelligence server/Get report definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:instanceId/chapters/:chapterId/visualizations/:visualizationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances",
												":instanceId",
												"chapters",
												":chapterId",
												"visualizations",
												":visualizationId"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : 1000",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_dossierInstanceId}}"
												},
												{
													"key": "chapterId",
													"value": "{{rd_chapterId}}"
												},
												{
													"key": "visualizationId",
													"value": "{{rd_visualizationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"rd_dossierId\");",
													"    pm.environment.unset(\"rd_cubeId\");",
													"    pm.environment.unset(\"rd_dossierInstanceId\");",
													"    pm.environment.unset(\"rd_visualizationId\");",
													"    pm.environment.unset(\"rd_chapterId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve data from the Intelligence Server."
						}
					],
					"description": "You can use the Reports API, the Cubes API and the Dossiers API to retrieve definitions and data from the Intelligence Server."
				},
				{
					"name": "Retrieve SQL Statements and Query Details",
					"item": [
						{
							"name": "Retrieve SQL Statements of a Report Instance",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a report instance and get the results",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"    const instanceObj = pm.response.json();",
													"    reportInstanceId = instanceObj.instanceId;",
													"    pm.environment.set(\"rd_reportInstanceId\", reportInstanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/{{reportId}}/instances?offset=0&limit=1000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												"{{reportId}}",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Get the SQL statement of the report instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get sql view\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances/:instanceId/sqlView",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances",
												":instanceId",
												"sqlView"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{reportId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_reportInstanceId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_reportInstanceId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can retrieve a report or card instance’s SQL statement. In this workflow sample, a document with a report object is used. However, the same workflow applies to card objects."
						},
						{
							"name": "Retrieve SQL Statements of Datasets and Visualizations in Dossier",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an instance of a dossier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create dossier instance\", function () {",
													"    pm.response.to.have.status(201);",
													"    const instanceObj = pm.response.json();",
													"    dossierInstanceId = instanceObj.mid;",
													"    pm.environment.set(\"rd_dossierInstanceId\", dossierInstanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"key": "Prefer",
												"value": "sed minim",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}"
												}
											]
										},
										"description": "Execute a specific dossier and create an instance of the dossier. A dossier and a document have the same base object; a dossier is simply a different view of the document. The request returns the message ID of the dossier instance that was created.  You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request. The body parameter in the request contains linking and bookmark information for the dossier.You can apply filter criteria in the request body."
									},
									"response": []
								},
								{
									"name": "Get the SQL statements of datasets in document or dossier instances",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get sql statements of datasets\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:instanceId/datasets/sqlView",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances",
												":instanceId",
												"datasets",
												"sqlView"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_dossierInstanceId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Get the query details of visualizations in the dossier instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get sql statements of datasets\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances/:instanceId/queryDetails",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances",
												":instanceId",
												"queryDetails"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "visualizationKey",
													"value": "",
													"disabled": true
												},
												{
													"key": "chapterKey",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_dossierInstanceId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_dossierInstanceId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can retrieve the SQL statements of all datasets in a document or dossier instance. In this workflow sample, a dossier instance is used. However, the same workflow applies to a document instance."
						},
						{
							"name": "Retrieve the Query Details of a Grid or Graph in a Document Instance",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an instance of a document",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create document instance\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const instanceObj = pm.response.json();",
													"    documentInstanceId = instanceObj.mid;",
													"    pm.environment.set(\"rd_documentInstanceId\", documentInstanceId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"key": "Prefer",
												"value": "sed minim",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/:documentId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												":documentId",
												"instances"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "documentId",
													"value": "{{documentId}}"
												}
											]
										},
										"description": "Execute a specific dossier and create an instance of the dossier. A dossier and a document have the same base object; a dossier is simply a different view of the document. The request returns the message ID of the dossier instance that was created.  You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request. The body parameter in the request contains linking and bookmark information for the dossier.You can apply filter criteria in the request body."
									},
									"response": []
								},
								{
									"name": "Get the query details of visualizations in the document instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get sql statements of datasets\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/documents/:documentId/instances/:instanceId/queryDetails",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"documents",
												":documentId",
												"instances",
												":instanceId",
												"queryDetails"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "visualizationKey",
													"value": "",
													"disabled": true
												},
												{
													"key": "chapterKey",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "documentId",
													"value": "{{documentId}}"
												},
												{
													"key": "instanceId",
													"value": "{{rd_documentInstanceId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_documentInstanceId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the query details of grids and graphs in a document instance."
						}
					],
					"description": "You can use REST API requests to retrieve SQL statements and query details."
				},
				{
					"name": "Improve Performance by Working with Partial Resources",
					"item": [
						{
							"name": "Field Selection on a Root Object",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a specific project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Field Selection on a Root Object/Get a specific project for authenticated user\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:name?fields=id,name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":name"
											],
											"query": [
												{
													"key": "fields",
													"value": "id,name",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model."
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "MicroStrategy Tutorial",
													"description": "(Required) Project name"
												}
											]
										},
										"description": "Get a specific project that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of the specified project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specifiy the name of the project in the path of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to performed field selection on a root object."
						},
						{
							"name": "Field Selection on Root Array Elements",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get projects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Field Selection on Root Array Elements/Get projects for authenticated user\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects?fields=id,name,description",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											],
											"query": [
												{
													"key": "fields",
													"value": "id,name,description"
												}
											]
										},
										"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to performed field selection on a root array."
						},
						{
							"name": "Field Selection for Data API v2 Result-Fetching Endpoints",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Field Selection for Data API v2 Result-Fetching Endpoints/Get Quick Search results in a list format\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const searchObj = pm.response.json();",
													"    const rd_reportId = searchObj.result[0].id;",
													"    pm.environment.set(\"rd_reportId\", rd_reportId);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Executive Business User Data&pattern=2&limit=-1&certifiedStatus=ALL",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Executive Business User Data",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												},
												{
													"key": "root",
													"value": "sed minim",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object"
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a report instance with field selection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Field Selection for Data API v2 Result-Fetching Endpoints/Create a report instance with field selection\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000&fields=-data.metricValues.formatted,-data.metricValues.extras",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "Prefer",
													"value": null,
													"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601\n\n",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "-data.metricValues.formatted,-data.metricValues.extras",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_reportId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to performed field selection for DATA API v2 Result Fetching Endpoint."
						}
					],
					"description": "MicroStrategy supports top-level field selection on most endpoints.\n\n* For endpoints that return a JSON object, the client specifies which fields to include for the root object.\n* For endpoints that return a JSON array, the client specifies which fields to include for every element of the root array."
				},
				{
					"name": "Library",
					"item": [
						{
							"name": "Publish & Unpublish to User's Library",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of user groups to publish to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of user groups\", function () {",
													"    pm.response.to.have.status(200);",
													"    const groupList = pm.response.json();",
													"    pm.environment.set(\"rd_userGroupId\", groupList[0].id)",
													"    pm.environment.set(\"rd_userGroup2Id\", groupList[1].id)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups?offset=0&limit=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "",
													"description": "Characters that the name must begin with",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "3",
													"description": "Maximum number of items returned for a single search request. Used to control paging behavior. Use -1 for no limit (subject to Governing settings)."
												},
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Get information for a specific set of user groups or all user groups. You can refine the set of user groups that are returned with a query parameter that specifies the characters that the user group name must begin with; if you omit the nameBegins query parameter, all user groups are returned. You can limit the results that are returned with two query parameters. The offset parameter specifies the location in the list of users groups to begin returning results and the limit parameter specifies the maximum number of matching user groups that can be returned; if you set the limit parameter to -1, all results are returned (subject to Governing settings). The total count of results returned is included in the response header as \"x-mstr-total-count\". You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Search for a dossier to be published",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for dossier\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_dossierId\", pm.response.json().result[0].id)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=dossier&type=55",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "dossier",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).\n\n"
												},
												{
													"key": "pattern",
													"value": null,
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4",
													"disabled": true
												},
												{
													"key": "root",
													"value": null,
													"description": "Folder ID of the root folder where the search will be performed.\n\n",
													"disabled": true
												},
												{
													"key": "type",
													"value": "55",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter.\n\n"
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.\n\n",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": null,
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": null,
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": null,
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Publish a dossier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Publish a dossier\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{rd_dossierId}}\",\n    \"recipients\": [\n        {\n            \"id\": \"{{rd_userGroupId}}\"\n        },\n        {\n            \"id\": \"{{rd_userGroup2Id}}\"\n        }\n    ],\n    \"isInstance\": \"false\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/library",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library"
											]
										},
										"description": "Publish a document to users or user groups in a specific project. This makes the document available in the library of each user it is published to. You can publish a document or an instance of a document; you can publish a document to any user, but you can only publish an instance to the current user. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide information about the document to be published in the body parameter of the request; this includes the document or instance to be published and the users it will be published to."
									},
									"response": []
								},
								{
									"name": "Get info for a published dossier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for dossier\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												}
											]
										},
										"description": "Get information for a specific published document in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the ID of the document you want to get information about in the path of the request."
									},
									"response": []
								},
								{
									"name": "Un-publish the dossier from group 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unpublish the dossier from group 1\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id/recipients/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id",
												"recipients",
												":userId"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "userId",
													"value": "{{rd_userGroupId}}"
												}
											]
										},
										"description": "Un-publish a previously published document for a specific user. This makes the document no longer available in the user's library. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the ID of the document to be unpublished and the ID of the user whose library it should be removed from in the path of the request."
									},
									"response": []
								},
								{
									"name": "Un-publish the dossier from group 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unpublish the dossier from group 2\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id/recipients/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id",
												"recipients",
												":userId"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												},
												{
													"key": "userId",
													"value": "{{rd_userGroup2Id}}"
												}
											]
										},
										"description": "Un-publish a previously published document for a specific user. This makes the document no longer available in the user's library. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the ID of the document to be unpublished and the ID of the user whose library it should be removed from in the path of the request."
									},
									"response": []
								},
								{
									"name": "Get info for a published dossier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for dossier\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												}
											]
										},
										"description": "Get information for a specific published document in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the ID of the document you want to get information about in the path of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_dossierId\");",
													"    pm.environment.unset(\"rd_userGroupId\");",
													"    pm.environment.unset(\"rd_userGroup2Id\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Publish & Unpublish Dossier to Self",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get information for the current user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for current user\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_userId\", pm.response.json().id)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/sessions/userInfo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"sessions",
												"userInfo"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Get information for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. This request returns information about the authenticated user, locale, timeout duration, maximum number of concurrent searches, and limit on instances kept in memory."
									},
									"response": []
								},
								{
									"name": "Search for a dossier to be published",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for dossier\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_dossierId\", pm.response.json().result[0].id)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=dossier&type=55",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "dossier",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).\n\n"
												},
												{
													"key": "pattern",
													"value": null,
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in EnumDSSXMLSearchTypes.\n\nDefault value : 4",
													"disabled": true
												},
												{
													"key": "root",
													"value": null,
													"description": "Folder ID of the root folder where the search will be performed.\n\n",
													"disabled": true
												},
												{
													"key": "type",
													"value": "55",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in EnumDSSObjectType. To specify multiple types in API explorer, simply specify them with newline delimiter.\n\n"
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.\n\n",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.\n\n",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": null,
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": null,
													"description": "Defines a search criteria based on the certified status of the object\n\nAvailable values : ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF\n\nDefault value : ALL",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": null,
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Publish a dossier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Publish a dossier\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{rd_dossierId}}\",\n    \"recipients\": [\n        {\n            \"id\": \"{{rd_userId}}\"\n        }\n    ],\n    \"isInstance\": \"false\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/library",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library"
											]
										},
										"description": "Publish a document to users or user groups in a specific project. This makes the document available in the library of each user it is published to. You can publish a document or an instance of a document; you can publish a document to any user, but you can only publish an instance to the current user. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide information about the document to be published in the body parameter of the request; this includes the document or instance to be published and the users it will be published to."
									},
									"response": []
								},
								{
									"name": "Get info for a published dossier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for dossier\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}"
												}
											]
										},
										"description": "Get information for a specific published document in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the ID of the document you want to get information about in the path of the request."
									},
									"response": []
								},
								{
									"name": "Un-publish a dossier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unpublish dossier\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/library/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"library",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_dossierId}}",
													"description": "(Required) Document ID"
												}
											]
										},
										"description": "Un-publish a previously published document. This makes the document no longer available in the library of each user it was originally published to. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token and the project ID in the request header. You provide the ID of the document to be unpublished in the path of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_dossierId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Manage Dossiers",
					"item": [
						{
							"name": "Retrieve Dossier Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier definition",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":dossierId",
												"definition"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}",
													"description": "(Required) Dossier ID"
												}
											]
										},
										"description": "Get the hierarchy of a specific dossier including with crossTab in visualization in a specific project. A dossier and a document have the same base object; a dossier is simply a different view of the document. This request returns the tree structure of the dossier - root, chapters, current chapter, pages, in-canvas/chapter-level selectors,visualization as filter, dataset infos and visualizations. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request; you are using the document/dossier ID that was generated by another API."
									},
									"response": []
								},
								{
									"name": "Create dossier instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create dossier instance\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_dossierInstanceId\", pm.response.json().mid);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required)"
											},
											{
												"key": "Prefer",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dossiers",
												":dossierId",
												"instances"
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get dossier definition from dossier instance",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/dossiers/:dossierId/instances/:instanceId/definition",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"dossiers",
												":dossierId",
												"instances",
												":instanceId",
												"definition"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "dossierId",
													"value": "{{dossierId}}",
													"description": "(Required) Dossier ID"
												},
												{
													"key": "instanceId",
													"value": "{{rd_dossierInstanceId}}",
													"description": "(Required) Dossier instance ID"
												}
											]
										},
										"description": "Get the hierarchy of a specific dossier in a specific project from instance. This API is specifically work to get dossier definition for the prompts which has no default answers.This request returns the tree structure of the dossier - root chapters, current chapter, pages, in-canvas/chapter-level selectors,visualization as filter, dataset infos and visualizations, You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request; you can get the dossier instance id through API POST /dossiers/{id}/instances."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"rd_dossierInstanceId\");",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Modeling",
			"item": [
				{
					"name": "Common object management",
					"item": [
						{
							"name": "Manage Objects",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a test folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content of folder\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_folderId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Manage Objects Test Folder\",\n    \"description\": \"A test folder for the manage objects workflow\",\n    \"parent\": \"{{publicReportsFolderId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/folders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"folders"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get the contents of a specific folder in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You obtain the folder ID using GET /folders; you pass the folder ID in the request path. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return. "
									},
									"response": []
								},
								{
									"name": "Get a folder's ACL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get folder's ACL\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:id?type=8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":id"
											],
											"query": [
												{
													"key": "type",
													"value": "8",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html) 8 is for folder object type."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_folderId}}",
													"description": "(Required) Object ID"
												}
											]
										},
										"description": "Get information for a specific object in a specific project; if you do not specify a project ID, you get information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Update folder's ACL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update folder ACL\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Manage Object Test Folder Update\",\n    \"description\": \"\",\n    \"abbreviation\": \"\",\n    \"acl\": [\n        {\n        \"op\": \"ADD\",\n        \"trustee\": \"0AA72D6042B938FF3FBED3AAC39349F5\",\n        \"rights\": 199,\n        \"denied\": false,\n        \"inheritable\": true,\n        \"type\": 1\n        }\n    ],\n    \"propagateACLToChildren\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/objects/:folderId?type=8&flags=70",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":folderId"
											],
											"query": [
												{
													"key": "type",
													"value": "8",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)"
												},
												{
													"key": "flags",
													"value": "70",
													"description": "Object update flags, which corresponds to a value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html)"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "folderId",
													"value": "{{rd_folderId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Update information for a specific object in a specific project; if you do not specify a project ID, the object info is updated in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). You can refine how the information is updated using the 'flag' query parameter; you provide a bit-wise value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html). You provide the information to update the object in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Undo update to folder's ACL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Undo updates to folder's ACL\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Manage Object Test Folder\",\n    \"description\": \"\",\n    \"abbreviation\": \"\",\n    \"acl\": [\n        {\n        \"op\": \"Remove\",\n        \"trustee\": \"0AA72D6042B938FF3FBED3AAC39349F5\",\n        \"rights\": 199,\n        \"denied\": false,\n        \"inheritable\": true,\n        \"type\": 1\n        }\n    ],\n    \"propagateACLToChildren\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/objects/:folderId?type=8&flags=70",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":folderId"
											],
											"query": [
												{
													"key": "type",
													"value": "8",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)"
												},
												{
													"key": "flags",
													"value": "70",
													"description": "Object update flags, which corresponds to a value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html)"
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "folderId",
													"value": "{{rd_folderId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Update information for a specific object in a specific project; if you do not specify a project ID, the object info is updated in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). You can refine how the information is updated using the 'flag' query parameter; you provide a bit-wise value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html). You provide the information to update the object in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Delete new folder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete folder\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_folderId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_folderId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can manage an objects ACL through the REST API."
						},
						{
							"name": "Manage Object Translations",
							"item": [
								{
									"name": "Add, Update, and Remove Translations",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get list of translations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get list of translations\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_consolidationId\", \"3B0AF9764617B851727670B1A6C1C44E\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:type/:id/translations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":type",
														":id",
														"translations"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "type",
															"value": "consolidation",
															"description": "(Required) Object type, which corresponds to a value from EnumDSSXMLObjectTypes\n\nAvailable values : reserved, generic, unknown, filter, template, report_definition, metric, style, agg_metric, folder, subscription_device, device, prompt, function, attribute, fact, dimension, table, datamart_report, fact_group, type_shortcut, resolution, monitor, attribute_form, schema, format, catalog, catalog_definition, column, property_set, db_role, db_login, db_connection, project, server_def, user, transmitter, configuration, request, script, search, search_folder, datamart, function_package_definition, role, security_role, locale, consolidation, consolidation_element, schedule_event, schedule_object, schedule_trigger, link, db_table, table_source, document_definition, drill_map, type_dbms, md_security_filter, prompt_answer, prompt_answers, blob, object_tag, change_journal, external_shortcut, external_shortcut_target, reconciliation, layer, palette, thresholds, dossier_personal_view, feature_flag, command_manager_script, content_bundle, application, timezone, script_runtime_env, calendar, iam, reserved_last_one"
														},
														{
															"key": "id",
															"value": "{{rd_consolidationId}}",
															"description": "(Required) ID of the object that is the source of the recommendations"
														}
													]
												},
												"description": "Get translations for a specific object in a specific project. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Add a translation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Modify translations\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/localesAndTranslations/1:0:/translationValues\",\n      \"value\":  \n        {\n          \"1046\":\n            {\n                \"translation\": \"added translation\"\n            }\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/objects/:type/:id/translations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":type",
														":id",
														"translations"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "type",
															"value": "consolidation",
															"description": "(Required) Object type, which corresponds to a value from EnumDSSXMLObjectTypes\nAvailable values : reserved, generic, unknown, filter, template, report_definition, metric, style, agg_metric, folder, subscription_device, device, prompt, function, attribute, fact, dimension, table, datamart_report, fact_group, type_shortcut, resolution, monitor, attribute_form, schema, format, catalog, catalog_definition, column, property_set, db_role, db_login, db_connection, project, server_def, user, transmitter, configuration, request, script, search, search_folder, datamart, function_package_definition, role, security_role, locale, consolidation, consolidation_element, schedule_event, schedule_object, schedule_trigger, link, db_table, table_source, document_definition, drill_map, type_dbms, md_security_filter, prompt_answer, prompt_answers, blob, object_tag, change_journal, external_shortcut, external_shortcut_target, reconciliation, layer, palette, thresholds, dossier_personal_view, feature_flag, command_manager_script, content_bundle, application, timezone, script_runtime_env, calendar, iam, reserved_last_one"
														},
														{
															"key": "id",
															"value": "{{rd_consolidationId}}",
															"description": "(Required) ID of the object that is the source of the recommendations"
														}
													]
												},
												"description": "Update translations for a specific object in a specific project. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Update a translation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Modify translations\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/localesAndTranslations/1:0:/translationValues/1046/translation\",\n      \"value\": \"replaced translation\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/objects/:type/:id/translations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":type",
														":id",
														"translations"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "type",
															"value": "consolidation",
															"description": "(Required) Object type, which corresponds to a value from EnumDSSXMLObjectTypes\nAvailable values : reserved, generic, unknown, filter, template, report_definition, metric, style, agg_metric, folder, subscription_device, device, prompt, function, attribute, fact, dimension, table, datamart_report, fact_group, type_shortcut, resolution, monitor, attribute_form, schema, format, catalog, catalog_definition, column, property_set, db_role, db_login, db_connection, project, server_def, user, transmitter, configuration, request, script, search, search_folder, datamart, function_package_definition, role, security_role, locale, consolidation, consolidation_element, schedule_event, schedule_object, schedule_trigger, link, db_table, table_source, document_definition, drill_map, type_dbms, md_security_filter, prompt_answer, prompt_answers, blob, object_tag, change_journal, external_shortcut, external_shortcut_target, reconciliation, layer, palette, thresholds, dossier_personal_view, feature_flag, command_manager_script, content_bundle, application, timezone, script_runtime_env, calendar, iam, reserved_last_one"
														},
														{
															"key": "id",
															"value": "{{rd_consolidationId}}",
															"description": "(Required) ID of the object that is the source of the recommendations"
														}
													]
												},
												"description": "Update translations for a specific object in a specific project. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Remove a translation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Modify translations\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"remove\",\n      \"path\": \"/localesAndTranslations/1:0:/translationValues/1046\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/objects/:type/:id/translations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":type",
														":id",
														"translations"
													],
													"query": [
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "-1",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "type",
															"value": "consolidation",
															"description": "(Required) Object type, which corresponds to a value from EnumDSSXMLObjectTypes\nAvailable values : reserved, generic, unknown, filter, template, report_definition, metric, style, agg_metric, folder, subscription_device, device, prompt, function, attribute, fact, dimension, table, datamart_report, fact_group, type_shortcut, resolution, monitor, attribute_form, schema, format, catalog, catalog_definition, column, property_set, db_role, db_login, db_connection, project, server_def, user, transmitter, configuration, request, script, search, search_folder, datamart, function_package_definition, role, security_role, locale, consolidation, consolidation_element, schedule_event, schedule_object, schedule_trigger, link, db_table, table_source, document_definition, drill_map, type_dbms, md_security_filter, prompt_answer, prompt_answers, blob, object_tag, change_journal, external_shortcut, external_shortcut_target, reconciliation, layer, palette, thresholds, dossier_personal_view, feature_flag, command_manager_script, content_bundle, application, timezone, script_runtime_env, calendar, iam, reserved_last_one"
														},
														{
															"key": "id",
															"value": "{{rd_consolidationId}}",
															"description": "(Required) ID of the object that is the source of the recommendations"
														}
													]
												},
												"description": "Update translations for a specific object in a specific project. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_consolidationId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									],
									"description": "This workflow shows how to add, update, and remove translations from an object (in this example it's a consolidation object)."
								}
							]
						},
						{
							"name": "Manage the Schema",
							"item": [
								{
									"name": "Lock and Unlock the Schema",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read lock status of the schema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Read lock status\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/lock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"lock"
													]
												},
												"description": "The response returns the lock status of the schema.  \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\nIn the response, the \"lockType\" can be:  \n * \"absolute_individual\": Place using the POST schema lock API. When placed, no one, including the administrator, can perform changes on the schema objects. The purpose of this lock is to prevent accidental modifications to the schema in a project.\n * \"exclusive_constituent\": When the changeset is created with \"schemaEdit\" = `true`, an \"exclusive_constituent\" lock is placed on the schema. It is a lock exclusive to the changeset holding the lock; only that changeset can change the schema or its constituents (tables, attributes, etc.).\n * \"absolute_constituent: Not in use.\n"
											},
											"response": []
										},
										{
											"name": "Lock the schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Lock the schema\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lockType\": \"absolute_constituent\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/lock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"lock"
													]
												},
												"description": "Places a lock on the schema. \n\nIn the request body, \"lockType\" must be provided. \n* \"absolute_individual\": When placed, no one, including the administrator, can perform changes on the schema objects. The purpose of this lock is to prevent accidental modifications to the schema in a project.\n* \"exclusive_constituent\": Not used by this API. When the changeset is created with \"schemaEdit\" = `true`, an \"exclusive_constituent\" lock is placed on the schema. It is a lock exclusive to the changeset holding the lock; only that changeset can change the schema or its constituents (tables, attributes, etc.).\n* \"absolute_constituent: Not in use.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Unlock the schema",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unlock the schema\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/lock?lockType=absolute_constituent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"lock"
													],
													"query": [
														{
															"key": "lockType",
															"value": "absolute_constituent",
															"description": "Lock type:\n* \"absolute_individual\": When placed, no one, including the administrator, can perform changes on the schema objects. \n* \"exclusive_constituent\": When the changeset is created with \"schemaEdit\" = `true`, an \"exclusive_constituent\" lock is placed.  It is a lock exclusive to the changeset holding the lock; only that changeset can change the schema or its constituents (tables, attributes, etc.).\n* \"absolute_constituent: Not in use.\n"
														}
													]
												},
												"description": "Unlocks the schema. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to lock and unlock the schema."
								},
								{
									"name": "Reload the Schema Synchronously",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reload (update) the schema synchronously",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Reload the schema synchronously\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Set to `respond-async` to execute this API asynchronously. \n",
														"key": "Prefer",
														"value": "",
														"disabled": true
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"updateTypes\": [\n        \"entry_level\",\n        \"table_key\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/reload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"reload"
													]
												},
												"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to reload (update) the schema synchronously."
								},
								{
									"name": "Reload the Schema Aynchronously",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reload (update) the schema asynchronously",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Reload the schema asynchronously\", function () {",
															"    pm.response.to.have.status(202);",
															"",
															"    const task = pm.response.json();",
															"    pm.environment.set(\"rd_taskId\", task.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Set to `respond-async` to execute this API asynchronously. \n",
														"key": "Prefer",
														"value": "respond-async"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"updateTypes\": [\n        \"entry_level\",\n        \"table_key\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/reload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"reload"
													]
												},
												"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
											},
											"response": []
										},
										{
											"name": "Read the status of the task",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Read status of task\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization Token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/tasks/:taskId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"tasks",
														":taskId"
													],
													"variable": [
														{
															"key": "taskId",
															"value": "{{rd_taskId}}",
															"description": "(Required) Task ID"
														}
													]
												},
												"description": "Retrieves the status of the task. \n\nCurrently, only schema reload (asynchronous call) is supported. The task ID is returned from the schema reload asynchronous call. \n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_taskId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to reload (update) the schema asynchronously."
								}
							],
							"description": "You can use REST API requests to retrieve the schema lock, lock and unlock the schema, and reload (update) the schema."
						},
						{
							"name": "Manage object's ownership and ACL",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of available projects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for Objects/Get list of available projects\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[0].id;",
													"    pm.environment.set(\"rd_projectId\", projectId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for a set of users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for a set of users\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    const currentUserOwner =  response[0];",
													"    pm.environment.set(\"rd_userId\", currentUserOwner.id);",
													"    const newUserOwner = response[1];",
													"    pm.environment.set(\"rd_newOwnerUserId\", newUserOwner.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "",
													"description": "Characters that the user name must begin with.",
													"disabled": true
												},
												{
													"key": "abbreviationBegins",
													"value": "",
													"description": "Characters that the user abbreviation must begin with.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).",
													"disabled": true
												},
												{
													"key": "id",
													"value": "",
													"description": "List of User ids",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for a specific set of users. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the set of users to be returned with query parameters that specify the characters that the user name or abbreviation must begin with. You can use other query parameters to limit the results that are returned by specifying a starting point within the results and the maximum number of results that should be returned."
									},
									"response": []
								},
								{
									"name": "Search for objects owned by a specfic user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search objects owned by a specific user\", function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    const object = response.result[0];",
													"    pm.environment.set(\"rd_objectId\", object.id);",
													"    pm.environment.set(\"rd_objectType\", object.type)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?ownerId={{rd_userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Revenue",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html).",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "8",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "true",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "ownerId",
													"value": "{{rd_userId}}",
													"description": "ID of the user, who is the owner, ofthe objects that would be returned"
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Update info for a specific object",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"acl\": [\n    {\n      \"op\": \"add\",\n      \"trustee\": \"{{rd_newOwnerUserId}}\",\n      \"rights\": 255\n    },\n    {\n        \"op\": \"remove\",\n        \"trustee\": \"{{rd_userId}}\"\n    }\n  ],\n  \"ownerId\": \"{{rd_newOwnerUserId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/objects/:id?type={{rd_objectType}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":id"
											],
											"query": [
												{
													"key": "type",
													"value": "{{rd_objectType}}",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)"
												},
												{
													"key": "flags",
													"value": "70",
													"description": "Object update flags, which corresponds to a value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html)",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_objectId}}",
													"description": "(Required) Object ID"
												}
											]
										},
										"description": "Update information for a specific object in a specific project; if you do not specify a project ID, the object info is updated in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). You can refine how the information is updated using the 'flag' query parameter; you provide a bit-wise value from [EnumDSSXMLObjectFlags](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectFlags.html). You provide the information to update the object in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_securityRoleId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage Attribute Objects",
					"item": [
						{
							"name": "Retrieve an Attribute's Definiton",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_attributeId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Subcategory&pattern=2&type=12&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Subcategory",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "12",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 12 is for attribute object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Read an attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read an attribute\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes/:attributeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes",
												":attributeId"
											],
											"query": [
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the definition of an attribute through the Modeling service."
						},
						{
							"name": "Retrieve an Attribute's Definiton within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_attributeId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Subcategory&pattern=2&type=12&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Subcategory",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "12",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 12 is for attribute object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Read an attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read an attribute\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes/:attributeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes",
												":attributeId"
											],
											"query": [
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve an attribute's definition within a changeset."
						},
						{
							"name": "Create Attribute",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create attribute\", function () {",
													"    pm.response.to.have.status(201); ",
													"    const attribute = pm.response.json();",
													"    pm.environment.set(\"rd_attributeId\", attribute.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"attribute\",\n      \"name\":\"Subcategory\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"forms\":[\n      {\n         \"name\":\"ID\",\n         \"description\":\"Subcategory ID\",\n         \"category\":\"ID\",\n         \"displayFormat\":\"number\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_ID\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"76C6FEAB49D08F57BC6FC9B644743EEF\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"CITY_SUBCATEG_SLS\"\n                  },\n                  {\n                     \"objectId\":\"8D67937411D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_ITEM\"\n                  },\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_ID\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      },\n      {\n         \"name\":\"DESC\",\n         \"description\":\"Subcategory Name\",\n         \"category\":\"DESC\",\n         \"isMultilingual\":true,\n         \"displayFormat\":\"text\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_DESC\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_DESC\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      }\n   ],\n   \"attributeLookupTable\":{\n      \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n      \"subType\":\"logical_table\",\n      \"name\":\"LU_SUBCATEG\"\n   },\n   \"keyForm\":{\n      \"name\":\"ID\"\n   },\n   \"displays\":{\n      \"reportDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ],\n      \"browseDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ]\n   },\n \"sorts\": {\n    \"reportSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ],\n    \"browseSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											]
										},
										"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.\n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms.  \nEach attribute form contains:\n\n- \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".\n    - ”expression”: Needs to be in either \"tree\" or \"tokens\" format.\n        - Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n    - \"tables\": A list of tables that the \"expression\" applies to. Warehouse partition base tables and metadata partition mapping tables are not allowed here.\n- \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression.\n- \"childForms\" is specific to a form group, which contains the reference for child forms\n    \n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\". Warehouse partition base tables and metadata partition mapping tables are not allowed to use in the lookup table.\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\",\n    \"clear_element_cache\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete created attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete attribute\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "12",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 12 is for attribute object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create an attribute object through the Modeling service."
						},
						{
							"name": "Update Attribute",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create attribute\", function () {",
													"    pm.response.to.have.status(201); ",
													"    const attribute = pm.response.json();",
													"    pm.environment.set(\"rd_attributeId\", attribute.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"attribute\",\n      \"name\":\"Subcategory\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"forms\":[\n      {\n         \"name\":\"ID\",\n         \"description\":\"Subcategory ID\",\n         \"category\":\"ID\",\n         \"displayFormat\":\"number\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_ID\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"76C6FEAB49D08F57BC6FC9B644743EEF\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"CITY_SUBCATEG_SLS\"\n                  },\n                  {\n                     \"objectId\":\"8D67937411D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_ITEM\"\n                  },\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_ID\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      },\n      {\n         \"name\":\"DESC\",\n         \"description\":\"Subcategory Name\",\n         \"category\":\"DESC\",\n         \"isMultilingual\":true,\n         \"displayFormat\":\"text\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_DESC\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_DESC\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      }\n   ],\n   \"attributeLookupTable\":{\n      \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n      \"subType\":\"logical_table\",\n      \"name\":\"LU_SUBCATEG\"\n   },\n   \"keyForm\":{\n      \"name\":\"ID\"\n   },\n   \"displays\":{\n      \"reportDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ],\n      \"browseDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ]\n   },\n \"sorts\": {\n    \"reportSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ],\n    \"browseSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											]
										},
										"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.\n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms.  \nEach attribute form contains:\n\n- \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".\n    - ”expression”: Needs to be in either \"tree\" or \"tokens\" format.\n        - Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n    - \"tables\": A list of tables that the \"expression\" applies to. Warehouse partition base tables and metadata partition mapping tables are not allowed here.\n- \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression.\n- \"childForms\" is specific to a form group, which contains the reference for child forms\n    \n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\". Warehouse partition base tables and metadata partition mapping tables are not allowed to use in the lookup table.\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Update an attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update an attribute\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"attribute\",\n      \"name\":\"Subcategory Modified\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"forms\":[\n      {\n         \"name\":\"ID\",\n         \"description\":\"Subcategory ID\",\n         \"category\":\"ID\",\n         \"displayFormat\":\"number\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_ID\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"76C6FEAB49D08F57BC6FC9B644743EEF\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"CITY_SUBCATEG_SLS\"\n                  },\n                  {\n                     \"objectId\":\"8D67937411D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_ITEM\"\n                  },\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_ID\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      },\n      {\n         \"name\":\"DESC\",\n         \"description\":\"Subcategory Name\",\n         \"category\":\"DESC\",\n         \"isMultilingual\":true,\n         \"displayFormat\":\"text\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_DESC\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_DESC\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      }\n   ],\n   \"attributeLookupTable\":{\n      \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n      \"subType\":\"logical_table\",\n      \"name\":\"LU_SUBCATEG\"\n   },\n   \"keyForm\":{\n      \"name\":\"ID\"\n   },\n   \"displays\":{\n      \"reportDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ],\n      \"browseDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ]\n   },\n \"sorts\": {\n    \"reportSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ],\n    \"browseSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes/:attributeId?showExpressionAs=tree&removeInvalidFields=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes",
												":attributeId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "removeInvalidFields",
													"value": "true",
													"description": "This parameter specifies whether to check and remove the invalid fields caused by changes related to key form within the request. \n\nChanges related to key form could introduce invalid expressions for non-key forms as expression's table is empty, and/or invalid relationship as the relationship table is null. \n\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\n\nIf `true`, if the key form changes in the request introduce invalid expressions and/or relationships, \nthe invalid expressions and/or relationships are removed from the attribute and/or the system hierarchy.\n\nIf `false` or omitted, it errors out if the key form changes in the request introduce invalid expressions and/or relationships.\n"
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "Updates a specific attribute in the changeset.  \nThis request replaces the attribute's top-level fields with the new definition provided in the request body.\n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms.  \nEach attribute form contains:\n\n- \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".\n    - ”expression”: Needs to be in either \"tree\" or \"tokens\" format.\n        - Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n    - \"tables\": A list of tables that the \"expression\" applies to. Warehouse partition base tables and metadata partition mapping tables are not allowed here.\n- \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression.\n- \"childForms\" is specific to a form group, which contains the reference for child forms\n    \n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\". Warehouse partition base tables and metadata partition mapping tables are not allowed to use in the lookup table.\n\nProvide \"keyForm\" and \"displays\", as they are required for the object to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly updated attribute to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"updateTypes\": [\n        \"table_key\",\n        \"entry_level\",\n        \"logical_size\",\n        \"clear_element_cache\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete created attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete attribute\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "12",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 12 is for attribute object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to update an attribute's definition through the Modeling service."
						},
						{
							"name": "Get Attribute's applicable advanced properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\": 1,\n    \"maxSearch\": 3,\n    \"workingSet\": 10,\n    \"changePassword\": false,\n    \"newPassword\": \"string\",\n    \"metadataLocale\": \"en_us\",\n    \"warehouseDataLocale\": \"en_us\",\n    \"displayLocale\": \"en_us\",\n    \"messagesLocale\": \"en_us\",\n    \"numberLocale\": \"en_us\",\n    \"timeZone\": \"UTC\",\n    \"applicationId\": \"C2B2023642F6753A2EF159A75E0CFF29\",\n    \"applicationType\": 35\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Attributes's applicable advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read project's applicable advanced properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes/:attributeId/applicableAdvancedProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes",
												":attributeId",
												"applicableAdvancedProperties"
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{attributeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Attribute's definition and advanced properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\": 1,\n    \"maxSearch\": 3,\n    \"workingSet\": 10,\n    \"changePassword\": false,\n    \"newPassword\": \"string\",\n    \"metadataLocale\": \"en_us\",\n    \"warehouseDataLocale\": \"en_us\",\n    \"displayLocale\": \"en_us\",\n    \"messagesLocale\": \"en_us\",\n    \"numberLocale\": \"en_us\",\n    \"timeZone\": \"UTC\",\n    \"applicationId\": \"C2B2023642F6753A2EF159A75E0CFF29\",\n    \"applicationType\": 35\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read attrribute's definition with advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read a project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes/:attributeId?showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes",
												":attributeId"
											],
											"query": [
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Show advanced properties of a project"
												}
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{attributeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Attribute's advanced properties",
							"item": [
								{
									"name": "Update property value on object level",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\": 1,\n    \"maxSearch\": 3,\n    \"workingSet\": 10,\n    \"changePassword\": false,\n    \"newPassword\": \"string\",\n    \"metadataLocale\": \"en_us\",\n    \"warehouseDataLocale\": \"en_us\",\n    \"displayLocale\": \"en_us\",\n    \"messagesLocale\": \"en_us\",\n    \"numberLocale\": \"en_us\",\n    \"timeZone\": \"UTC\",\n    \"applicationId\": \"C2B2023642F6753A2EF159A75E0CFF29\",\n    \"applicationType\": 35\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a changeset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets"
													],
													"query": [
														{
															"key": "schemaEdit",
															"value": "true",
															"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update property value on object level",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update project's advanced properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Required) Changeset ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[VLDB Select].[Do Case Insensitive Comparison for Strings in Filters]\": {\n                \"value\": 1\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/attributes/:attributeId?showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"attributes",
														":attributeId"
													],
													"query": [
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "(Optional) Specify whether to retrieve the values of the advanced properties.\n\nThe advanced properties are presented in the following groups:\n\n\"vldbProperties\": A list of properties as determined by the common infrastructure.\nIf omitted or false the API will return information field only.\n\nIf true, all applicable advanced properties are returned.\n\n"
														}
													],
													"variable": [
														{
															"key": "attributeId",
															"value": "{{attributeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Commit the changeset changes to the metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Commit changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId",
														"commit"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Reload (update) the schema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Reload schema\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Set to `respond-async` to execute this API asynchronously. \n",
														"disabled": true
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"updateTypes\": [\n        \"table_key\",\n        \"entry_level\",\n        \"logical_size\",\n        \"clear_element_cache\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/reload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"reload"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the changeset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the changeset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_attributeId\");",
															"    pm.environment.unset(\"rd_changesetId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update property value with null (set value back to default)",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\": 1,\n    \"maxSearch\": 3,\n    \"workingSet\": 10,\n    \"changePassword\": false,\n    \"newPassword\": \"string\",\n    \"metadataLocale\": \"en_us\",\n    \"warehouseDataLocale\": \"en_us\",\n    \"displayLocale\": \"en_us\",\n    \"messagesLocale\": \"en_us\",\n    \"numberLocale\": \"en_us\",\n    \"timeZone\": \"UTC\",\n    \"applicationId\": \"C2B2023642F6753A2EF159A75E0CFF29\",\n    \"applicationType\": 35\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a changeset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets"
													],
													"query": [
														{
															"key": "schemaEdit",
															"value": "true",
															"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update property value with null (set value back to default)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update project's advanced properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Required) Changeset ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[VLDB Select].[Do Case Insensitive Comparison for Strings in Filters]\": {\n                \"value\": null\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/attributes/:attributeId?showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"attributes",
														":attributeId"
													],
													"query": [
														{
															"key": "showAdvancedProperties",
															"value": "true",
															"description": "(Optional) Specify whether to retrieve the values of the advanced properties.\n\nThe advanced properties are presented in the following groups:\n\n\"vldbProperties\": A list of properties as determined by the common infrastructure.\nIf omitted or false the API will return information field only.\n\nIf true, all applicable advanced properties are returned.\n\n"
														}
													],
													"variable": [
														{
															"key": "attributeId",
															"value": "{{attributeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Commit the changeset changes to the metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Commit changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId",
														"commit"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Reload (update) the schema",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Reload schema\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "Prefer",
														"value": "",
														"description": "Set to `respond-async` to execute this API asynchronously. \n",
														"disabled": true
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"updateTypes\": [\n        \"table_key\",\n        \"entry_level\",\n        \"logical_size\",\n        \"clear_element_cache\"\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/schema/reload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"schema",
														"reload"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the changeset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the changeset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_attributeId\");",
															"    pm.environment.unset(\"rd_changesetId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"description": "You can use REST API requests to retrieve, create and update attribute objects through the Modeling service."
				},
				{
					"name": "Manage Attribute Relationships",
					"item": [
						{
							"name": "Retrieve an Attribute's Relationships",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_attributeId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Region&pattern=2&type=12&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Region",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "12",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 12 is for attribute object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Read an attribute's relationships",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read an attribute's relationships\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/systemHierarchy/attributes/:attributeId/relationships",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"systemHierarchy",
												"attributes",
												":attributeId",
												"relationships"
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the relationships related to an attribute through the Modeling service."
						},
						{
							"name": "Retrieve an Attribute's Relationships within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_attributeId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Month&pattern=2&type=12&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Month",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "12",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 12 is for attribute object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Read an attribute's relationships",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read an attribute's relationships\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/systemHierarchy/attributes/:attributeId/relationships",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"systemHierarchy",
												"attributes",
												":attributeId",
												"relationships"
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the relationships related to an attribute with a changeset through the Modeling service."
						},
						{
							"name": "Update an Attribute's Relationships",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create attribute\", function () {",
													"    pm.response.to.have.status(201); ",
													"    const attribute = pm.response.json();",
													"    pm.environment.set(\"rd_attributeId\", attribute.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"attribute\",\n      \"name\":\"Subcategory_Test\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"forms\":[\n      {\n         \"name\":\"ID\",\n         \"description\":\"Subcategory ID\",\n         \"category\":\"ID\",\n         \"displayFormat\":\"number\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_ID\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                            \"objectId\": \"76C6FEAB49D08F57BC6FC9B644743EEF\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"CITY_SUBCATEG_SLS\"\n                        },\n                        {\n                            \"objectId\": \"EF5FEFD9469F9F08818B69B995223EC2\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"F_TUTORIAL_TARGETS\"\n                        },\n                        {\n                            \"objectId\": \"8D67937411D3E4981000E787EC6DE8A4\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"LU_ITEM\"\n                        },\n                        {\n                            \"objectId\": \"8D6793B611D3E4981000E787EC6DE8A4\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"LU_SUBCATEG\"\n                        },\n                        {\n                            \"objectId\": \"167D1CEF4D7151F8BFB13193AAB9B40B\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"STATE_SUBCATEG_MNTH_SLS\"\n                        },\n                        {\n                            \"objectId\": \"B3B4B2764639C506BF07C8B1DA826CDA\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"STATE_SUBCATEG_REGION_SLS\"\n                        },\n                        {\n                            \"objectId\": \"1C4BF0AE452247D0649F63B845862B19\",\n                            \"subType\": \"logical_table\",\n                            \"name\": \"SUBCATEG_MNTH_CTR_SLS\"\n                        }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_ID\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      },\n      {\n         \"name\":\"DESC\",\n         \"description\":\"Subcategory Name\",\n         \"category\":\"DESC\",\n         \"isMultilingual\":true,\n         \"displayFormat\":\"text\",\n         \"expressions\":[\n            {\n               \"expression\":{\n                  \"tokens\":[\n                     {\n                        \"value\":\"SUBCAT_DESC\"\n                     }\n                  ]\n               },\n               \"tables\":[\n                  {\n                     \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n                     \"subType\":\"logical_table\",\n                     \"name\":\"LU_SUBCATEG\"\n                  }\n               ]\n            }\n         ],\n         \"alias\":\"SUBCAT_DESC\",\n         \"lookupTable\":{\n            \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n            \"subType\":\"logical_table\",\n            \"name\":\"LU_SUBCATEG\"\n         }\n      }\n   ],\n   \"attributeLookupTable\":{\n      \"objectId\":\"8D6793B611D3E4981000E787EC6DE8A4\",\n      \"subType\":\"logical_table\",\n      \"name\":\"LU_SUBCATEG\"\n   },\n   \"keyForm\":{\n      \"name\":\"ID\"\n   },\n   \"displays\":{\n      \"reportDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ],\n      \"browseDisplays\":[\n         {\n            \"name\":\"DESC\"\n         }\n      ]\n   },\n \"sorts\": {\n    \"reportSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ],\n    \"browseSorts\": [\n      {\n        \"form\": {\n          \"name\": \"DESC\"\n        },\n        \"ascending\": true\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/attributes?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"attributes"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											]
										},
										"description": "Create a new attribute in the changeset, based on the definition provided in request body. The definition of the newly created attribute is returned in response.  \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the attribute to be committed to the metadata.\n\nProvide \"destinationFolderId\" in \"information\", as it is required for the attribute to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created attribute to the metadata, commit using the changeset commit API.     \n"
									},
									"response": []
								},
								{
									"name": "Update relationship(s) of an attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update attribute relationships\", function () {",
													"    pm.response.to.have.status(200); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"relationships\": [\n    {\n      \"parent\": {\n        \"objectId\": \"{{rd_attributeId}}\",\n        \"subType\": \"attribute\",\n        \"name\": \"Subcategory_Test\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4211D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Item\"\n      },\n      \"relationshipTable\": {\n        \"objectId\": \"8D67937411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"logical_table\",\n        \"name\": \"LU_ITEM\"\n      },\n      \"relationshipType\": \"one_to_many\"\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D3711D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Category\"\n      },\n      \"child\": {\n        \"objectId\": \"{{rd_attributeId}}\",\n        \"subType\": \"attribute\",\n        \"name\": \"Subcategory_Test\"\n      },\n      \"relationshipTable\": {\n        \"objectId\": \"8D6793B611D3E4981000E787EC6DE8A4\",\n        \"subType\": \"logical_table\",\n        \"name\": \"LU_SUBCATEG\"\n      },\n      \"relationshipType\": \"one_to_many\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/systemHierarchy/attributes/:attributeId/relationships",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"systemHierarchy",
												"attributes",
												":attributeId",
												"relationships"
											],
											"variable": [
												{
													"key": "attributeId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "Update a specific attribute's relationship(s) in the changeset, based on the definition provided in the request body. It returns the attribute's updated relationship(s) in the changeset.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\",\n    \"clear_element_cache\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete created attribute",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete attribute\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "12",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 12 is for attribute object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_attributeId}}",
													"description": "(Required) Attribute ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_attributeId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to update an attribute's relationships through the Modeling service."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update an attribute's relationship through the Modeling service."
				},
				{
					"name": "Manage Base Formula Objects",
					"item": [
						{
							"name": "Retrieve a Base Formula's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_baseFormulaId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=1792&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1792",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get base formula definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get base formula definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/formulas/:formulaIdId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"formulas",
												":formulaIdId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											],
											"variable": [
												{
													"key": "formulaIdId",
													"value": "{{rd_baseFormulaId}}",
													"description": "Base Formula ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_baseFormulaId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a Base Formula's definition."
						},
						{
							"name": "Create, Update, and Delete a Base Formula",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a base formula",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create base formula\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_baseFormulaId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"agg_metric\",\n      \"name\":\"test_sample_formula\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"sum([Item inventory])\"\n               }\n            ]\n   }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/formulas?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"formulas"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a base formula",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a base formula\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n    \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"avg([Item inventory])\"\n               }\n            ]\n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/formulas/:formulaId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"formulas",
												":formulaId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "formulaId",
													"value": "{{rd_baseFormulaId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get base formula definition from changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get base formula definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/formulas/:formulaIdId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"formulas",
												":formulaIdId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											],
											"variable": [
												{
													"key": "formulaIdId",
													"value": "{{rd_baseFormulaId}}",
													"description": "Base Formula ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the base formula",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the base formula\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "7",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_baseFormulaId}}",
													"description": "(Required) Base Formula ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_baseFormulaId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a base formula object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and delete base formula metric objects through the Modeling service."
				},
				{
					"name": "Manage Calendar Objects",
					"item": [
						{
							"name": "Create, Update, and Delete a Calendar Object",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a configuration changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new custom calendar object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a custom calendar\", function () {",
													"    pm.response.to.have.status(201);",
													"    const calendarId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_calendarId\", calendarId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"new custom calendar\"\n    },\n    \"baseCalendar\":{\n        \"objectId\": \"1414DF67F20B4E4F910E418C8DCE7274\"\n    },\n    \"tablePrefix\": \"MSTR_\",\n   \"calendarBegin\": {\n        \"dynamicYearOffset\": -5\n    },\n    \"calendarEnd\": {\n        \"staticYear\": \"2022\"\n    },\n    \"weekStartDay\": \"Sunday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/calendars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"calendars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of avaliable calendar objects within changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of calendars\", function () {",
													"    pm.response.to.have.status(200);",
													"    calendar = pm.response.json().calendars[0].information;",
													"    calendarId = calendar.objectId;",
													"    pm.environment.set(\"rd_calendarId\", calendarId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/calendars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"calendars"
											],
											"query": [
												{
													"key": "information.subType",
													"value": "",
													"description": "Specify which type of calendar shoud be returned. If not provided, all system and custom calendars will re returned.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"description": "Starting point within the collection of returned results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 200",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied. For example, \"information,baseCalendar\" keeps only the \"information\" field and \"baseCalendar\" field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a custom calendar's definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update custom calendar definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"update the custom calendar\"\n    },\n    \"baseCalendar\":{\n        \"objectId\": \"1414DF67F20B4E4F910E418C8DCE7274\"\n    },\n    \"tablePrefix\": \"MSTR_\",\n   \"calendarBegin\": {\n        \"dynamicYearOffset\": -5\n    },\n    \"calendarEnd\": {\n        \"staticYear\": \"2026\"\n    },\n    \"weekStartDay\": \"Sunday\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/calendars/:calendarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"calendars",
												":calendarId"
											],
											"variable": [
												{
													"key": "calendarId",
													"value": "{{rd_calendarId}}",
													"description": "(Required) Calendar ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a calendar's definition without changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get a calendar's definition\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/calendars/:calendarId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"calendars",
												":calendarId"
											],
											"variable": [
												{
													"key": "calendarId",
													"value": "{{rd_calendarId}}",
													"description": "(Required) Calendar ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the custom calendar object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the calendar\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=81",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "81",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 81 is for calendar object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_calendarId}}",
													"description": "(Required) Calendar ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_calendarId\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "You can use REST API requests to create, update, retrieve, and delete calendar objects through the Modeling service."
						}
					]
				},
				{
					"name": "Manage Consolidation Objects",
					"item": [
						{
							"name": "Retrieve a Consolidation's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_consolidationId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=47&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Region",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\".",
													"disabled": true
												},
												{
													"key": "type",
													"value": "47",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 12 is for attribute object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get consolidation object definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a Consolidation's Definition/Get Consolidation\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{X-MSTR-AuthToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/consolidations/:consolidationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"consolidations",
												":consolidationId"
											],
											"variable": [
												{
													"key": "consolidationId",
													"value": "{{rd_consolidationId}}",
													"description": "(Required) Consolidation ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_consolidationId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the consolidation through the Modeling service."
						},
						{
							"name": "Create and Update a Consolidation",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a consolidation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create consolidation\", function() {",
													"    pm.response.to.have.status(201);",
													"    const consolidation = pm.response.json();",
													"    pm.environment.set(\"rd_consolidationId\", consolidation.information.objectId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n        \"name\": \"Create Consolidation\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"element_a\",\n            \"type\": \"calculation\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"expression\": {\n                \"tree\": {\n                    \"function\": \"plus\",\n                    \"children\": [\n                        {\n                            \"type\": \"elements_object\",\n                            \"elements\": [\n                                {\n                                    \"display\": \"20\",\n                                    \"elementId\": \"h20\",\n                                    \"attribute\": {\n                                        \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer Age\"\n                                    }\n                                },\n                                {\n                                    \"display\": \"Aaby:Alen\",\n                                    \"elementId\": \"h7796\",\n                                    \"attribute\": {\n                                        \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer\"\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            \"type\": \"elements_object\",\n                            \"elements\": [\n                                {\n                                    \"display\": \"Addison\",\n                                    \"elementId\": \"h1\",\n                                    \"attribute\": {\n                                        \"objectId\": \"8D679D3A11D3E4981000E787EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer City\"\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        },\n        {\n            \"name\": \"element_b\",\n            \"type\": \"calculation\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"expression\": {\n                \"tree\": {\n                    \"function\": \"plus\",\n                    \"children\": [\n                        {\n                            \"type\": \"object_reference\",\n                            \"target\": {\n                                \"name\": \"element_a\"\n                            },\n                            \"isIndependent\": 0\n                        },\n                        {\n                            \"type\": \"constant\",\n                            \"variant\": {\n                                \"type\": \"double\",\n                                \"value\": \"1.0\"\n                            }\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        }\n    ],\n    \"subtotal\": \"disable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/consolidations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"consolidations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a consolidation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update consolidation\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n        \"name\": \"Create Consolidation(Updated)\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"element_a\",\n            \"type\": \"calculation\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"expression\": {\n                \"tree\": {\n                    \"function\": \"plus\",\n                    \"children\": [\n                        {\n                            \"type\": \"elements_object\",\n                            \"elements\": [\n                                {\n                                    \"display\": \"20\",\n                                    \"elementId\": \"h20\",\n                                    \"attribute\": {\n                                        \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer Age\"\n                                    }\n                                },\n                                {\n                                    \"display\": \"Aaby:Alen\",\n                                    \"elementId\": \"h7796\",\n                                    \"attribute\": {\n                                        \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer\"\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            \"type\": \"elements_object\",\n                            \"elements\": [\n                                {\n                                    \"display\": \"Addison\",\n                                    \"elementId\": \"h1\",\n                                    \"attribute\": {\n                                        \"objectId\": \"8D679D3A11D3E4981000E787EC6DE8A4\",\n                                        \"subType\": \"attribute\",\n                                        \"name\": \"Customer City\"\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        },\n        {\n            \"name\": \"element_b\",\n            \"type\": \"calculation\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"expression\": {\n                \"tree\": {\n                    \"function\": \"plus\",\n                    \"children\": [\n                        {\n                            \"type\": \"object_reference\",\n                            \"target\": {\n                                \"name\": \"element_a\"\n                            },\n                            \"isIndependent\": 0\n                        },\n                        {\n                            \"type\": \"constant\",\n                            \"variant\": {\n                                \"type\": \"double\",\n                                \"value\": \"1.0\"\n                            }\n                        }\n                    ],\n                    \"type\": \"operator\"\n                }\n            }\n        }\n    ],\n    \"subtotal\": \"disable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/consolidations/:consolidationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"consolidations",
												":consolidationId"
											],
											"variable": [
												{
													"key": "consolidationId",
													"value": "{{rd_consolidationId}}",
													"description": "(Required) Consolidation ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the consolidation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the consolidation\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=47",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "47",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 47 is for consolidation type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_consolidationId}}",
													"description": "(Required) Consolidation ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_consolidationId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve and update a consolidation object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and replace consolidation objects through the Modeling service."
				},
				{
					"name": "Manage Custom Group Objects",
					"item": [
						{
							"name": "Retrieve a Custom Group's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_customGroupId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=257&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Age Groups",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\".",
													"disabled": true
												},
												{
													"key": "type",
													"value": "257",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 257 is for custom groups object subtype."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get custom group definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get custom group definition\", function() {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups/:customGroupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups",
												":customGroupId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "customGroupId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the consolidation through the Modeling service."
						},
						{
							"name": "Create a Custom Group with Attribute Qualification",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Age Groups\",\n    \"description\": \"Custom group defined with attribute qualification on Customer Age.\",\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n  \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"< 25\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"({Customer Age} (ID) < 25)\",\n        \"tree\": {\n          \"type\": \"predicate_form_qualification\",\n          \"predicateText\": \"({Customer Age} (ID) < 25)\",\n          \"predicateTree\": {\n            \"function\": \"less\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"25.0\"\n                }\n              }\n            ],\n            \"attribute\": {\n              \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Customer Age\"\n            },\n            \"form\": {\n              \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n              \"subType\": \"attribute_form_system\",\n              \"name\": \"ID\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"25-35\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"({Customer Age} (ID) Between 25 and 35)\",\n        \"tree\": {\n          \"type\": \"predicate_form_qualification\",\n          \"predicateText\": \"({Customer Age} (ID) Between 25 and 35)\",\n          \"predicateTree\": {\n            \"function\": \"between\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"25.0\"\n                }\n              },\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"35.0\"\n                }\n              }\n            ],\n            \"attribute\": {\n              \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Customer Age\"\n            },\n            \"form\": {\n              \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n              \"subType\": \"attribute_form_system\",\n              \"name\": \"ID\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"36-50\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"({Customer Age} (ID) Between 36 and 50)\",\n        \"tree\": {\n          \"type\": \"predicate_form_qualification\",\n          \"predicateText\": \"({Customer Age} (ID) Between 36 and 50)\",\n          \"predicateTree\": {\n            \"function\": \"between\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"36.0\"\n                }\n              },\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"50.0\"\n                }\n              }\n            ],\n            \"attribute\": {\n              \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Customer Age\"\n            },\n            \"form\": {\n              \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n              \"subType\": \"attribute_form_system\",\n              \"name\": \"ID\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"51-60\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"({Customer Age} (ID) Between 51 and 60)\",\n        \"tree\": {\n          \"type\": \"predicate_form_qualification\",\n          \"predicateText\": \"({Customer Age} (ID) Between 51 and 60)\",\n          \"predicateTree\": {\n            \"function\": \"between\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"51.0\"\n                }\n              },\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"60.0\"\n                }\n              }\n            ],\n            \"attribute\": {\n              \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Customer Age\"\n            },\n            \"form\": {\n              \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n              \"subType\": \"attribute_form_system\",\n              \"name\": \"ID\"\n            }\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"> 60\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"({Customer Age} (ID) > 60)\",\n        \"tree\": {\n          \"type\": \"predicate_form_qualification\",\n          \"predicateText\": \"({Customer Age} (ID) > 60)\",\n          \"predicateTree\": {\n            \"function\": \"greater\",\n            \"parameters\": [\n              {\n                \"parameterType\": \"constant\",\n                \"constant\": {\n                  \"type\": \"double\",\n                  \"value\": \"60.0\"\n                }\n              }\n            ],\n            \"attribute\": {\n              \"objectId\": \"6E069E4C11D3E4E41000E887EC6DE8A4\",\n              \"subType\": \"attribute\",\n              \"name\": \"Customer Age\"\n            },\n            \"form\": {\n              \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n              \"subType\": \"attribute_form_system\",\n              \"name\": \"ID\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create a Custom Group with Band Count",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Band Count\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n  \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All Customers\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where BandingC({Running Revenue Contribution to All Customers Abs.},0,1,5)\",\n        \"tree\": {\n          \"type\": \"predicate_banding_count\",\n          \"predicateText\": \"Set of  Customer where BandingC({Running Revenue Contribution to All Customers Abs.},0,1,5)\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\",\n            \"bandNames\": [\n              \"Top Quintile\",\n              \"Second Quintile\",\n              \"Third Quintile\",\n              \"Fourth Quintile\",\n              \"Bottom Quintile\"\n            ],\n            \"start\": {\n              \"type\": \"double\",\n              \"value\": \"0.0\"\n            },\n            \"stop\": {\n              \"type\": \"double\",\n              \"value\": \"1.0\"\n            },\n            \"count\": {\n              \"type\": \"double\",\n              \"value\": \"5.0\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create a Custom Group with Band Size",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Band Size\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n  \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All Customers\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where Banding({Running Revenue Contribution to All Customers Abs.},0,1,0.2)\",\n        \"tree\": {\n          \"type\": \"predicate_banding_size\",\n          \"predicateText\": \"Set of  Customer where Banding({Running Revenue Contribution to All Customers Abs.},0,1,0.2)\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\",\n            \"bandNames\": [\n              \"Top Quintile\",\n              \"Second Quintile\",\n              \"Third Quintile\",\n              \"Fourth Quintile\",\n              \"Bottom Quintile\"\n            ],\n            \"start\": {\n              \"type\": \"double\",\n              \"value\": \"0.0\"\n            },\n            \"stop\": {\n              \"type\": \"double\",\n              \"value\": \"1.0\"\n            },\n            \"size\": {\n              \"type\": \"double\",\n              \"value\": \"0.2\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create a Custom Group with Band Points",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Points Banding\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All Customers\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n        \"tree\": {\n          \"type\": \"predicate_banding_points\",\n          \"predicateText\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\",\n            \"bandNames\": [\n              \"bottom 20%\",\n              \"20%-40%\",\n              \"40%-60%\",\n              \"60%-80%\",\n              \"Top 20%\"\n            ],\n            \"points\": [\n              0,\n              0.2,\n              0.4,\n              0.6,\n              0.8,\n              1\n            ]\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create a Custom Group with Metric Value Banding",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Metric Value Banding\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All customer\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where BandingM({Running Revenue Contribution to All Customers Abs.})\",\n        \"tree\": {\n          \"type\": \"predicate_banding_distinct\",\n          \"predicateText\": \"Set of  Customer where BandingM({Running Revenue Contribution to All Customers Abs.})\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\"\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create a Custom Group with Filter Elements using Custom Expressions",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"custom_group\",\n      \"name\":\"Last 10 Years\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"options\":{\n      \"hierarchyDisplay\":true,\n      \"subtotalsDisplay\":false,\n      \"elementHeaderAboveChild\":true\n   },\n   \"elements\":[\n      {\n         \"name\":\"Last 5 Year\",\n         \"displayOption\":\"element\",\n         \"qualification\":{\n            \"tokens\":[\n               {\n                  \"value\":\"%\",\n                  \"type\":\"character\"\n               },\n               {\n                  \"value\":\"(Year(CurrentDate()) - 5)<= Year@ID\"\n               }\n            ]\n         }\n      },\n      {\n         \"name\":\"Last 10-5 Years\",\n         \"displayOption\":\"element\",\n         \"qualification\":{\n            \"tokens\":[\n               {\n                  \"value\":\"%\",\n                  \"type\":\"character\"\n               },\n               {\n                  \"value\":\"((Year(CurrentDate()) - 10)<= Year@ID)AND((Year(CurrentDate()) - 5)>Year@ID)\"\n               }\n            ]\n         }\n      }\n   ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						},
						{
							"name": "Create and Update a Custom Group",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a custom group\", function() {",
													"    pm.response.to.have.status(201);",
													"    const customGroup = pm.response.json()",
													"    pm.environment.set(\"rd_customGroupId\", customGroup.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Points Banding\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All Customers\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n        \"tree\": {\n          \"type\": \"predicate_banding_points\",\n          \"predicateText\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\",\n            \"bandNames\": [\n              \"bottom 20%\",\n              \"20%-40%\",\n              \"40%-60%\",\n              \"60%-80%\",\n              \"Top 20%\"\n            ],\n            \"points\": [\n              0,\n              0.2,\n              0.4,\n              0.6,\n              0.8,\n              1\n            ]\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update custom group definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update custom group\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"custom_group\",\n    \"name\": \"Customers Value Points Banding\",\n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n \"options\": {\n    \"hierarchyDisplay\": true,\n    \"subtotalsDisplay\": false,\n    \"elementHeaderAboveChild\": true\n  },\n  \"elements\": [\n    {\n      \"name\": \"All Customers\",\n      \"displayOption\": \"element\",\n      \"qualification\": {\n        \"text\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n        \"tree\": {\n          \"type\": \"predicate_banding_points\",\n          \"predicateText\": \"Set of  Customer where BandingP({Running Revenue Contribution to All Customers Abs.},0,0.2,0.4,0.6,0.8,1)\",\n          \"predicateTree\": {\n            \"level\": [\n              {\n                \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer\"\n              }\n            ],\n            \"metric\": {\n              \"objectId\": \"4C051BCD11D3E877C000B3B2D86C964F\",\n              \"subType\": \"metric\",\n              \"name\": \"Running Revenue Contribution to All Customers Abs.\"\n            },\n            \"bandMetricFunction\": \"value\",\n            \"bandNames\": [\n              \"bottom 20%\",\n              \"20%-40%\",\n              \"40%-60%\",\n              \"60%-80%\",\n              \"Top 20%\"\n            ],\n            \"points\": [\n              0,\n              0.2,\n              0.4,\n              0.6,\n              0.8,\n              1\n            ]\n          }\n        }\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/customGroups/:customGroupId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"customGroups",
												":customGroupId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "customGroupId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the custom group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the custom group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint.  1 is for custom group type (must use type not subtype)."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_customGroupId}}",
													"description": "(Required) Custom Group ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_customGroupId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and update custom group objects through the Modeling service. Note that 5 of these workflows deal with creating new custom groups and they only differ in the request body containing the custom group definition for POST Submit a new Custom Group"
				},
				{
					"name": "Manage Datamart",
					"item": [
						{
							"name": "Create a Datamart Based on Source Report",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get report\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_reportId\", pm.response.json().result[0].id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Forecast (Grid)&type=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Forecast (Grid)"
												},
												{
													"key": "type",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a datamart using a source report",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create datamart\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_datamartId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"destinationFolderId\":\"{{publicObjectsFolderId}}\",\n        \"subType\": \"report_datamart\",\n        \"name\": \"01_dmr_createFromSource\"\n    },\n     \"datamartOptions\": {\n        \"append\": true,\n        \"targetSource\": {\n            \"objectId\": \"A23BBC514D336D5B4FCE919FE19661A3\",\n            \"subType\": \"db_role\",\n            \"name\": \"Tutorial Warehouse\"\n        },\n        \"tableName\": \"dm_sample\",\n        \"placeholderIncluded\": true,\n        \"datamartProperties\": {\n            \"[DatamartProperties].[Create Table Post String]\": {\n                \"name\": \"Create Table Post String\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"name\": \"Insert SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Execution Time]\": {\n                \"name\": \"Maximum Execution Time\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Rows]\": {\n                \"name\": \"Maximum Rows\",\n                \"value\": \"65536\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Post SQLs]\": {\n                \"name\": \"Post SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Pre SQLs]\": {\n                \"name\": \"Pre SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Descriptor]\": {\n                \"name\": \"Table Descriptor\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Option]\": {\n                \"name\": \"Table Option\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Prefix]\": {\n                \"name\": \"Table Prefix\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Qualifier]\": {\n                \"name\": \"Table Qualifier\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Space]\": {\n                \"name\": \"Table Space\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Type]\": {\n                \"name\": \"Table Type\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts?sourceReportId={{rd_reportId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
													"disabled": true
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
													"disabled": true
												},
												{
													"key": "sourceReportId",
													"value": "{{rd_reportId}}",
													"description": "(Optional) report ID\nThis parameter is used when user want to create a data mart report based on a report object. In this way, data mart report will be created based on the source report template design and the data mart options in request body.\nIf the parameter is not provided,  data mart report will be created based on the definition provided in request body."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the datamart definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get dmr definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned."
												}
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a datamart",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a datamart\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"datamartOptions\": {\n        \"append\": false,\n        \"targetSource\": {\n            \"objectId\": \"A23BBC514D336D5B4FCE919FE19661A3\",\n            \"subType\": \"db_role\",\n            \"name\": \"Tutorial Warehouse\"\n        },\n        \"tableName\": \"!p_dm_sample\",\n        \"placeholderIncluded\": false,\n        \"datamartProperties\": {\n            \"[DatamartProperties].[Create Table Post String]\": {\n                \"name\": \"Create Table Post String\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"name\": \"Insert SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Execution Time]\": {\n                \"name\": \"Maximum Execution Time\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Rows]\": {\n                \"name\": \"Maximum Rows\",\n                \"value\": \"65536\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Post SQLs]\": {\n                \"name\": \"Post SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Pre SQLs]\": {\n                \"name\": \"Pre SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Descriptor]\": {\n                \"name\": \"Table Descriptor\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Option]\": {\n                \"name\": \"Table Option\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Prefix]\": {\n                \"name\": \"Table Prefix\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Qualifier]\": {\n                \"name\": \"Table Qualifier\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Space]\": {\n                \"name\": \"Table Space\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Type]\": {\n                \"name\": \"Table Type\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Get the list of applicable properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Applicable Properties of a Datamart/Get the list of applicable properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId/applicableVldbProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId",
												"applicableVldbProperties"
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "StartFragment\n\nGet the list of applicable properties for a specific datamart. The list is returned based on datamart's subtype. The datamart's subtype must be normal or custom_sql_free_form, an error is thrown otherwise. Internationalized fields will be based on user's displayLocale from MicroStrategy Library session.\n\nEndFragmen"
									},
									"response": []
								},
								{
									"name": "Delete the datamart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the datamart\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:id?type=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":id"
											],
											"query": [
												{
													"key": "type",
													"value": "3",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datamartId\");",
													"    pm.environment.unset(\"rd_reportId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a Datamart From Scratch and Update a Datamart",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a datamart using datamart definistion",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create datamart\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_datamartId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"destinationFolderId\":\"{{publicObjectsFolderId}}\",\n        \"subType\": \"report_datamart\",\n        \"name\": \"01_dmr_scratch\"\n    },\n    \"sourceType\": \"normal\",\n    \"dataSource\": {\n        \"dataTemplate\": {\n            \"units\": [\n                {\n                    \"id\": \"8D679D3811D3E4981000E787EC6DE8A4\",\n                    \"name\": \"Country\",\n                    \"type\": \"attribute\"\n                },\n                {\n                    \"id\": \"8D679D3611D3E4981000E787EC6DE8A4\",\n                    \"name\": \"Catalog\",\n                    \"type\": \"attribute\"\n                },\n                {\n                    \"id\": \"8D679D3511D3E4981000E787EC6DE8A4\",\n                    \"name\": \"Call Center\",\n                    \"type\": \"attribute\"\n                },\n                {\n                    \"id\": \"8D679D5211D3E4981000E787EC6DE8A4\",\n                    \"name\": \"Distribution Center\",\n                    \"type\": \"attribute\"\n                },\n                {\n                    \"id\": \"8D679D4F11D3E4981000E787EC6DE8A4\",\n                    \"name\": \"Subcategory\",\n                    \"type\": \"attribute\"\n                },\n                {\n                    \"type\": \"metrics\",\n                    \"elements\": [\n                        {\n                            \"id\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n                            \"name\": \"Cost\",\n                            \"subType\": \"metric\"\n                        },\n                        {\n                            \"id\": \"D823D64B48A0104B01135587BA87A2BD\",\n                            \"name\": \"Cost Growth\",\n                            \"subType\": \"metric\"\n                        },\n                        {\n                            \"id\": \"381980B211D40BC8C000C8906B98494F\",\n                            \"name\": \"Discount\",\n                            \"subType\": \"metric\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"filter\": {}\n    },\n    \"datamartOptions\": {\n        \"append\": true,\n        \"targetSource\": {\n            \"objectId\": \"A23BBC514D336D5B4FCE919FE19661A3\",\n            \"subType\": \"db_role\",\n            \"name\": \"Tutorial Warehouse\"\n        },\n        \"tableName\": \"dm_sample\",\n        \"placeholderIncluded\": true,\n        \"datamartProperties\": {\n            \"[DatamartProperties].[Create Table Post String]\": {\n                \"name\": \"Create Table Post String\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"name\": \"Insert SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Execution Time]\": {\n                \"name\": \"Maximum Execution Time\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Rows]\": {\n                \"name\": \"Maximum Rows\",\n                \"value\": \"65536\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Post SQLs]\": {\n                \"name\": \"Post SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Pre SQLs]\": {\n                \"name\": \"Pre SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Descriptor]\": {\n                \"name\": \"Table Descriptor\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Option]\": {\n                \"name\": \"Table Option\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Prefix]\": {\n                \"name\": \"Table Prefix\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Qualifier]\": {\n                \"name\": \"Table Qualifier\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Space]\": {\n                \"name\": \"Table Space\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Type]\": {\n                \"name\": \"Table Type\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
													"disabled": true
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the datamart definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get datamart definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned."
												}
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a datamart",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a datamart\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"datamartOptions\": {\n        \"append\": false,\n        \"targetSource\": {\n            \"objectId\": \"A23BBC514D336D5B4FCE919FE19661A3\",\n            \"subType\": \"db_role\",\n            \"name\": \"Tutorial Warehouse\"\n        },\n        \"tableName\": \"!p_dm_sample\",\n        \"placeholderIncluded\": false,\n        \"datamartProperties\": {\n            \"[DatamartProperties].[Create Table Post String]\": {\n                \"name\": \"Create Table Post String\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"name\": \"Insert SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Execution Time]\": {\n                \"name\": \"Maximum Execution Time\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Maximum Rows]\": {\n                \"name\": \"Maximum Rows\",\n                \"value\": \"65536\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Post SQLs]\": {\n                \"name\": \"Post SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Pre SQLs]\": {\n                \"name\": \"Pre SQLs\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Descriptor]\": {\n                \"name\": \"Table Descriptor\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Option]\": {\n                \"name\": \"Table Option\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Prefix]\": {\n                \"name\": \"Table Prefix\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Qualifier]\": {\n                \"name\": \"Table Qualifier\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Space]\": {\n                \"name\": \"Table Space\",\n                \"value\": \"\",\n                \"type\": \"string\",\n                \"resolvedLocation\": \"object\"\n            },\n            \"[DatamartProperties].[Table Type]\": {\n                \"name\": \"Table Type\",\n                \"value\": \"0\",\n                \"type\": \"int32\",\n                \"resolvedLocation\": \"object\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether to retrieve the values of the advanced properties. The advanced properties are presented in the following groups: \"vldbProperties\": A list of properties as determined by the common infrastructure. \"metricJoinTypes\": A list of Metric Join Types, one for each metric that appears in the template. \"attributeJoinTypes\": A list of Attribute Join Types, one for each attribute that appears in the template. If omitted or false, nothing will be returned for the advanced properties. If true, all applicable advanced properties are returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Get the list of applicable properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Applicable Properties of a Datamart/Get the list of applicable properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datamarts/:datamartId/applicableVldbProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datamarts",
												":datamartId",
												"applicableVldbProperties"
											],
											"variable": [
												{
													"key": "datamartId",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "StartFragment\n\nGet the list of applicable properties for a specific datamart. The list is returned based on datamart's subtype. The datamart's subtype must be normal or custom_sql_free_form, an error is thrown otherwise. Internationalized fields will be based on user's displayLocale from MicroStrategy Library session.\n\nEndFragmen"
									},
									"response": []
								},
								{
									"name": "Delete the datamart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the datamart\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:id?type=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":id"
											],
											"query": [
												{
													"key": "type",
													"value": "3",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datamartId}}",
													"description": "(Required) Datamart ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datamartId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage Derived Element Objects",
					"item": [
						{
							"name": "Create, Retrieve, and Update a Derived Element",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create derived element",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create derived element\", function () {",
													"    pm.response.to.have.status(201);",
													"    const derivedElement = pm.response.json()",
													"    pm.environment.set(\"rd_derivedElementId\", derivedElement.information.objectId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"Age Ranges (Under 24, 25-34)\",\n        \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n    },\n    \"attribute\": {\n        \"objectId\": \"5603951E4FE1BC04A44E44B85BBB8ED2\",\n        \"name\": \"Age Range\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"Age under 34\",\n            \"type\": \"list\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"individual_items\",\n                \"subtotal\": \"individual_items\",\n                \"includeIndividual\": true\n            },\n            \"text\": \"Under 24, 25 to 34\",\n            \"elements\": [\n                {\n                    \"display\": \"Under 24\",\n                    \"elementId\": \"h1\"\n                },\n                {\n                    \"display\": \"25 to 34\",\n                    \"elementId\": \"h2\"\n                }\n            ]\n        },\n        {\n            \"name\": \"All Other\",\n            \"type\": \"all_other\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"this_element\",\n                \"subtotal\": \"disable\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/derivedElements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"derivedElements"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get derived element's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get derived element definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Changeset ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/derivedElements/:derivedElementId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"derivedElements",
												":derivedElementId"
											],
											"variable": [
												{
													"key": "derivedElementId",
													"value": "{{rd_derivedElementId}}",
													"description": "(Required) Derived Element ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update derived element's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update derived element\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Requried) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"Age Ranges (Under 18, 19-34)\",\n        \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n    },\n    \"attribute\": {\n        \"objectId\": \"5603951E4FE1BC04A44E44B85BBB8ED2\",\n        \"name\": \"Age Range\"\n    },\n    \"elements\": [\n        {\n            \"name\": \"Age under 34\",\n            \"type\": \"list\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"individual_items\",\n                \"subtotal\": \"individual_items\",\n                \"includeIndividual\": true\n            },\n            \"text\": \"Under 18, 19 to 34\",\n            \"elements\": [\n                {\n                    \"display\": \"Under 18\",\n                    \"elementId\": \"h1\"\n                },\n                {\n                    \"display\": \"19 to 34\",\n                    \"elementId\": \"h2\"\n                }\n            ]\n        },\n        {\n            \"name\": \"All Other\",\n            \"type\": \"all_other\",\n            \"format\": {\n                \"header\": [],\n                \"values\": []\n            },\n            \"options\": {\n                \"display\": \"this_element\",\n                \"subtotal\": \"disable\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/derivedElements/:derivedElementId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"derivedElements",
												":derivedElementId"
											],
											"variable": [
												{
													"key": "derivedElementId",
													"value": "{{rd_derivedElementId}}",
													"description": "(Required) Derived Element ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get derived element's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get derived element definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID",
												"type": "text",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Changeset ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/derivedElements/:derivedElementId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"derivedElements",
												":derivedElementId"
											],
											"variable": [
												{
													"key": "derivedElementId",
													"value": "{{rd_derivedElementId}}",
													"description": "(Required) Derived Element ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the derived element",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the derived element\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=48",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "48",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 48 is for derived element object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_derivedElementId}}",
													"description": "(Required) Derived Element ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_derivedElementId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve and update a derived element object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and replace derived element objects through the Modeling service."
				},
				{
					"name": "Manage Drill Map Objects",
					"item": [
						{
							"name": "Create, Retrieve, and Update a Drill Map",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"content-length": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"type": "text",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\nDefault value : false\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Create a drill map",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a drill map\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    const drillMapId = pm.response.json().information.objectId;\r",
													"    pm.environment.set(\"rd_drillMapId\", drillMapId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Changeset ID\n"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"information\": {\r\n\t\t\"name\": \"Test DrillMap\",\r\n\t\t\"destinationFolderId\": \"{{publicReportsFolderId}}\"\r\n\t},\r\n\t\"drillPaths\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/drillMaps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"drillMaps"
											],
											"query": [
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.",
													"disabled": true
												}
											]
										},
										"description": "Creates a new drill map in the changeset, based on the definition provided in the request body. The definition of the newly created drill map is returned in the response.\n\nIn the request body, there are two main parts:\n\n*   Information: Stores basic drill map information such as name, subType, destinationFolderId, etc. name and destinationFolderId are required fields.\n*   DrillPaths: Stores an array of drill path objects.\n    \n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created drill map to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Update a drill map",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update drill map\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"information\": {\r\n\t\t\"name\": \"Test DrillMap\",\r\n\t\t\"destinationFolderId\": \"{{publicReportsFolderId}}\"\r\n\t},\r\n\t\"drillPaths\": [\r\n\t\t{\r\n\t\t\t\"type\": \"up\",\r\n\t\t\t\"target\": {\r\n\t\t\t\t\"objectId\": \"8D679D3711D3E4981000E787EC6DE8A4\",\r\n\t\t\t\t\"subType\": \"attribute\",\r\n\t\t\t\t\"name\": \"Year\"\r\n\t\t\t},\r\n\t\t\t\"priority\": \"low\",\r\n\t\t\t\"options\": {\r\n\t\t\t\t\"setName\": \"Set1\",\r\n\t\t\t\t\"keepParent\": false,\r\n\t\t\t\t\"keepThresholds\": false,\r\n\t\t\t\t\"keepPageBy\": false,\r\n\t\t\t\t\"keepBaseTemplate\": false,\r\n\t\t\t\t\"applyUserFilter\": true,\r\n\t\t\t\t\"applyReportFilter\": true,\r\n\t\t\t\t\"includeOtherFilter\": \"default\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/drillMaps/:drillMapId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"drillMaps",
												":drillMapId"
											],
											"query": [
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "drillMapId",
													"value": "{{rd_drillMapId}}",
													"description": "(Required) Drill Map ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in the changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "Updates a specific drill map in the changeset, based on the definition provided in the request body. It returns the drill map's updated definition in the changeset.\n\nThe modeling service performs a full validation for each part of the body. If something is wrong, an error is reported.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Get drill map definition from changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get drill map definition\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "Changeset ID\n"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/drillMaps/:drillMapId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"drillMaps",
												":drillMapId"
											],
											"query": [
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "drillMapId",
													"value": "{{rd_drillMapId}}",
													"description": "(Required) Drill Map ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in the changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "The response returns the definition of a single drill map.\n\nThe project ID is required to return a drill map's definition in metadata. The changeset ID is required to return a drill map's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.  \nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.  \nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Delete the drill map",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the drill map\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=56",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "56"
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_drillMapId}}"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.  \nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {\r",
													"    pm.response.to.have.status(204);\r",
													"    pm.environment.unset(\"authToken\");\r",
													"    pm.environment.unset(\"rd_drillMapId\");\r",
													"    pm.environment.unset(\"rd_changesetId\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"type": "text",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve and update a drill map object."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update drill map objects through the Modeling service."
				},
				{
					"name": "Manage Fact Objects",
					"item": [
						{
							"name": "Retrieve a Fact's Definiton",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Find Profit Fact\", function () {",
													"    pm.response.to.have.status(200);",
													"    const factId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_factId\", factId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Profit&pattern=2&type=13&getAncestors=false&offset=0&limit=-1&certifiedStatus=ALL&isCrossCluster=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Profit",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "13",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object"
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes."
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Read a fact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read Profit Fact Definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/facts/:factId?showExpressionAs=tokens&showPotentialTables=false&showFields=acl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"facts",
												":factId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "false",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n"
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n"
												},
												{
													"key": "fields",
													"value": "",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "factId",
													"value": "{{rd_factId}}"
												}
											]
										},
										"description": "The response returns the definition of a single fact.\n\nThe project ID is required to return a fact's definition in metadata. The changeset ID is required to return a fact's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_factId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the definition of a fact through the Modeling service."
						},
						{
							"name": "Retrieve an Fact's Definiton within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Find Profit Fact\", function () {",
													"    pm.response.to.have.status(200);",
													"    const factId = pm.response.json().result[0].id;",
													"    pm.environment.set(\"rd_factId\", factId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Profit&pattern=2&type=13&getAncestors=false&offset=0&limit=-1&certifiedStatus=ALL&isCrossCluster=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Profit",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "type",
													"value": "13",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object"
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes."
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a new changeset for modeling manipulations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create changeset\", function () {",
													"    pm.response.to.have.status(201); //should be 200 if instance creted",
													"    const changesetId = pm.response.json().id;",
													"    pm.environment.set(\"rd_changesetId\", changesetId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n"
												}
											]
										},
										"description": "Creates a new changeset. \nThis request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.).\nA changeset maintains an indivisible group of creations or modifications on modeling objects. \nEventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. \n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Read a fact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read Profit Fact Definition in changeset\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/facts/:factId?showExpressionAs=tokens&showPotentialTables=true&showFields=acl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"facts",
												":factId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n"
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n"
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "factId",
													"value": "{{rd_factId}}"
												}
											]
										},
										"description": "The response returns the definition of a single fact.\n\nThe project ID is required to return a fact's definition in metadata. The changeset ID is required to return a fact's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID\n"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_factId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_newFactId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a fact's definition within a changeset."
						},
						{
							"name": "Create, Update and Delete Fact",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new changeset for modeling manipulations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create changeset\", function () {",
													"    pm.response.to.have.status(201); //should be 200 if instance creted",
													"    const changesetId = pm.response.json().id;",
													"    pm.environment.set(\"rd_changesetId\", changesetId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n"
												}
											]
										},
										"description": "Creates a new changeset. \nThis request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.).\nA changeset maintains an indivisible group of creations or modifications on modeling objects. \nEventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. \n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a new fact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create new fact\", function () {",
													"    pm.response.to.have.status(201);",
													"    const factObj = pm.response.json();",
													"    const newFactId = factObj.information.objectId",
													"    pm.environment.set(\"rd_newFactId\", newFactId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"fact\",\n      \"name\":\"New Profit\",\n      \"destinationFolderId\":\"98FE182C2A10427EACE0CD30B6768258\"\n   },\n   \"expressions\":[\n      {\n         \"expression\":{\n            \"tokens\":[\n               {\n                  \"value\":\"TOT_DOLLAR_SALES - TOT_COST\"\n               }\n            ]\n         },\n         \"tables\":[\n            {\n               \"objectId\":\"9A28CFCC42DB8E9627D547975958C138\",\n               \"subType\":\"logical_table\",\n               \"name\":\"CITY_MNTH_SLS\"\n            },\n            {\n               \"objectId\":\"54D82D5B4BD115DA313C03A5742900AE\",\n               \"subType\":\"logical_table\",\n               \"name\":\"CUSTOMER_SLS\"\n            }\n         ]\n      }\n   ],\n   \"entryLevel\":[     \n   ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/facts?showExpressionAs=tokens&showPotentialTables=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"facts"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n"
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new fact in the changeset, based on the definition provided in request body. The definition of the newly created fact is returned in response.\n\nIn the request body, ”expressions” contains a list of fact expressions.  \nEach fact expression contains \"expression\" and \"tables\".\n\n- ”expression”: Needs to be in either \"tree\" or \"tokens\" format.\n    - Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a fact expression is \"Revenue - Cost\". When the fact expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\"-\", Minus_ID), (\"Cost\", Cost_ID).\n- \"tables\": A list of tables that the \"expression\" applies to. Warehouse partition base tables and metadata partition mapping tables are not allowed here.\n    \n\n\"dataType\" is optional. If omitted, it calculates based on the first fact expression.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created fact to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Update fact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update fact\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"name\":\"New Profit 2\"\n   },\n   \"expressions\":[\n      {\n         \"expression\":{\n            \"tokens\":[\n               {\n                  \"value\":\"ORDER_AMT - ORDER_COST\"\n               }\n            ]\n         },\n         \"tables\":[\n            {\n               \"objectId\":\"8D6793D411D3E4981000E787EC6DE8A4\",\n               \"subType\":\"logical_table\",\n               \"name\":\"ORDER_FACT\"\n            }\n         ]\n      }\n   ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/facts/:factId?showExpressionAs=tokens&showPotentialTables=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"facts",
												":factId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n"
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "factId",
													"value": "{{rd_newFactId}}"
												}
											]
										},
										"description": "Updates a specific fact in the changeset, based on the definition provided in the request body. It returns the fact's updated definition in the changeset.\n\nIn the request body, ”expressions” contains a list of fact expressions.  \nEach fact expression contains \"expression\" and \"tables\".\n\n- ”expression”: Needs to be in either \"tree\" or \"tokens\" format.\n    - Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a fact expression is \"Revenue - Cost\". When the fact expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\"-\", Minus_ID), (\"Cost\", Cost_ID).\n- \"tables\": A list of tables that the \"expression\" applies to. Warehouse partition base tables and metadata partition mapping tables are not allowed here.\n    \n\n\"dataType\" is optional. If omitted, it calculates based on the first fact expression.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID\n"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.     \n"
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID\n"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Read the new fact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read Profit Fact Definition in changeset\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/facts/:factId?showExpressionAs=tokens&showPotentialTables=true&showFields=acl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"facts",
												":factId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showPotentialTables",
													"value": "true",
													"description": "This parameter specifies whether to return the potential tables that the expressions can be applied to.   \n\nIf `true`, the \"potentialTables\" field returns for each fact/attribute expression, in the form of a list of tables. \n\nIf `false` or omitted, the \"potentialTables\" field is omitted.\n"
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n"
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "A whitelist of top-level fields separated by commas.  \n\nThis parameter allows the client to selectively retrieve fields in the response.\n\nOnce specified, only the listed fields are returned in the response. For example, if this parameter is set as “information, expressions”, only “information” and “expressions” are returned. Other top-level fields are omitted.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "factId",
													"value": "{{rd_newFactId}}"
												}
											]
										},
										"description": "The response returns the definition of a single fact.\n\nThe project ID is required to return a fact's definition in metadata. The changeset ID is required to return a fact's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete created fact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete fact\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:factId?type=13",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":factId"
											],
											"query": [
												{
													"key": "type",
													"value": "13",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
												}
											],
											"variable": [
												{
													"key": "factId",
													"value": "{{rd_newFactId}}"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_newFactId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create a fact object through the Modeling service."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update fact objects through the Modeling service."
				},
				{
					"name": "Manage Filter Objects",
					"item": [
						{
							"name": "Retrieve a Filter's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_filterId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Year&pattern=2&type=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Year",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 1 is for filter object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Read a filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read a filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/filters/:filterId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters",
												":filterId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\n\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\n\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "filterId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Filter ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a filter's definition."
						},
						{
							"name": "Retrieve a Filter's Definition within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_filterId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=Year&pattern=2&type=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "Year",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 1 is for filter object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Read a filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read a filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/filters/:filterId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters",
												":filterId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\n\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\n\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "filterId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Filter ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a filter's definition within a changeset."
						},
						{
							"name": "Create and Update Filter Object",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"    const filter = pm.response.json();",
													"    pm.environment.set(\"rd_filterId\", filter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"filter\",\n    \"name\": \"Year > 2015\", \n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n  \"qualification\": {\n    \"tree\": {\n      \"type\": \"predicate_form_qualification\",\n      \"predicateTree\": {\n        \"function\": \"greater\",\n        \"parameters\": [\n          {\n            \"parameterType\": \"constant\",\n            \"constant\": {\n              \"type\": \"double\",\n              \"value\": \"2015.0\"\n            }\n          }\n        ],\n        \"attribute\": {\n          \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n          \"subType\": \"attribute\",\n          \"name\": \"Year\"\n        },\n        \"form\": {\n          \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n          \"subType\": \"attribute_form_system\",\n          \"name\": \"ID\"\n        }\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										},
										"description": "Creates a new filter in the changeset, based on the definition provided in request body. The definition of the newly created filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Update a filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"name\": \"Year > 2020\"\n  },\n  \"qualification\": {\n    \"tree\": {\n      \"type\": \"predicate_form_qualification\",\n      \"predicateTree\": {\n        \"function\": \"greater\",\n        \"parameters\": [\n          {\n            \"parameterType\": \"constant\",\n            \"constant\": {\n              \"type\": \"double\",\n              \"value\": \"2020\"\n            }\n          }\n        ],\n        \"attribute\": {\n          \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n          \"subType\": \"attribute\",\n          \"name\": \"Year\"\n        },\n        \"form\": {\n          \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n          \"subType\": \"attribute_form_system\",\n          \"name\": \"ID\"\n        }\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters/:filterId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters",
												":filterId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\n\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\n\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "filterId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Filter ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "Updates a specific filter in the changeset, based on the definition provided in the request body. It returns the filter's updated definition in the changeset.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create and update a new filter object through the Modeling service. The workflow deletes the newly created filter at the end."
						},
						{
							"name": "Create a Filter Object with a Custom Expression",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"    const filter = pm.response.json();",
													"    pm.environment.set(\"rd_filterId\", filter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"information\": {\n    \"subType\": \"filter\",\n    \"name\": \"filter_for_last_5_years\", \n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n  \"qualification\": {\n    \"tokens\": [\n      {\n        \"value\": \"%\",\n        \"type\": \"character\"\n      },\n      {\n        \"value\": \"(Year(CurrentDate()) - 5)< Year@ID\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										},
										"description": "Creates a new filter in the changeset, based on the definition provided in request body. The definition of the newly created filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create a new filter object using a custom expression through the Modeling service. The workflow deletes the newly created filter at the end."
						},
						{
							"name": "Create Attribute Element Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"    const filter = pm.response.json();",
													"    pm.environment.set(\"rd_filterId\", filter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"filter\",\n    \"name\": \"Attribute element filter\",\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n  },\n\"qualification\": {\n      \"tree\": {\n        \"type\": \"operator\",\n        \"children\": [\n          {\n            \"type\": \"predicate_element_list\",\n            \"predicateTree\": {\n              \"attribute\": {\n                \"objectId\": \"6E069EA411D3E4E41000E887EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Employee Age\"\n              },\n              \"elements\": [\n                {\n                  \"display\": \"34\",\n                  \"elementId\": \"h34\"\n                },\n                {\n                  \"display\": \"35\",\n                  \"elementId\": \"h35\"\n                },\n                {\n                  \"display\": \"36\",\n                  \"elementId\": \"h36\"\n                }\n              ],\n              \"function\": \"in\"\n            }\n          },\n          {\n            \"type\": \"predicate_element_list\",\n            \"predicateTree\": {\n              \"attribute\": {\n                \"objectId\": \"8D679D3911D3E4981000E787EC6DE8A4\",\n                \"subType\": \"attribute\",\n                \"name\": \"Customer Birth Date\"\n              },\n              \"elements\": [\n                {\n                  \"display\": \"1941-01-01\",\n                  \"elementId\": \"h1941-01-01\"\n                },\n                {\n                  \"display\": \"1941-01-03\",\n                  \"elementId\": \"h1941-01-03\"\n                },\n                {\n                  \"display\": \"1941-01-04\",\n                  \"elementId\": \"h1941-01-04\"\n                },\n                {\n                  \"display\": \"1941-01-07\",\n                  \"elementId\": \"h1941-01-07\"\n                }\n              ],\n              \"function\": \"in\"\n            }\n          },\n          {\n            \"type\": \"predicate_element_list\",\n            \"predicateTree\": {\n              \"attribute\": {\n                \"objectId\": \"96ED3EC811D5B117C000E78A4CC5F24F\",\n                \"subType\": \"attribute\",\n                \"name\": \"Day\"\n              },\n              \"elements\": [\n                {\n                  \"display\": \"2014-01-01\",\n                  \"elementId\": \"h2014-01-01\"\n                },\n                {\n                  \"display\": \"2014-01-02\",\n                  \"elementId\": \"h2014-01-02\"\n                },\n                {\n                  \"display\": \"2014-01-03\",\n                  \"elementId\": \"h2014-01-03\"\n                },\n                {\n                  \"display\": \"2014-01-04\",\n                  \"elementId\": \"h2014-01-04\"\n                }\n              ],\n              \"function\": \"in\"\n            }\n          }\n        ],\n        \"function\": \"and\"\n      }\n    }\n  }\n"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										},
										"description": "Creates a new filter in the changeset, based on the definition provided in request body. The definition of the newly created filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get basic object information of the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get basic object information of the filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												},
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Get information for a specific object in a specific project; if you do not specify a project ID, you get information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset Id"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow goes over how to create a filter based on attribute elements. For details on the request body see: [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#attribute_element_list](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#attribute_element_list)."
						},
						{
							"name": "Create Attribute Form Expression Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"    const filter = pm.response.json();",
													"    pm.environment.set(\"rd_filterId\", filter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"filter\",\n    \"name\": \"Attribute Form Filter\", \n    \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n  },\n  \"qualification\": {\n    \"tree\": {\n      \"type\": \"predicate_form_qualification\",\n      \"predicateTree\": {\n        \"function\": \"greater\",\n        \"parameters\": [\n          {\n            \"parameterType\": \"constant\",\n            \"constant\": {\n              \"type\": \"double\",\n              \"value\": \"2015.0\"\n            }\n          }\n        ],\n        \"attribute\": {\n          \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n          \"subType\": \"attribute\",\n          \"name\": \"Year\"\n        },\n        \"form\": {\n          \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n          \"subType\": \"attribute_form_system\",\n          \"name\": \"ID\"\n        }\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										},
										"description": "Creates a new filter in the changeset, based on the definition provided in request body. The definition of the newly created filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get basic object information of the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get basic object information of the filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												},
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Get information for a specific object in a specific project; if you do not specify a project ID, you get information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset Id"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow goes over how to create a filter based on attribute forms. For details on the request body see: [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#attribute_form](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#attribute_form)."
						},
						{
							"name": "Create Metric Qualification Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"    const filter = pm.response.json();",
													"    pm.environment.set(\"rd_filterId\", filter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n      \"name\": \"Metric qualification filter\",\n      \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n      \"description\": \"This is a metric qualification filter\"\n    },\n    \"qualification\": {\n      \"tree\": {\n        \"type\": \"operator\",\n        \"children\": [\n          {\n            \"type\": \"predicate_metric_qualification\",\n            \"predicateTree\": {\n              \"function\": \"is_not_null\",\n              \"parameters\": [],\n              \"levelType\": \"metric_level\",\n              \"metric\": {\n                \"objectId\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n                \"subType\": \"metric\",\n                \"name\": \"Cost\"\n              },\n              \"metricFunction\": \"value\",\n              \"isIndependent\": 0\n            }\n          },\n          {\n            \"type\": \"operator\",\n            \"children\": [\n              {\n                \"type\": \"predicate_metric_qualification\",\n                \"predicateTree\": {\n                  \"function\": \"less\",\n                  \"parameters\": [\n                    {\n                      \"parameterType\": \"object_reference\",\n                      \"target\": {\n                        \"objectId\": \"4C051DB611D3E877C000B3B2D86C964F\",\n                        \"subType\": \"metric\",\n                        \"name\": \"Profit\"\n                      }\n                    }\n                  ],\n                  \"levelType\": \"explicit_level\",\n                  \"level\": [\n                    {\n                      \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n                      \"subType\": \"attribute\",\n                      \"name\": \"Customer\"\n                    }\n                  ],\n                  \"metric\": {\n                    \"objectId\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n                    \"subType\": \"metric\",\n                    \"name\": \"Cost\"\n                  },\n                  \"metricFunction\": \"value\",\n                  \"isIndependent\": 0\n                }\n              },\n              {\n                \"type\": \"predicate_metric_qualification\",\n                \"predicateTree\": {\n                  \"function\": \"between\",\n                  \"parameters\": [\n                    {\n                      \"parameterType\": \"constant\",\n                      \"constant\": {\n                        \"type\": \"double\",\n                        \"value\": \"100.0\"\n                      }\n                    },\n                    {\n                      \"parameterType\": \"constant\",\n                      \"constant\": {\n                        \"type\": \"double\",\n                        \"value\": \"300.0\"\n                      }\n                    }\n                  ],\n                  \"levelType\": \"grid_level\",\n                  \"metric\": {\n                    \"objectId\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n                    \"subType\": \"metric\",\n                    \"name\": \"Cost\"\n                  },\n                  \"metricFunction\": \"value\",\n                  \"isIndependent\": 0\n                }\n              }\n            ],\n            \"function\": \"or\"\n          }\n        ],\n        \"function\": \"and\"\n      }\n    }\n  }"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/filters?showFilterTokens=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"filters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "false",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											]
										},
										"description": "Creates a new filter in the changeset, based on the definition provided in request body. The definition of the newly created filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a filter\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get basic object information of the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get basic object information of the filter\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												},
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Get information for a specific object in a specific project; if you do not specify a project ID, you get information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset Id"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "1",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). 1 is for filter object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_filterId}}",
													"description": "(Required) Object Id"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_filterId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow goes over how to create a filter based on metric value or rank For details on the request body see: [https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#metric_set](https://www2.microstrategy.com/producthelp/Current/RESTSDK/Content/create_filter_object.htm#metric_set)."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update filter objects through the Modeling service."
				},
				{
					"name": "Manage Metric Objects",
					"item": [
						{
							"name": "Retrieve a Metric's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_metricId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=1024&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1024",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get metric definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get metric definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_metricId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a metric's definition."
						},
						{
							"name": "Create, Update, and Delete a Metric",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a metric",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create metric\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_metricId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"metric\",\n      \"name\":\"test_sample_metric\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"sum([Item inventory])\"\n               }\n            ]\n   },\n       \"dimty\": {\n        \"dimtyUnits\": [\n            {\n                \"dimtyUnitType\": \"report_base_level\",\n                \"aggregation\": \"normal\",\n                \"filtering\": \"apply\",\n                \"groupBy\": true\n            }\n        ],\n        \"excludeAttribute\": false,\n        \"allowAddingUnit\": true\n    },\n    \"conditionality\": {\n        \"filter\": {\n            \"objectId\": \"E638359211D5C49EC0000C881FDA1A4F\",\n            \"subType\": \"filter\",\n            \"name\": \"Select a Quarter\"\n        },\n        \"embedMethod\": \"metric_into_report_filter\",\n        \"removeElements\": true\n    },\n    \"metricSubtotals\": [\n        {\n            \"definition\": {\n                \"objectId\": \"96C487AF4D12472A910C1ACACFB56EFB\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Total\"\n            },\n            \"implementation\": {\n                \"objectId\": \"B328C60462634223B2387D4ADABEEB53\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Average\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"078C50834B484EE29948FA9DD5300ADF\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Count\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"B328C60462634223B2387D4ADABEEB53\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Average\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"00B7BFFF967F42C4B71A4B53D90FB095\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Minimum\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"B1F4AA7DE683441BA559AA6453C5113E\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Maximum\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"F225147A4CA0BB97368A5689D9675E73\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Aggregation\"\n            },\n            \"implementation\": {\n                \"objectId\": \"078C50834B484EE29948FA9DD5300ADF\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Count\"\n            }\n        }\n    ],\n    \"aggregateFromBase\": false,\n    \"formulaJoinType\": \"inner\",\n    \"smartTotal\": \"decomposable_false\",\n    \"dataType\": {\n        \"type\": \"int64\",\n        \"precision\": 0,\n        \"scale\": 0\n    },\n    \"format\": {\n        \"header\": [\n            {\n                \"type\": \"number_category\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_decimal_places\",\n                \"value\": \"2\"\n            },\n            {\n                \"type\": \"number_thousand_separator\",\n                \"value\": \"true\"\n            },\n            {\n                \"type\": \"number_currency_symbol\",\n                \"value\": \"$\"\n            },\n            {\n                \"type\": \"number_currency_position\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_format\",\n                \"value\": \"#,##0.00;(#,##0.00)\"\n            },\n            {\n                \"type\": \"number_negative_numbers\",\n                \"value\": \"3\"\n            },\n            {\n                \"type\": \"background_fill_color\",\n                \"value\": \"3355443\"\n            },\n            {\n                \"type\": \"background_pattern_style\",\n                \"value\": \"1\"\n            },\n            {\n                \"type\": \"background_fill_style\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"background_gradient_angle\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"background_gradient_x_offset\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_fill_style\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_fill_color\",\n                \"value\": \"8388608\"\n            },\n            {\n                \"type\": \"series_gradient_angle\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_gradient_x_offset\",\n                \"value\": \"0\"\n            }\n        ],\n        \"values\": [\n            {\n                \"type\": \"number_category\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_decimal_places\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_format\",\n                \"value\": \"#,##0;(#,##0)\"\n            }\n        ]\n    },\n    \"subtotalFromBase\": false,\n    \"columnNameAlias\": \"test\",\n    \"metricFormatType\": \"reserved\",\n    \"thresholds\": []\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a metric",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a metric\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n    \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"avg([Item inventory])\"\n               }\n            ]\n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get metric definition from changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get metric definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "hierarchyId",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the metric",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the metric\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "4",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_metricId}}",
													"description": "(Required) Metric ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_metricId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a metric object."
						},
						{
							"name": "Retrieve a Metric's Definition with Advanced Properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_metricId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=1024&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1024",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get metric definition with advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get metric definition with advanced properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether the metric’s definition is returned with advanced properties.\nIf omitted or false, the advanced properties are not returned.\nIf true, the advanced properties are are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_metricId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a metric's definition."
						},
						{
							"name": "Create, Update, and Delete a Metric with Advanced Properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a metric with advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create metric with advanced properties\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_metricId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"metric\",\n      \"name\":\"test_sample_metric\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"sum([Item inventory])\"\n               }\n            ]\n   },\n       \"dimty\": {\n        \"dimtyUnits\": [\n            {\n                \"dimtyUnitType\": \"report_base_level\",\n                \"aggregation\": \"normal\",\n                \"filtering\": \"apply\",\n                \"groupBy\": true\n            }\n        ],\n        \"excludeAttribute\": false,\n        \"allowAddingUnit\": true\n    },\n    \"conditionality\": {\n        \"filter\": {\n            \"objectId\": \"E638359211D5C49EC0000C881FDA1A4F\",\n            \"subType\": \"filter\",\n            \"name\": \"Select a Quarter\"\n        },\n        \"embedMethod\": \"metric_into_report_filter\",\n        \"removeElements\": true\n    },\n    \"metricSubtotals\": [\n        {\n            \"definition\": {\n                \"objectId\": \"96C487AF4D12472A910C1ACACFB56EFB\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Total\"\n            },\n            \"implementation\": {\n                \"objectId\": \"B328C60462634223B2387D4ADABEEB53\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Average\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"078C50834B484EE29948FA9DD5300ADF\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Count\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"B328C60462634223B2387D4ADABEEB53\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Average\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"00B7BFFF967F42C4B71A4B53D90FB095\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Minimum\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"B1F4AA7DE683441BA559AA6453C5113E\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Maximum\"\n            }\n        },\n        {\n            \"definition\": {\n                \"objectId\": \"F225147A4CA0BB97368A5689D9675E73\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Aggregation\"\n            },\n            \"implementation\": {\n                \"objectId\": \"078C50834B484EE29948FA9DD5300ADF\",\n                \"subType\": \"system_subtotal\",\n                \"name\": \"Count\"\n            }\n        }\n    ],\n    \"aggregateFromBase\": false,\n    \"formulaJoinType\": \"inner\",\n    \"smartTotal\": \"decomposable_false\",\n    \"dataType\": {\n        \"type\": \"int64\",\n        \"precision\": 0,\n        \"scale\": 0\n    },\n    \"format\": {\n        \"header\": [\n            {\n                \"type\": \"number_category\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_decimal_places\",\n                \"value\": \"2\"\n            },\n            {\n                \"type\": \"number_thousand_separator\",\n                \"value\": \"true\"\n            },\n            {\n                \"type\": \"number_currency_symbol\",\n                \"value\": \"$\"\n            },\n            {\n                \"type\": \"number_currency_position\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_format\",\n                \"value\": \"#,##0.00;(#,##0.00)\"\n            },\n            {\n                \"type\": \"number_negative_numbers\",\n                \"value\": \"3\"\n            },\n            {\n                \"type\": \"background_fill_color\",\n                \"value\": \"3355443\"\n            },\n            {\n                \"type\": \"background_pattern_style\",\n                \"value\": \"1\"\n            },\n            {\n                \"type\": \"background_fill_style\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"background_gradient_angle\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"background_gradient_x_offset\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_fill_style\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_fill_color\",\n                \"value\": \"8388608\"\n            },\n            {\n                \"type\": \"series_gradient_angle\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"series_gradient_x_offset\",\n                \"value\": \"0\"\n            }\n        ],\n        \"values\": [\n            {\n                \"type\": \"number_category\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_decimal_places\",\n                \"value\": \"0\"\n            },\n            {\n                \"type\": \"number_format\",\n                \"value\": \"#,##0;(#,##0)\"\n            }\n        ]\n    },\n    \"subtotalFromBase\": false,\n    \"columnNameAlias\": \"test\",\n    \"metricFormatType\": \"reserved\",\n    \"thresholds\": [],\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[AnalyticalEngineProperties].[NullCheckingForAnalyticalEngine]\": {\n                \"name\": \"NullCheckingForAnalyticalEngine\",\n                \"type\": \"int32\",\n                \"value\": \"2\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[AnalyticalEngineProperties].[SubtotalDimensionalityAware]\": {\n                \"name\": \"SubtotalDimensionalityAware\",\n                \"type\": \"boolean\",\n                \"value\": \"true\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Function].[Null Check]\": {\n                \"name\": \"Null Check\",\n                \"type\": \"int32\",\n                \"value\": \"2\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Function].[Zero Check]\": {\n                \"name\": \"Zero Check\",\n                \"type\": \"int32\",\n                \"value\": \"1\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Report].[Count Distinct with Partitions]\": {\n                \"name\": \"Count Distinct with Partitions\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[Integer Constant In Metric]\": {\n                \"name\": \"Integer Constant In Metric\",\n                \"type\": \"int32\",\n                \"value\": \"1\",\n                \"resolvedLocation\": \"dbms\",\n                \"isInherited\": true,\n                \"nextValue\": \"0\",\n                \"nextResolvedLocation\": \"default\"\n            },\n            \"[VLDB Select].[Metric Join Type]\": {\n                \"name\": \"Metric Join Type\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[No Nulls In Metric For Cube Reuse]\": {\n                \"name\": \"No Nulls In Metric For Cube Reuse\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[Smart Metric Transformation]\": {\n                \"name\": \"Smart Metric Transformation\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[Transformable AggMetric]\": {\n                \"name\": \"Transformable AggMetric\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[Use Subtotal Dimty for Dynamic Aggregation]\": {\n                \"name\": \"Use Subtotal Dimty for Dynamic Aggregation\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether the metric’s definition is returned with advanced properties.\nIf omitted or false, the advanced properties are not returned.\nIf true, the advanced properties are are returned."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a metric with advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a metric with advanced properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[AnalyticalEngineProperties].[NullCheckingForAnalyticalEngine]\": {\n                \"value\": null\n            },\n            \"[AnalyticalEngineProperties].[SubtotalDimensionalityAware]\": {\n                \"name\": \"SubtotalDimensionalityAware\",\n                \"type\": \"boolean\",\n                \"value\": \"false\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Function].[Null Check]\": {\n                \"name\": \"Null Check\",\n                \"type\": \"int32\",\n                \"value\": \"1\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Function].[Zero Check]\": {\n                \"name\": \"Zero Check\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Report].[Count Distinct with Partitions]\": {\n                \"name\": \"Count Distinct with Partitions\",\n                \"type\": \"int32\",\n                \"value\": \"1\",\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[Integer Constant In Metric]\": {\n                \"name\": \"Integer Constant In Metric\",\n                \"type\": \"int32\",\n                \"value\": \"0\",\n                \"resolvedLocation\": \"dbms\",\n                \"isInherited\": true,\n                \"nextValue\": \"0\",\n                \"nextResolvedLocation\": \"default\"\n            },\n            \"[VLDB Select].[Metric Join Type]\": {\n                \"name\": \"Metric Join Type\",\n                \"type\": \"int32\",\n                \"value\": null,\n                \"resolvedLocation\": \"default\",\n                \"isInherited\": true\n            },\n            \"[VLDB Select].[No Nulls In Metric For Cube Reuse]\": null,\n            \"[VLDB Select].[Smart Metric Transformation]\": {}\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether the metric’s definition is returned with advanced properties.\nIf omitted or false, the advanced properties are not returned.\nIf true, the advanced properties are are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get metric definition with advanced properties from changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get metric definition with advanced properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "hierarchyId",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId?showExpressionAs=tree&showFilterTokens=true&showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether the \"condition\" in threshold is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nThe \"condition\" in threshold is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a condition's qualification.\n\"tree\": A tree data structure fully defining the condition's qualification.\n\"tokens\": A list of parsed tokens that define a condition's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned."
												},
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Specify whether the metric’s definition is returned with advanced properties.\nIf omitted or false, the advanced properties are not returned.\nIf true, the advanced properties are are returned."
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the list of applicable properties for metric",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get the list of applicable properties for metric\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/metrics/:metricId/applicableAdvancedProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"metrics",
												":metricId",
												"applicableAdvancedProperties"
											],
											"query": [
												{
													"key": "showSqlPreview",
													"value": "",
													"description": "Boolean value used to determine whether to show dynamic SQL preview or not. Set to true by default.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "metricId",
													"value": "{{rd_metricId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the metric",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the metric\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "4",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_metricId}}",
													"description": "(Required) Metric ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_metricId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a metric object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and delete metric objects through the Modeling service."
				},
				{
					"name": "Manage Prompt Objects",
					"item": [
						{
							"name": "Retrieve a Prompt Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_promptId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=New Hourly Employee&pattern=2&type=10&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "New Hourly Employee",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "10",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 10 is for prompt object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get prompt definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get prompt definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts",
												":promptId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a prompt's definition."
						},
						{
							"name": "Retrieve a Prompt Definition Within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_promptId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?name=New Hourly Employee&pattern=2&type=10&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "New Hourly Employee",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "10",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. 10 is for prompt object type."
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": null,
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": null,
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": null,
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get prompt definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get prompt definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Project ID or Changeset ID Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"disabled": true
											},
											{
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts",
												":promptId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "The response returns the definition of a single attribute.\n\n\"relationships\" is a read-only field and it returns the relationship(s) of this attribute as a set of tuples (pairs of related attributes) with their relationship type (1-N, 1-1, etc.) and corresponding relationship table.\nIt contains the same information as GET systemHierarchy/attributes/{attributeId}/relationships. \nTo update the relationship(s) of the attribute, use PUT systemHierarchy/attributes/{attributeId}/relationships.\n\nThe project ID is required to return an attribute's definition in the metadata. \nThe changeset ID is required to return an attribute's definition within a specific changeset. \nTo execute the request, either the project ID or changeset ID needs to be provided. \nIf both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API. \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a prompt's definition within a changeset."
						},
						{
							"name": "Create and Update a Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_date\",\n    \"name\": \"Pick a valid date\"\n  },\n  \"title\": \"Date\",\n  \"instruction\": \"Enter a value (Date).\",\n  \"question\": {\n    \"type\": \"date\"\n  },\n  \"defaultAnswer\": {\n    \"value\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 8,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    }\n  },\n  \"restriction\": {\n    \"required\": true,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 5,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    },\n    \"max\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 15,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a prompt\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"prompt_date\",\n    \"name\": \"Pick a Day\"\n  },\n  \"title\": \"Day\",\n  \"instruction\": \"Enter a day\",\n  \"question\": {\n    \"type\": \"date\"\n  },\n  \"restriction\": {\n    \"required\": true,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 0,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    },\n    \"max\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 29,\n          \"monthOffset\": 11,\n          \"adjustmentNone\": {}\n        }\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts",
												":promptId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Updates a specific filter in the changeset, based on the definition provided in the request body. It returns the filter's updated definition in the changeset.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a prompt's definition through the Modeling service."
						},
						{
							"name": "Create an Attribute Element Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_elements\",\n    \"name\": \"Call Center In USA\"\n  },\n  \"title\": \"Call Center In USA\",\n  \"instruction\": \"Choose elements of Call Center.\",\n  \"question\": {\n    \"attribute\": {\n      \"objectId\": \"8D679D3511D3E4981000E787EC6DE8A4\",\n      \"subType\": \"attribute\",\n      \"name\": \"Call Center\"\n    },\n    \"listAllElements\": false,\n    \"filter\": {\n      \"objectId\": \"C66FB1B411D3EB0CC000B4B2D86C964F\",\n      \"subType\": \"filter\",\n      \"name\": \"CountryInUSA\"\n    }\n  },\n  \"defaultAnswer\": {\n    \"elements\": [\n      {\n        \"display\": \"San Diego\",\n        \"elementId\": \"h2\"\n      },\n      {\n        \"display\": \"San Francisco\",\n        \"elementId\": \"h4\"\n      },\n      {\n        \"display\": \"Salt Lake City\",\n        \"elementId\": \"h6\"\n      }\n    ]\n  },\n  \"restriction\": {\n    \"required\": false,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": 2,\n    \"max\": 5\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create an attribute element prompt through the Modeling service."
						},
						{
							"name": "Create an Attribute Qualification Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_expression\",\n    \"name\": \"Prompt on Customer\"\n  },\n  \"title\": \"Prompt on Customer\",\n  \"instruction\": \"Qualify on Customer\",\n  \"expressionType\": \"attribute\",\n  \"question\": {\n    \"predefinedObjects\": [\n      {\n        \"objectId\": \"8D679D3C11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Customer\"\n      }\n    ],\n    \"displayForms\": \"custom_forms\",\n    \"customForms\": [\n      {\n        \"objectId\": \"8D67A35B11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute_form_system\",\n        \"name\": \"Customer DESC 1\"\n      },\n      {\n        \"objectId\": \"8D67A35F11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute_form_system\",\n        \"name\": \"Customer DESC 2\"\n      }\n    ]\n  },\n  \"restriction\": {\n    \"required\": false,\n    \"allowPersonalAnswers\": \"single\",\n    \"min\": 1,\n    \"max\": 5\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create an attribute qualification prompt through the Modeling service."
						},
						{
							"name": "Create a Hierarchy Qualification Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_expression\",\n    \"name\": \"Hierarchy - ListAll\"\n  },\n  \"title\": \"Hierarchies\",\n  \"instruction\": \"Choose a hierarchy to begin building a qualification.\",\n  \"expressionType\": \"hierarchy\",\n  \"question\": {\n    \"displayForms\": \"all_forms\",\n    \"listAllHierarchies\": true\n  },\n  \"restriction\": {\n    \"required\": false,\n    \"allowPersonalAnswers\": \"multiple\",\n    \"maxElementsPerSelection\": 100,\n    \"min\": 2,\n    \"max\": 5\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create a hierarchy qualification prompt through the Modeling service."
						},
						{
							"name": "Create a Metric Expression Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_expression\",\n    \"name\": \"Metric Prompt with Custom Expression\"\n  },\n  \"title\": \"Metric qualification\",\n  \"instruction\": \"Choose a metric to begin building a qualification.\",\n  \"expressionType\": \"metric\",\n  \"question\": {\n    \"predefinedObjects\": [\n      {\n        \"objectId\": \"7FD5B69611D5AC76C000D98A4CC5F24F\",\n        \"subType\": \"metric\",\n        \"name\": \"Cost\"\n      },\n      {\n        \"objectId\": \"381980B211D40BC8C000C8906B98494F\",\n        \"subType\": \"metric\",\n        \"name\": \"Discount\"\n      }\n    ]\n  },\n  \"restriction\": {\n    \"required\": false,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": 3,\n    \"max\": 10\n\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create a metric expression prompt through the Modeling service."
						},
						{
							"name": "Create an Object Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_objects\",\n    \"name\": \"Search all\"\n  },\n  \"title\": \"Objects\",\n  \"instruction\": \"Choose objects from the list.\",\n  \"question\": {\n    \"search\": {\n      \"objectId\": \"059DE5524A48B497B8D3B6890F7EBA32\",\n      \"subType\": \"search\",\n      \"name\": \"All Public Objects\"\n    }\n  },\n  \"restriction\": {\n    \"required\": false,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": 2\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create an object prompt through the Modeling service."
						},
						{
							"name": "Create a Value Prompt",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create the prompt\", function() {",
													"    pm.response.to.have.status(201);",
													"    const prompt = pm.response.json()",
													"    pm.environment.set(\"rd_promptId\", prompt.information.objectId)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"prompt_date\",\n    \"name\": \"Pick a valid date\"\n  },\n  \"title\": \"Date\",\n  \"instruction\": \"Enter a value (Date).\",\n  \"question\": {\n    \"type\": \"date\"\n  },\n  \"defaultAnswer\": {\n    \"value\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 8,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    }\n  },\n  \"restriction\": {\n    \"required\": true,\n    \"allowPersonalAnswers\": \"none\",\n    \"min\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 5,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    },\n    \"max\": {\n      \"dynamicDateTime\": {\n        \"type\": \"date\",\n        \"date\": {\n          \"mode\": \"dynamic\",\n          \"dayOffset\": 15,\n          \"monthOffset\": 0,\n          \"adjustmentNone\": {}\n        }\n      }\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/prompts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"prompts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the prompt",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the prompt\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "10",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 10 is for prompt object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create a value prompt through the Modeling service."
						}
					],
					"description": "You can use REST API requests to retrieve, create, update, and delete the prompt objects through the Modeling service."
				},
				{
					"name": "Manage Security Filter Objects",
					"item": [
						{
							"name": "Prepare User and User Group",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get test user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get users to add to group\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const userList = pm.response.json();",
													"    pm.expect(userList.length!==0).to.be.true;",
													"    const lastUserId = userList[userList.length-1].id",
													"    pm.environment.set(\"rd_userId\", lastUserId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users?abbreviationBegins=testuser&fields=id,name,abbreviation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "test",
													"description": "Characters that the user name must begin with.",
													"disabled": true
												},
												{
													"key": "abbreviationBegins",
													"value": "testuser",
													"description": "Characters that the user abbreviation must begin with."
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0\n\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "id",
													"value": null,
													"description": "List of User ids",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "id,name,abbreviation"
												}
											]
										},
										"description": "Get information for a specific set of users. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the set of users to be returned with query parameters that specify the characters that the user name or abbreviation must begin with. You can use other query parameters to limit the results that are returned by specifying a starting point within the results and the maximum number of results that should be returned."
									},
									"response": []
								},
								{
									"name": "Create a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create user\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const userObj = pm.response.json();",
													"    pm.environment.set(\"rd_userId\", userObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fullName\": \"Test User\",\n    \"username\": \"testuser\",\n    \"description\": \"A test user\",\n    \"password\": \"12345678\",\n    \"enabled\": true,\n    \"passwordModifiable\": true,\n    \"requireNewPassword\": false,\n    \"standardAuth\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new user. The response includes the user ID, which other endpoints use as a request parameter to specify the user to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new user in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Update info for a specific user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update user priveleges\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/privileges\",\n      \"value\": [\n        \"267\", \"18\"\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Update specific information for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users. You specify the type of update operation (add, replace or remove), provide the value to be used in the update operation, and specify the path to the target where the update operation will be performed, in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Create a user group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create usergroup\", function () {",
													"    pm.response.to.have.status(201); //should be 201 if user is created",
													"    const groupObj = pm.response.json();",
													"    pm.environment.set(\"rd_usergroupId\", groupObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestUserGroup\",\n    \"description\": \"A test user group\"\n\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/usergroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Create a new user group. The response includes the usergroup ID, which other endpoints use as a request parameter to specify the user group to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information to create the user group in the body parameter of the request - including the name and description of the user group, the IDs of parent user groups, and the IDs of child users or user groups."
									},
									"response": []
								},
								{
									"name": "Add members and update group information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"add members and update group info\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n         \"op\": \"replace\",\n         \"path\": \"/description\",\n         \"value\": \"Software Engineers\"\n        },\n        {\n        \"op\": \"add\",\n        \"path\": \"/members\",\n        \"value\": [\"{{rd_userId}}\"]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Update specific information for a specific user group. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user group by specifying the usergroup ID in the path of the request; you obtain the usergroup ID using GET /usergroups. You specify the type of update operation (add, replace or remove), provide the value to be used in the update operation, and specify the path to the target where the update operation will be performed, in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a New Security Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new changeset for modeling manipulations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"create new changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    const response = pm.response.json();",
													"    pm.environment.set(\"rd_changesetId\", response.id);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. \nThis request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.).\nA changeset maintains an indivisible group of creations or modifications on modeling objects. \nEventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. \n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create security filter\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const securityFilter = pm.response.json();",
													"    pm.environment.set(\"rd_securityFilterId\", securityFilter.information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"md_security_filter\",\n    \"name\": \"Subcategory in Audio Equiptment and Cameras\",\n    \"destinationFolderId\": \"98FE182C2A10427EACE0CD30B6768258\"\n  },\n  \"qualification\": {\n    \"tree\": {\n      \"type\": \"predicate_element_list\",\n      \"predicateTree\": {\n        \"attribute\": {\n          \"objectId\": \"8D679D4F11D3E4981000E787EC6DE8A4\",\n          \"subType\": \"attribute\",\n          \"name\": \"Subcategory\"\n        },\n        \"elements\": [\n          {\n            \"display\": \"Audio Equipment\",\n            \"elementId\": \"h21\"\n          },\n          {\n            \"display\": \"Cameras\",\n            \"elementId\": \"h22\"\n          }\n        ],\n        \"function\": \"in\"\n      }\n    }\n  },\n  \"topLevel\": [],\n  \"bottomLevel\": []\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/securityFilters?showFilterTokens=true&showExpressionAs=tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"securityFilters"
											],
											"query": [
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\n\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\n\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \n\nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \n\nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\n\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											]
										},
										"description": "Creates a new security filter in the changeset, based on the definition provided in request body. The definition of the newly created security filter is returned in response.\n\nIn the request body, \"qualification\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used.\nFor custom expressions, \"expression\" needs to be in either \"tree\" or \"tokens\" format. If both are provided, only \"tree\" is used. For inline custom expressions, only the \"tree\" format is supported.\n\n* Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created security filter to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Retrieve security filter definition within changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security filter's members\", function () {",
													"    pm.response.to.have.status(200);",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/securityFilters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"securityFilters",
												":id"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": null,
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityFilterId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:ChangesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":ChangesetId",
												"commit"
											],
											"variable": [
												{
													"key": "ChangesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID\n"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:ChangesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":ChangesetId"
											],
											"variable": [
												{
													"key": "ChangesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID\n"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create a new security filter."
						},
						{
							"name": "Security Filter User Management",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for security filter\", function () {",
													"    pm.response.to.have.status(200);",
													"    const securityFilter = pm.response.json().result[0];",
													"    pm.environment.set(\"rd_securityFilterId\", securityFilter.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=58&pattern=2&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "type",
													"value": "58",
													"description": "You can use object type or object subtype. https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectSubTypes.html"
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html"
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "false",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove a member from security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"remove from security filter's members\", function () {",
													"    pm.response.to.have.status(204);",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"operationList\":\n  [{\"op\":\"removeElements\",\n    \"path\":\"/members\",\n    \"value\":[\n      \"{{rd_userId}}\"]\n  }]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/securityFilters/:id/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityFilters",
												":id",
												"members"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityFilterId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a member to a security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"add to security filter's members\", function () {",
													"    pm.response.to.have.status(204);",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"operationList\":\n  [{\"op\":\"addElements\",\n    \"path\":\"/members\",\n    \"value\":[\n      \"{{rd_userId}}\"]\n  }]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/securityFilters/:id/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityFilters",
												":id",
												"members"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityFilterId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get User's and Usergroup's Security Filters",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of user groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of user groups\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_usergroupId\", pm.response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups?nameBegins=TestUserGroup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "TestUserGroup",
													"description": "Characters that the name must begin with"
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Used to control paging behavior. Use -1 for no limit (subject to Governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get members of user group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get members of user group\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.collectionVariables.set(\"rd_userId\", pm.response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:usergroupId/members?securityFilter=true&projectId={{projectId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":usergroupId",
												"members"
											],
											"query": [
												{
													"key": "securityFilter",
													"value": "true",
													"description": "Specifies whether to return security filter information\n\nDefault value : false"
												},
												{
													"key": "projectId",
													"value": "{{projectId}}",
													"description": "Project ID"
												},
												{
													"key": "includeAccess",
													"value": null,
													"description": "Specifies whether to return access for members\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "flatMembers",
													"value": null,
													"description": "Specifies whether to flatten the members to user level\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "usergroupId",
													"value": "{{rd_usergroupId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get security filters for user group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security filters for user group\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:usergroupId/securityFilters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":usergroupId",
												"securityFilters"
											],
											"query": [
												{
													"key": "projects.id",
													"value": null,
													"description": "Project id collection which is used for filtering data, for example 'B19DEDCC11D4E0EFC000EB9495D0F6E2,A232EDCC11D4E0EFC000EB9495D0F6E2'",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "usergroupId",
													"value": "{{rd_usergroupId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get security filters for user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security filters for user\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id/securityFilters?projects.id={{projectId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id",
												"securityFilters"
											],
											"query": [
												{
													"key": "projects.id",
													"value": "{{projectId}}",
													"description": "Project id collection which is used for filtering data, for example 'B19DEDCC11D4E0EFC000EB9495D0F6E2,A232EDCC11D4E0EFC000EB9495D0F6E2'"
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for security filter\", function () {",
													"    pm.response.to.have.status(200);",
													"    const securityFilter = pm.response.json().result[0];",
													"    pm.environment.set(\"rd_securityFilterId\", securityFilter.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=58&pattern=2&getAncestors=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "type",
													"value": "58",
													"description": "You can use object type or object subtype. https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectSubTypes.html"
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "https://www2.microstrategy.com/producthelp/Current/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html"
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "ALL, NOT_CERTIFIED_ONLY, CERTIFIED_ONLY, OFF",
													"disabled": true
												},
												{
													"key": "root",
													"value": "",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "true",
													"description": "Specifies whether to return the list of ancestors for each object\n\nDefault value : false"
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "-1",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "false",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve security filter definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security filter's members\", function () {",
													"    pm.response.to.have.status(200);",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required)",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/securityFilters/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"securityFilters",
												":id"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": null,
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": null,
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\n\nA filter's \"qualification\" is presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing a filter's qualification.\n\"tree\": A tree data structure fully defining the filter's qualification.\n\"tokens\": A list of parsed tokens that define a filter's qualification. Be aware that generating tokens requires additional time.\nIf omitted or false, only \"text\" and \"tree\" formats are returned.\n\nIf true, all \"text\", \"tree\" and \"tokens\" formats are returned.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityFilterId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve security filter's member",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security filter's members\", function () {",
													"    pm.response.to.have.status(200);",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/securityFilters/:id/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityFilters",
												":id",
												"members"
											],
											"query": [
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityFilterId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve the security filter's applied to a user or a user group."
						},
						{
							"name": "Use Security Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a report instance and get the results",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Create a new changeset for modeling manipulations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													" pm.test(\"create new changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    const response = pm.response.json();",
													"    pm.environment.set(\"rd_changesetId\", response.id);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. \nThis request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.).\nA changeset maintains an indivisible group of creations or modifications on modeling objects. \nEventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. \n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Login as test user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"configure session\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\", pm.response.headers.get('X-MSTR-AuthToken'));",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"12345678\",\n    \"loginMode\": 1\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Create a report instance and get the results",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create report instance\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Prefer",
												"value": "",
												"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/reports/:reportId/instances?offset=0&limit=1000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"reports",
												":reportId",
												"instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned results. Used to control paging behavior."
												},
												{
													"key": "limit",
													"value": "1000",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
												},
												{
													"key": "standardDateFormat",
													"value": null,
													"description": "Standard date format in ISO8601",
													"disabled": true
												},
												{
													"key": "standardRawDateFormat",
													"value": null,
													"description": "Standard raw date format in ISO8601",
													"disabled": true
												},
												{
													"key": "executionStage",
													"value": null,
													"description": "The execution stage the report is executed to. Available values: resolve_prompts, execute_data.\n\nDefault value : execute_data",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "{{rd_reportId}}"
												}
											]
										},
										"description": "Get the results of a newly created report instance. This in-memory report instance can be used by other requests.\nYou obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET/projects. You pass the authorization token and the project ID in the request header. You specify the report ID in the pathof the request.You use the offset and limit query parameters in the request to determine the report data displayed on the page. In the body parameter of the request, you specify the data to be included in the report instance, such as attributes,metrics, view filter, metric limits, thresholds and sorting criteria."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create a user and assign a security filter to the user. The workflow also demonstrates running the report instance on your account compared to the test user's account where the security filter was applied.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"//Report: Executive Business User Data",
											"pm.environment.set(\"rd_reportId\",\"B7E14BD6439AC1F680AD298860D1F16D\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Clean Up User, User Group and Security Filter",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete created user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete created user\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Delete user for specific user id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request;you obtain the user ID using GET /users. "
									},
									"response": []
								},
								{
									"name": "Delete specific user group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete created user group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Delete user group for specific user group id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user group ID in the path of the request;you obtain the user ID using GET /usersgroups. "
									},
									"response": []
								},
								{
									"name": "Delete created security filter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete created security filter\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:securityFilterId?type=58",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":securityFilterId"
											],
											"query": [
												{
													"key": "type",
													"value": "58",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
												}
											],
											"variable": [
												{
													"key": "securityFilterId",
													"value": "{{rd_securityFilterId}}"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_usergroupId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "A workflow sample for managing user groups in the metadata is provided below. The following sequence of REST API requests allows an administrative user to create and update a user group, and optionally get information about the user group to confirm the creation and updates."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update security filter objects through the Modeling service."
				},
				{
					"name": "Manage Subtotal Objects",
					"item": [
						{
							"name": "Retrieve a Subtotal's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get quick search results in a list format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get quick search results\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_subtotalId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=1025&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name).",
													"disabled": true
												},
												{
													"key": "pattern",
													"value": "2",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
												},
												{
													"key": "type",
													"value": "1025",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter. "
												},
												{
													"key": "limit",
													"value": "100",
													"description": "Maximum number of items returned for a single request. Use -1 for no limit."
												},
												{
													"key": "root",
													"value": "{{publicObjectsFolderId}}",
													"description": "Folder ID of the root folder where the search will be performed.",
													"disabled": true
												},
												{
													"key": "getAncestors",
													"value": "false",
													"description": "Specifies whether to return the list of ancestors for each object",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
													"disabled": true
												},
												{
													"key": "certifiedStatus",
													"value": "ALL",
													"description": "Defines a search criteria based on the certified status of the object",
													"disabled": true
												},
												{
													"key": "isCrossCluster",
													"value": "false",
													"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
													"disabled": true
												},
												{
													"key": "viewMedia",
													"value": "",
													"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
													"disabled": true
												},
												{
													"key": "result.hidden",
													"value": "",
													"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "",
													"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get subtotal definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get subtotal definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/subtotals/:subtotalId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"subtotals",
												":subtotalId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											],
											"variable": [
												{
													"key": "subtotalId",
													"value": "{{rd_subtotalId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_subtotalId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a subtotal's definition."
						},
						{
							"name": "Create, Update, and Delete a Subtotal",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a subtotal",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create subtotal\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_subtotalId\", pm.response.json().information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"information\":{\n      \"subType\":\"metric_subtotal\",\n      \"name\":\"sample_subtotal\",\n      \"destinationFolderId\":\"{{publicReportsFolderId}}\"\n   },\n   \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"sum(x)\"\n               }\n            ]\n   },\n       \"dimty\": {\n        \"dimtyUnits\": [\n            {\n                \"dimtyUnitType\": \"report_base_level\"\n            }\n        ]\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/subtotals?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"subtotals"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a subtotal",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a subtotal\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "(Required) Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n    \"expression\":{\n          \"tokens\":[\n               {\n                  \"value\":\"avg([Item inventory])\"\n               }\n            ]\n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/subtotals/:subtotalId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"subtotals",
												":subtotalId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "subtotalId",
													"value": "{{rd_subtotalId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "Creates a new user hierarchy in the changeset, based on the definition provided in request body. The definition of the newly created user hierarchy is returned in response.\n\nUser hierarchies have different subtypes. Currently, we support the following subtypes:\n * dimension_user: This user hierarchy is for drilling.\n * dimension_user_hierarchy: This user hierarchy is for browsing.\n\nIn the request body, there are four main parts:\n * Information: Stores basic user hierarchy information such as name, subType, destinationFolderId, etc. name is required field.\n * UseAsDrillHierarchy: This Boolean field indicates the user hierarchy subtype. False means the subtype is dimension_user_hierarchy; otherwise, it is dimension_user. This field is required.\n * Attributes: Stores the hierarchy attributes for the user hierarchy in a list. Each hierarchy attribute contains an objectId, name, entryPoint, filters, elementDisplayOption, and limit. objectId, entryPoint, and elementDisplayOption are required fields. \n * Relationships: Stores the hierarchy relationships for the user hierarchy in a list. Each hierarchy relationship contains parent, and child. parent and child are required fields.\n\nEach user hierarchy should have at least one entry attribute for browsing. The entryPoint field in a hierarchy attribute is Boolean. It indicates whether the current attribute is a single entry point attribute.\n\nUsers can define filters and element display options to control element display for each hierarchy attribute.\n\nElementDisplayOption contains the following values:\n  * all_elements: This attribute shows all elements when browsing.\n  * no_elements: This attribute does not show any elements when browsing.\n  * limited_elements: This attribute shows limited elements when browsing, within the defined limit. The limit field is only required for limited_elements.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created user hierarchy to the metadata, commit using the changeset commit API.\n"
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get subtotal definition from changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get subtotal definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/subtotals/:subtotalId?showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"subtotals",
												":subtotalId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response.\n\nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc.\n\nExpressions are presented in the following formats:\n\n\"text\": A human readable, but non-parsable text, describing the expression. This is the default format that is always returned in the response.\n\n\"tree\": A tree data structure fully defining the expression. This format can be used if you want to examine and modify the expression programmatically.\n\n\"tokens\": A list of parsed tokens. This format can be used if you want to examine and modify the expression using the parser component. Note that generating tokens requires additional time.\n\nTokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\n\nIf omitted, the expression is returned in \"text\" format.\n\nIf tree, the expression is returned in \"text\" and \"tree\" formats.\n\nIf tokens, the expression is returned in \"text\" and \"tokens\" formats.\n\nAvailable values : tokens, tree"
												}
											],
											"variable": [
												{
													"key": "subtotalId",
													"value": "{{rd_subtotalId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the subtotal",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the subtotal\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "4",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_subtotalId}}",
													"description": "(Required) Subtotal ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_subtotalId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a subtotal object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and delete subtotal metric objects through the Modeling service."
				},
				{
					"name": "Manage Table Objects",
					"item": [
						{
							"name": "Retrieve and Update a Table's Definiton",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of available table objects",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get all tables\", function () {",
													"    pm.response.to.have.status(200);",
													"    table = pm.response.json().tables[0].information;",
													"    tableId = table.objectId;",
													"    tableName = table.name;",
													"    pm.environment.set(\"rd_tableId\", tableId);",
													"    pm.environment.set(\"rd_tableName\", tableName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required)",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"description": "The maximum number of objects that can be returned by this method.\n\nIf this property is not provided, all available objects are returned.\n\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Use this parameter to page through large result lists. Setting it to 0 (or not providing the parameter) starts at the beginning of the object list.",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get a table's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update table definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Requried)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"Table Name (New)\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Revert table to original definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Restore table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"{{rd_tableName}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"equals": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve and update an existing table through the Modeling service."
						},
						{
							"name": "Create a New Table Object",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create new table object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create new table\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    tableId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_tableId\", tableId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"physicalTable\": {\n        \"sqlStatement\": \"select CUST_CITY_ID, TOT_COST from dbo.CUST_CTR_SLS\",\n        \"columns\": [\n            {\n                \"dataType\": {\n                    \"type\": \"integer\",\n                    \"precision\": 2,\n                    \"scale\": 0\n                },\n                \"columnName\": \"CUST_CITY_ID\"\n            },\n            {\n                \"dataType\": {\n                    \"type\": \"double\",\n                    \"precision\": 0,\n                    \"scale\": 0\n                },\n                \"columnName\": \"TOT_COST\"\n            }\n        ],\n        \"type\": \"sql\"\n    },\n    \"primaryDataSource\": {\n        \"objectId\": \"DAD6CAD6457DAF29E34463961688EA60\"\n    },\n    \"encloseSqlInParentheses\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "checkSecondaryDataSourceTable",
													"value": null,
													"description": "If set to true, the API finds compatible tables in the project. If a compatible table is found, the compatible table object information is returned. The caller can call PATCH /model/tables/{tableID}/ to set a secondaryDatasources for the compatible table. If no table is found, a new table is created.\n\nIf set to false, a new table is created.\n\nThis parameter has no effect on creating a freeform SQL table.",
													"disabled": true
												},
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type",
													"disabled": true
												},
												{
													"key": "tablePrefixOption",
													"value": null,
													"description": "The following options define the table prefix:\n\nnone: do not set table prefix.\nadd_default_prefix: this option applies the default prefix setting on warehouse catalog.\nadd_namespace: create a prefix same with namespace.\nThis param has no effect on a free form SQL table.\n\nAvailable values : none, add_default_prefix, add_namespace",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{changesetID}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"equals": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Revert schema changes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Revert schema changes\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:tableId?type=15",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":tableId"
											],
											"query": [
												{
													"key": "type",
													"value": "15"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create a new table object through the Modeling service."
						},
						{
							"name": "Retrieve, Create and Update a SAP HANA Table",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get a SAP HANA table's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_tableName\",JSON.stringify(pm.response.json().physicalTable.tableName));",
													"    pm.environment.set(\"rd_namespace\",JSON.stringify(pm.response.json().physicalTable.namespace));",
													"    pm.environment.set(\"rd_objectId\",JSON.stringify(pm.response.json().primaryDataSource.objectId));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new SAP HANA table",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create new table\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    tableId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_tableId\", tableId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"new Table\"\n    },\n    \"primaryDataSource\": {\n        \"objectId\": {{rd_objectId}}\n    },\n    \"physicalTable\": {\n        \"tableName\": {{rd_tableName}},\n        \"namespace\": {{rd_namespace}}\n    }\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "checkSecondaryDataSourceTable",
													"value": null,
													"description": "If set to true, the API finds compatible tables in the project. If a compatible table is found, the compatible table object information is returned. The caller can call PATCH /model/tables/{tableID}/ to set a secondaryDatasources for the compatible table. If no table is found, a new table is created.\n\nIf set to false, a new table is created.\n\nThis parameter has no effect on creating a freeform SQL table.",
													"disabled": true
												},
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type",
													"disabled": true
												},
												{
													"key": "tablePrefixOption",
													"value": null,
													"description": "The following options define the table prefix:\n\nnone: do not set table prefix.\nadd_default_prefix: this option applies the default prefix setting on warehouse catalog.\nadd_namespace: create a prefix same with namespace.\nThis param has no effect on a free form SQL table.\n\nAvailable values : none, add_default_prefix, add_namespace",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SAP HANA parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Requried)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sapHanaParameters\": [\n        {\n            \"name\": \"{{saphana_param_1}}\",\n            \"prompt\": {\n                \"objectId\": \"{{saphana_target_prompt_1}}\"\n            }\n        },\n        {\n            \"name\": \"{{saphana_param_2}}\",\n            \"prompt\": {\n                \"objectId\": \"{{saphana_target_prompt_2}}\"\n            }\n        },\n        {\n            \"name\": \"{{saphana_param_3}}\",\n            \"prompt\": {\n                \"objectId\": \"{{saphana_target_prompt_3}}\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "View the updated SAP HANA table",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset SAP HANA parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Requried)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sapHanaParameters\": [\n        {\n            \"name\": \"{{saphana_param_1}}\",\n            \"prompt\": {\n                \"objectId\": \"\"\n            }\n        },\n        {\n            \"name\": \"{{saphana_param_2}}\",\n            \"prompt\": {\n                \"objectId\": null\n            }\n        },\n        {\n            \"name\": \"{{saphana_param_3}}\",\n            \"prompt\": {\n                \"objectId\": null\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "View the SAP HANA table with default parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"equals": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Revert schema changes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Revert schema changes\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											},
											{
												"key": "id",
												"value": "{{tableID}}",
												"equals": true,
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:tableId?type=15",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":tableId"
											],
											"query": [
												{
													"key": "type",
													"value": "15"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"    pm.environment.unset(\"rd_tableName\");",
													"    pm.environment.unset(\"rd_objectId\");",
													"    pm.environment.unset(\"rd_namespace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve, create and update an existing SAP HANA table through the Modeling service."
						},
						{
							"name": "Retrieve and Update a prompt of a SAP HANA Table with Input Parameters",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Get a SAP HANA table's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_tableName\",JSON.stringify(pm.response.json().physicalTable.tableName));",
													"    pm.environment.set(\"rd_namespace\",JSON.stringify(pm.response.json().physicalTable.namespace));",
													"    pm.environment.set(\"rd_objectId\",JSON.stringify(pm.response.json().primaryDataSource.objectId));",
													"    pm.environment.set(\"rd_promptId\",pm.response.json().sapHanaParameters[0].prompt.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new SAP HANA table",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create new table\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_tableId\", pm.response.json().information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"new Table\"\n    },\n    \"primaryDataSource\": {\n        \"objectId\": {{rd_objectId}}\n    },\n    \"physicalTable\": {\n        \"tableName\": {{rd_tableName}},\n        \"namespace\": {{rd_namespace}}\n    }\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "checkSecondaryDataSourceTable",
													"value": null,
													"description": "If set to true, the API finds compatible tables in the project. If a compatible table is found, the compatible table object information is returned. The caller can call PATCH /model/tables/{tableID}/ to set a secondaryDatasources for the compatible table. If no table is found, a new table is created.\n\nIf set to false, a new table is created.\n\nThis parameter has no effect on creating a freeform SQL table.",
													"disabled": true
												},
												{
													"key": "columnMergeOption",
													"value": null,
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4). To be consistent, columns' data types are modified in following ways:\n\nreuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\nreuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\nreuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate copy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n\nAvailable values : reuse_any, reuse_compatible_data_type, reuse_matched_data_type",
													"disabled": true
												},
												{
													"key": "tablePrefixOption",
													"value": null,
													"description": "The following options define the table prefix:\n\nnone: do not set table prefix.\nadd_default_prefix: this option applies the default prefix setting on warehouse catalog.\nadd_namespace: create a prefix same with namespace.\nThis param has no effect on a free form SQL table.\n\nAvailable values : none, add_default_prefix, add_namespace",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the new SAP HANA table's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_promptId\",pm.response.json().sapHanaParameters[0].prompt.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve a Prompt of the SAP HANA Table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get SAP HANA table prompt\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId",
												"prompts",
												":promptId"
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID\n\nThe ID can be:\n\nthe object ID used in metadata.\nthe object ID used in changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "This API returns the definition of a single prompt. The prompt should exist in the prompt list of the table. You may use GET `/api/model/tables/{tableId}` API and check the `sapHanaParameters` field to view the list of existing prompts. It should be noted that currently this API only suits SAP HANA tables with input parameters, because only these tables have prompts, and one input parameter corresponds to one very prompt. Meanwhile, user should have read access to the table.\n\nThe project ID is required to return a prompt's definition in metadata. The changeset ID is required to return a prompt's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID is for returning a prompt's definition within a specific changeset. It can be obtained using the changeset creation API. An authorization token is for executing the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Update a Prompt of the SAP HANA Table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update SAP HANA table prompt\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"subType\": \"prompt_string\",\n        \"name\": \"new_name\"\n    },\n    \"title\": \"new title\",\n    \"instruction\": \"new instruction\",\n    \"restriction\": {\n        \"required\": true,\n        \"allowPersonalAnswers\": \"none\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId",
												"prompts",
												":promptId"
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID\n\nThe ID can be:\n\nthe object ID used in metadata.\nthe object ID used in changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "This API updates a specific prompt in the changeset, based on the definition provided in the request body. It returns the prompt's updated definition in the changeset. It should be noted that this API only suits SAP HANA tables with input parameters, because only these tables have prompts, and one input parameter corresponds to one very prompt. In addition, the prompt should exist in the prompt list of the table. You may use GET `/api/model/tables/{tableId}` API and check the `sapHanaParameters` field to view the list of existing prompts. Basically, read access to the table will be checked. If the prompt is a managed object, write access to the table is also required. The Modeling server performs a full validation for each part of the body. If something is wrong, an error will be reported.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the change in the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "View the updated prompt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get SAP HANA table prompt\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"description": "Changeset ID\n",
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId/prompts/:promptId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId",
												"prompts",
												":promptId"
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												},
												{
													"key": "promptId",
													"value": "{{rd_promptId}}",
													"description": "(Required) Prompt ID\n\nThe ID can be:\n\nthe object ID used in metadata.\nthe object ID used in changeset, but not yet committed to metadata."
												}
											]
										},
										"description": "This API returns the definition of a single prompt. The prompt should exist in the prompt list of the table. You may use GET `/api/model/tables/{tableId}` API and check the `sapHanaParameters` field to view the list of existing prompts. It should be noted that currently this API only suits SAP HANA tables with input parameters, because only these tables have prompts, and one input parameter corresponds to one very prompt. Meanwhile, user should have read access to the table.\n\nThe project ID is required to return a prompt's definition in metadata. The changeset ID is required to return a prompt's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID is for returning a prompt's definition within a specific changeset. It can be obtained using the changeset creation API. An authorization token is for executing the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "View the updated SAP HANA table",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get table definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": null,
													"description": "Specify what additional information is returned. Only \"acl\" is supported.\n\nIf acl, the access control list for each object is included.\nAvailable values : acl",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. By default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element), only the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "SAP HANA table ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"equals": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Revert schema changes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Revert schema changes\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text"
											},
											{
												"key": "id",
												"value": "{{tableID}}",
												"equals": true,
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:tableId?type=15",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":tableId"
											],
											"query": [
												{
													"key": "type",
													"value": "15"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"    pm.environment.unset(\"rd_promptId\");",
													"    pm.environment.unset(\"rd_tableName\");",
													"    pm.environment.unset(\"rd_objectId\");",
													"    pm.environment.unset(\"rd_namespace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve and update an existing prompt of a SAP HANA table through the Modeling service."
						},
						{
							"name": "Create, Retrieve, and Update a Warehouse Partition Mapping Table",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a WHPM table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a logical table\", function () {",
													"    pm.response.to.have.status(201);",
													"    const tableId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_tableId\", tableId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"New WHPM Table\"\n    },\n    \"primaryDataSource\": {\n        \"objectId\": \"F0C9E02B4C56D68F9D8176A7FBADCFF3\"\n    },\n    \"physicalTable\": {\n        \"tableName\": \"pmt_inventory_01\",\n        \"namespace\": \"public\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables?showFilterTokens=false&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "checkSecondaryDataSourceTable",
													"value": "true",
													"description": "If set to true, the API finds compatible tables in the project. If a compatible table is found, the compatible table object information is returned.\nThe caller can call PATCH /model/tables/{tableID}/ to set a secondaryDatasources for the compatible table. If no table is found, a new table is created.\n\nIf set to false, a new table is created.\n\nThis parameter has no effect on creating a freeform SQL table.\n",
													"disabled": true
												},
												{
													"key": "columnMergeOption",
													"value": "reuse_compatible_data_type",
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4).\nTo be consistent, columns' data types are modified in following ways:\n\n* reuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\n* reuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\n* reuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate\ncopy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\n\nIf this value is not set, use the option that set on DBRole catalog setting.\n",
													"disabled": true
												},
												{
													"key": "tablePrefixOption",
													"value": "none",
													"description": "The following options define the table prefix:\n  - none: do not set table prefix.\n  - add_default_prefix: this option applies the default prefix setting on warehouse catalog.\n  - add_namespace: create a prefix same with namespace.\n\nThis param has no effect on a free form SQL table.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "false",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											]
										},
										"description": "This API creates a logical table in the changeset, and returns a new logical table definition with specific field information. Normal tables, FFSQL tables, and partition mapping tables are all supported.For partition mapping tables, both Warehouse Partition Mapping (WHPM) and Metadata Partition Mapping (MDPM) are supported.\n\nWhen creating a normal table or warehouse partition mapping table, the request body must include a physical table definition. If _type_ is not specified in the physical table definition, the API creates a normal table by default. If a logical table that refers to the same warehouse physical table already exists in the project, the API creates a new logical table, copying from the existing one. If a normal logical table exists in the project with the same data source information, namespace, and table name, the API creates a normal table alias. If the caller wants to use the table alias explicitly, pass an existing physical table ID in the request body. A freeform SQL table alias can only be created by passing an existing freeform SQL physical table ID in the request body. When the changeset is committed, all the new logical tables are created under folder _schema objects/tables_.\n\nMetadata partition mapping table is different from other kinds of tables. It is a group of existing normal logical tables, which are called partition base tables. It does not have physical tables, and it cannot have table alias. Each partition base table must define a partition filter which is attribute qualification. The attributes in the filter can be any standalone attribute. Partition filter is a standalone system object saved to _System Objects\\\\Partition Filters_. You may use _showExpressionAs_ and _showFilterTokens_ parameters for partition filters. When the changeset is committed, metadata partition mapping table can be saved to any location by specifying the destination folder ID in the request body. If not given _destinationFolderId_, the newly created table will fallback to _Schema Objects\\\\Tables_ folder.\n\nFor all kinds of tables, the table name cannot be duplicated within the project.\n\nA changeset ID is required to execute the request and can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo add the newly created table to metadata, commit using the **POST** **/model/{changesetId}/commit** API."
									},
									"response": []
								},
								{
									"name": "Update a WHPM table",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"Updated WHPM Table\"\n    },\n    \"logicalSize\": 10,\n    \"isLogicalSizeLocked\": true,\n    \"partitionLevel\": [\n        {\n            \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n            \"subType\": \"attribute\",\n            \"name\": \"Quarter\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": "reuse_compatible_data_type",
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4).\nTo be consistent, columns' data types are modified in following ways:\n\n* reuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\n* reuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\n* reuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate\ncopy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\n\nIf this value is not set, use the option that set on DBRole catalog setting.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "This API updates a detailed definition for a specified (logical) table in the changeset.\n\nFor a normal logical table or a warehouse partition mapping table, you can update the following: the logical table name in the information field, isTrueKey, logicalSize, isLogicalSizeLocked, primaryDatasource, secondaryDatasource field, prompt ids in sapHanaParameters field, physical table object name, physical table name, and the table prefix in physicalTable field. When the primaryDatasource or secondaryDatasource of this logical table is updated, the related primaryDatasource or secondaryDatasource of all other logical tables that share the same physical table with this logical table are updated.\n\nFor a freeform SQL table, you can update the following: the logical table name in the information field, isTrueKey, logicalSize, isLogicalSizeLocked, primaryDatasource, encloseSqlInParentheses field, physical table object name, sqlStatement, and columns in physicalTable field. The primaryDatasource change will not affect other logical tables that share the same physical table with this logical table.\n\nFor a metadata partition mapping table, you can update the logical table name in the information field, logicalSize, isLogicalSizeLocked, partition base tables and their partition filters in partitionTables field.\n\nFor all kinds of tables, the table name cannot be duplicated within the project.\n\nThe response contains the updated definition and specific field information of the logical table.\n\nA changeset ID is required to execute the request and can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo update the detailed definition for the specified table to metadata, commit using the **POST** **/model/{changesetId}/commit** API."
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{changesetID}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve a WHPM table",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "Changeset ID\n"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId?showFilterTokens=true&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "true",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "This API gets a detailed definition for a specified (logical) table.\n\nThe project ID is required to return a table's definition in metadata. The changeset ID is required to return a table's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nA _physical table_ describes the metadata of a warehouse table. It contains a set of columns with a schema definition. A logical table describes the higher-level data model objects (_facts_, _attributes_, etc.) that the architect wants to use to model the contents of the physical table. If the caller sets the fields parameter, then the response contains the specified fields information. For example, if the caller specifies the PhysicalTable field, the response contains a PhysicalTable field for each table. By default, only the information field is returned.\n\nA changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{changesetID}}"
											},
											{
												"key": "changesetId",
												"value": "{{changesetID}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create, retrieve, and update a warehouse partition mapping (WHPM) table object through the Modeling service."
						},
						{
							"name": "Create, Retrieve, and Update a Metadata Partition Mapping Table",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create a MDPM table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a logical table\", function () {",
													"    pm.response.to.have.status(201);",
													"    const tableId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_tableId\", tableId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"subType\": \"table_partition_md\",\n        \"name\": \"New MDPM Table\",\n        \"destinationFolderId\": \"CC582EC35C0C481E826E6D6B40BE4905\"\n    },\n    \"logicalSize\": 0,\n    \"isLogicalSizeLocked\": true,\n    \"partitionTables\": [\n        {\n            \"information\": {\n                \"objectId\": \"1108A1684C55EC5AFB8DC19C15470B30\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q1_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20141\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20141\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20141.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"information\": {\n                \"objectId\": \"54B36C794B9FEFD92AAC4FB1C4F34B4E\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q2_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20142\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20142\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20142.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"information\": {\n                \"objectId\": \"62318B2346C8D9BBC7CB2582D5591401\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q3_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20143\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20143\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20143.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables?showFilterTokens=false&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables"
											],
											"query": [
												{
													"key": "checkSecondaryDataSourceTable",
													"value": "true",
													"description": "If set to true, the API finds compatible tables in the project. If a compatible table is found, the compatible table object information is returned.\nThe caller can call PATCH /model/tables/{tableID}/ to set a secondaryDatasources for the compatible table. If no table is found, a new table is created.\n\nIf set to false, a new table is created.\n\nThis parameter has no effect on creating a freeform SQL table.\n",
													"disabled": true
												},
												{
													"key": "columnMergeOption",
													"value": "reuse_compatible_data_type",
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4).\nTo be consistent, columns' data types are modified in following ways:\n\n* reuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\n* reuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\n* reuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate\ncopy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\n\nIf this value is not set, use the option that set on DBRole catalog setting.\n",
													"disabled": true
												},
												{
													"key": "tablePrefixOption",
													"value": "none",
													"description": "The following options define the table prefix:\n  - none: do not set table prefix.\n  - add_default_prefix: this option applies the default prefix setting on warehouse catalog.\n  - add_namespace: create a prefix same with namespace.\n\nThis param has no effect on a free form SQL table.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "false",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											]
										},
										"description": "This API creates a logical table in the changeset, and returns a new logical table definition with specific field information. Normal tables, FFSQL tables, and partition mapping tables are all supported.For partition mapping tables, both Warehouse Partition Mapping (WHPM) and Metadata Partition Mapping (MDPM) are supported.\n\nWhen creating a normal table or warehouse partition mapping table, the request body must include a physical table definition. If _type_ is not specified in the physical table definition, the API creates a normal table by default. If a logical table that refers to the same warehouse physical table already exists in the project, the API creates a new logical table, copying from the existing one. If a normal logical table exists in the project with the same data source information, namespace, and table name, the API creates a normal table alias. If the caller wants to use the table alias explicitly, pass an existing physical table ID in the request body. A freeform SQL table alias can only be created by passing an existing freeform SQL physical table ID in the request body. When the changeset is committed, all the new logical tables are created under folder _schema objects/tables_.\n\nMetadata partition mapping table is different from other kinds of tables. It is a group of existing normal logical tables, which are called partition base tables. It does not have physical tables, and it cannot have table alias. Each partition base table must define a partition filter which is attribute qualification. The attributes in the filter can be any standalone attribute. Partition filter is a standalone system object saved to _System Objects\\\\Partition Filters_. You may use _showExpressionAs_ and _showFilterTokens_ parameters for partition filters. When the changeset is committed, metadata partition mapping table can be saved to any location by specifying the destination folder ID in the request body. If not given _destinationFolderId_, the newly created table will fallback to _Schema Objects\\\\Tables_ folder.\n\nFor all kinds of tables, the table name cannot be duplicated within the project.\n\nA changeset ID is required to execute the request and can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo add the newly created table to metadata, commit using the **POST** **/model/{changesetId}/commit** API."
									},
									"response": []
								},
								{
									"name": "Update a MDPM table",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"partitionTables\": [\n        {\n            \"information\": {\n                \"objectId\": \"1108A1684C55EC5AFB8DC19C15470B30\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q1_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20141\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20141\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20141.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"information\": {\n                \"objectId\": \"54B36C794B9FEFD92AAC4FB1C4F34B4E\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q2_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20142\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20142\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20142.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"information\": {\n                \"objectId\": \"62318B2346C8D9BBC7CB2582D5591401\",\n                \"subType\": \"logical_table\",\n                \"name\": \"inventory_q3_2014\"\n            },\n            \"partitionFilter\": {\n                \"qualification\": {\n                    \"text\": \"Quarter (ID) = 20143\",\n                    \"tree\": {\n                        \"type\": \"predicate_form_qualification\",\n                        \"predicateText\": \"Quarter (ID) = 20143\",\n                        \"predicateTree\": {\n                            \"function\": \"equals\",\n                            \"parameters\": [\n                                {\n                                    \"parameterType\": \"constant\",\n                                    \"constant\": {\n                                        \"type\": \"double\",\n                                        \"value\": \"20143.0\"\n                                    }\n                                }\n                            ],\n                            \"attribute\": {\n                                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n                                \"subType\": \"attribute\",\n                                \"name\": \"Quarter\"\n                            },\n                            \"form\": {\n                                \"objectId\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                                \"subType\": \"attribute_form_system\",\n                                \"name\": \"ID\"\n                            },\n                            \"dataLocale\": \"\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId?showFilterTokens=false&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": "reuse_compatible_data_type",
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4).\nTo be consistent, columns' data types are modified in following ways:\n\n* reuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\n* reuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\n* reuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate\ncopy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\n\nIf this value is not set, use the option that set on DBRole catalog setting.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "false",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "This API updates a detailed definition for a specified (logical) table in the changeset.\n\nFor a normal logical table or a warehouse partition mapping table, you can update the following: the logical table name in the information field, isTrueKey, logicalSize, isLogicalSizeLocked, primaryDatasource, secondaryDatasource field, prompt ids in sapHanaParameters field, physical table object name, physical table name, and the table prefix in physicalTable field. When the primaryDatasource or secondaryDatasource of this logical table is updated, the related primaryDatasource or secondaryDatasource of all other logical tables that share the same physical table with this logical table are updated.\n\nFor a freeform SQL table, you can update the following: the logical table name in the information field, isTrueKey, logicalSize, isLogicalSizeLocked, primaryDatasource, encloseSqlInParentheses field, physical table object name, sqlStatement, and columns in physicalTable field. The primaryDatasource change will not affect other logical tables that share the same physical table with this logical table.\n\nFor a metadata partition mapping table, you can update the logical table name in the information field, logicalSize, isLogicalSizeLocked, partition base tables and their partition filters in partitionTables field.\n\nFor all kinds of tables, the table name cannot be duplicated within the project.\n\nThe response contains the updated definition and specific field information of the logical table.\n\nA changeset ID is required to execute the request and can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo update the detailed definition for the specified table to metadata, commit using the **POST** **/model/{changesetId}/commit** API."
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve a MDPM table",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "Changeset ID\n"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId?showFilterTokens=false&showExpressionAs=tree",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId"
											],
											"query": [
												{
													"key": "showFields",
													"value": "acl",
													"description": "Specify what additional information is returned.\nOnly \"acl\" is supported.\n\n* If `acl`, the access control list for each object is included.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												},
												{
													"key": "showFilterTokens",
													"value": "false",
													"description": "Specify whether \"qualification\" is returned in \"tokens\" format, along with \"text\" and \"tree\" formats.\nA filter's \"qualification\" is presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing a filter's qualification.\n* \"tree\": A tree data structure fully defining the filter's qualification.\n* \"tokens\": A list of parsed tokens that define a filter's qualification.\nBe aware that generating tokens requires additional time.\nIf omitted or `false`, only \"text\" and \"tree\" formats are returned.\nIf `true`, all \"text\", \"tree\" and \"tokens\" formats are returned.\n"
												},
												{
													"key": "showExpressionAs",
													"value": "tree",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute and custom expressions used in a filter, prompt, security filter, custom group, etc. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\n\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "This API gets a detailed definition for a specified (logical) table.\n\nThe project ID is required to return a table's definition in metadata. The changeset ID is required to return a table's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nA _physical table_ describes the metadata of a warehouse table. It contains a set of columns with a schema definition. A logical table describes the higher-level data model objects (_facts_, _attributes_, etc.) that the architect wants to use to model the contents of the physical table. If the caller sets the fields parameter, then the response contains the specified fields information. For example, if the caller specifies the PhysicalTable field, the response contains a PhysicalTable field for each table. By default, only the information field is returned.\n\nA changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{changesetID}}"
											},
											{
												"key": "changesetId",
												"value": "{{changesetID}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create, retrieve, and update a metadata partition mapping (MDPM) table object through the Modeling service."
						},
						{
							"name": "Update a table's physical table structure",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{changesetID}}"
											},
											{
												"key": "changesetId",
												"value": "{{changesetID}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_tableId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the physical table structure",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Required) Changeset ID\n"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/tables/:tableId/physicalTable/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"tables",
												":tableId",
												"physicalTable",
												"refresh"
											],
											"query": [
												{
													"key": "columnMergeOption",
													"value": "reuse_compatible_data_type",
													"description": "Defines a column merge option. For example, say a project includes a table named Table1 and a column named C1 whose data type is char(1). You add Table2, which has a C1 column with char(4).\nTo be consistent, columns' data types are modified in following ways:\n* reuse_any: Updates the column data type to use the most recent column definition. In the example above, the column data type for C1 is changed to char(4) since Table2 was added after Table1.\n* reuse_compatible_data_type: Updates the column data type to use the data type with the largest precision or scale. In the example above, the column data type for C1 is changed to char(4), as defined in Table2.\n* reuse_matched_data_type: Renames the column in newly added table to allow it to have different data types. In the example above, column C1 uses char(1) for Table1. Column C1 in Table2 is defined as a separate\ncopy of C1 and uses char(4). This option can cause unwanted schema changes and should be used only when necessary.\nIf this value is not set, use the option that set on DBRole catalog setting.\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "A comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model.\nBy default, all fields are returned. If specified, extra filtering is applied, and for the top-level object (if the root model is an array, each array element),\nonly the listed fields are kept in the response. For example, \"information,logicalSize\" keeps only the \"information\" and \"logicalSize\" fields, omitting all other fields in the top-level response model.\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tableId",
													"value": "{{rd_tableId}}",
													"description": "(Required) Table ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "You can use REST API requests to retrieve, create, and update table objects through the Modeling service."
				},
				{
					"name": "Manage Timezone Objects",
					"item": [
						{
							"name": "Retrieve and Update a Timezone's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of avaliable timezone objects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get all timezones\", function () {",
													"    pm.response.to.have.status(200);",
													"    timezone = pm.response.json().timezones[0].information;",
													"    timezoneId = timezone.objectId;",
													"    timezoneName = timezone.name;",
													"    pm.environment.set(\"rd_timezoneId\", timezoneId);",
													"    pm.environment.set(\"rd_timezoneName\", timezoneName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/timezones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"timezones"
											],
											"query": [
												{
													"key": "subType",
													"value": null,
													"description": "Specify which type of timezone shoud be returned. If not provided, all system and custom timezones will re returned.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a timezone's definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get a timezone's definition\", function(){",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required)",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/timezones/:timezoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"timezones",
												":timezoneId"
											],
											"variable": [
												{
													"key": "timezoneId",
													"value": "{{rd_timezoneId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a custom timezone's definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update timezone definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"newtimezoneName\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/timezones/:timezoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"timezones",
												":timezoneId"
											],
											"variable": [
												{
													"key": "timezoneId",
													"value": "{{rd_timezoneId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Revert timezone to original definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Restore timezone definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"{{rd_timezoneName}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/timezones/:timezoneId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"timezones",
												":timezoneId"
											],
											"variable": [
												{
													"key": "timezoneId",
													"value": "{{rd_timezoneId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Re-commit changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_timezoneId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow handles retrieving a list of timezones. Then updating a timezone from one of the timezones in the list."
						},
						{
							"name": "Create a New Timezone Object",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new custom timezone object",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create new custom timezone object\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    timezoneId = pm.response.json().information.objectId;",
													"    pm.environment.set(\"rd_timezoneId\", timezoneId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"New York\"\n    },\n    \"baseTimezone\": {\n        \"objectId\": \"1D18D39B4594CFAF60A6C1B2F48164E8\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/timezones",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"timezones"
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the timezone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Revert changes\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:timezoneId?type=79",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":timezoneId"
											],
											"query": [
												{
													"key": "type",
													"value": "79"
												}
											],
											"variable": [
												{
													"key": "timezoneId",
													"value": "{{rd_timezoneId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"    pm.environment.unset(\"rd_timezoneId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow shows how to create a new timezone and delete it."
						}
					],
					"description": "This workflow handles managing Timezone objects."
				},
				{
					"name": "Manage Transformation Objects",
					"item": [
						{
							"name": "Retrieve a Transformation's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Search for transformations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition/Search\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_transformationId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=43&name=Last&pattern=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "type",
													"value": "43",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "name",
													"value": "Last",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Get a transformation's definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition/Get a transformation's definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/transformations/:transformationId?showExpressionAs=tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transformations",
												":transformationId"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n This format can be used if you want to examine and modify the expression using the parser component.\n Note that generating tokens requires additional time.\n \n Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "transformationId",
													"value": "{{rd_transformationId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "The response returns the definition of a single transformation.\n\nThe project ID is required to return a transformation's definition in metadata. The changeset ID is required to return a transformation's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition/Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_transformationId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve the definition of a transformation through the Modeling service."
						},
						{
							"name": "Retrieve a Transformation's Definition within a Changeset",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Search for transformations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Search\", function () {",
													"    pm.response.to.have.status(200);",
													"    const results = pm.response.json().result;",
													"    pm.environment.set(\"rd_transformationId\", results[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/searches/results?type=43&name=Last&pattern=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"searches",
												"results"
											],
											"query": [
												{
													"key": "type",
													"value": "43",
													"description": "Type of object to be searched, such as Folder, Attribute or User. Possible values are defined in [EnumDSSObjectType](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). To specify multiple types in API explorer, simply specify them with newline delimiter."
												},
												{
													"key": "name",
													"value": "Last",
													"description": "Value the search pattern is set to, which will be applied to the names of object types being searched. For example, search for all report objects (type) whose name begins with (pattern) B (name)."
												},
												{
													"key": "pattern",
													"value": "4",
													"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html)."
												}
											]
										},
										"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Changeset creation\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "false",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether.\n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Get a transformation's definition in changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Get a transformation's definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "Changeset ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/transformations/:transformationID?showExpressionAs=tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transformations",
												":transformationID"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n This format can be used if you want to examine and modify the expression using the parser component.\n Note that generating tokens requires additional time.\n \n Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "transformationID",
													"value": "{{rd_transformationId}}",
													"description": "(Required) Transformation ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "The response returns the definition of a single transformation.\n\nThe project ID is required to return a transformation's definition in metadata. The changeset ID is required to return a transformation's definition within a specific changeset. To execute the request, either the project ID or changeset ID needs to be provided. If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Delete changeset\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.  \nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_transformationId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a transformation's definition within a changeset."
						},
						{
							"name": "Create, Update and Delete a Transformation",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Changeset creation\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Required) Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects.\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether.\n\nSet \"schemaEdit\" to `true` if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Create a new transformation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create, update and delete a transformation/Create a new transformation\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_transformationId\", pm.response.json().information.objectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"new transformation\",\n        \"destinationFolderId\": \"{{publicReportsFolderId}}\"\n    },\n    \"attributes\": [\n        {\n            \"baseAttribute\": {\n                \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\"\n            },\n            \"forms\": [\n                {\n                    \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                    \"lookupTable\": {\n                        \"objectId\": \"8D6793C211D3E4981000E787EC6DE8A4\"\n                    },\n                    \"expression\": {\n                        \"tokens\": [\n                            {\n                                \"value\": \"YEAR_ID - 1\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ],\n    \"mappingType\": \"one_to_one\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/transformations?showExpressionAs=tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transformations"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											]
										},
										"description": "Creates a new transformation in the changeset, based on the definition provided in request body. The definition of the newly created transformation is returned in response.\n\nIn the request body, \"attributes\" contains a list of transformation attributes. Each transformation attribute contains \"baseAttribute\" and \"forms\".\n\n*   \"baseAttribute\": refer to a normal attribute the transformation attribute based on.\n*   \"forms\": a list of transformation attribute forms, which are generated according to base attribute key form. Each transformation attribute form contains:\n    *   \"lookupTable\": required for the object to be commited to the metadata.\n    *   \"expression\": Needs to be in either \"tree\" or \"tokens\" format.\n        *   Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\n\nProvide \"mappingType\", to define a mapping relationship. It can be either \"one_to_one\" or \"many_to_many\".\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created transformation to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Update the transformation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create, update and delete a transformation/Update the transformation\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"information\": {\n        \"name\": \"updated transformation\"\n    },\n    \"attributes\": [\n        {\n            \"baseAttribute\": {\n                \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\"\n            },\n            \"forms\": [\n                {\n                    \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                    \"lookupTable\": {\n                        \"objectId\": \"8D6793C211D3E4981000E787EC6DE8A4\"\n                    },\n                    \"expression\": {\n                        \"tokens\": [\n                            {\n                                \"value\": \"YEAR_ID - 1\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"baseAttribute\": {\n                \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\"\n            },\n            \"forms\": [\n                {\n                    \"id\": \"45C11FA478E745FEA08D781CEA190FE5\",\n                    \"lookupTable\": {\n                        \"objectId\": \"8D6793A411D3E4981000E787EC6DE8A4\"\n                    },\n                    \"expression\": {\n                        \"tokens\": [\n                            {\n                                \"value\": \"LY_QUARTER_ID\"\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    ],\n    \"mappingType\": \"one_to_one\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/transformations/:transformationID?showExpressionAs=tokens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"transformations",
												":transformationID"
											],
											"query": [
												{
													"key": "showExpressionAs",
													"value": "tokens",
													"description": "This parameter specifies the format in which the expressions are returned in response. \nThis parameter applies to the expressions in a fact or attribute, and custom expressions used in a filter, prompt, or security filter. \nExpressions are presented in the following formats:\n* \"text\": A human readable, but non-parsable text, describing the expression.\n  This is the default format that is always returned in the response.\n* \"tree\": A tree data structure fully defining the expression.\n  This format can be used if you want to examine and modify the expression programmatically.\n* \"tokens\": A list of parsed tokens. \n  This format can be used if you want to examine and modify the expression using the parser component.\n  Note that generating tokens requires additional time.\n  \n  Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\nFor example, let’s say a filter expression is \"Revenue > Cost\". When the filter expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Revenue\", Revenue_ID), (\">\", GreaterThan_ID), (\"Cost\", Cost_ID).\nIf omitted, the expression is returned in \"text\" format.\nIf `tree`, the expression is returned in \"text\" and \"tree\" formats.\nIf `tokens`, the expression is returned in \"text\" and \"tokens\" formats.\n"
												}
											],
											"variable": [
												{
													"key": "transformationID",
													"value": "{{rd_transformationId}}",
													"description": "(Required) Transformation ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "Updates a specific transformation in the changeset, based on the definition provided in the request body. It returns the transformation's updated definition in the changeset.\n\nIn the request body, \"attributes\" contains a list of transformation attributes. Each transformation attribute contains \"baseAttribute\" and \"forms\".\n\n*   \"baseAttribute\": refer to a normal attribute the transformation attribute based on.\n*   \"forms\": a list of transformation attribute forms, which are generated according to base attribute key forms. Each transformation attribute form contains:\n    *   \"lookupTable\": required for the object to be commited to the metadata.\n    *   \"expression\": Needs to be in either \"tree\" or \"tokens\" format.\n        *   Tokens are a semi-structured representation of MicroStrategy expression text that includes object references.\n\nProvide \"mappingType\", to define a mapping relationship. It can be either \"one_to_one\" or \"many_to_many\".\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly created transformation to the metadata, commit using the changeset commit API."
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create, update and delete a transformation/Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.  \nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.  \nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\",\n    \"clear_element_cache\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create, update and delete a transformation/Delete changeset\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.  \nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.  \nAn authorization token is required to execute the request and can be obtained using Authentication endpoints."
									},
									"response": []
								},
								{
									"name": "Delete created transformation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create, update and delete a transformation/Delete the transformation\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "Project ID"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:transformationID?type=43",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":transformationID"
											],
											"query": [
												{
													"key": "type",
													"value": "43",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
												}
											],
											"variable": [
												{
													"key": "transformationID",
													"value": "{{rd_transformationId}}",
													"description": "(Required) Transformation ID\nThe ID can be:\n* the object ID used in metadata.\n* the object ID used in changeset, but not yet committed to metadata.\n"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects. You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve a transformation's definition within a changeset/Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_transformationId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create, update, then delete a transformation object through the Modeling service."
						}
					],
					"description": "You can use REST API requests to retrieve, create and update transformation objects through the Modeling service."
				},
				{
					"name": "Manage User Hierarchy Objects",
					"item": [
						{
							"name": "Retrieve a User Hierarchy's Definition",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of user hierarchies",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get list of user hierarchies\", function () {",
													"    pm.response.to.have.status(200);",
													"    const hierarchies = pm.response.json().hierarchies;",
													"    pm.environment.set(\"rd_hierarchyId\", hierarchies[0].objectId);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/hierarchies?limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"hierarchies"
											],
											"query": [
												{
													"key": "limit",
													"value": "100",
													"description": "The maximum number of objects that can be returned by this method.\n\nIf this property is not provided, all available objects are returned."
												},
												{
													"key": "offset",
													"value": "0",
													"description": "Use this parameter to page through large result lists. Setting it to 0 (or not providing the parameter) starts at the beginning of the object list.",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user hierarchy definition",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get user hierarchy definition\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/hierarchies/:hierarchyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"hierarchies",
												":hierarchyId"
											],
											"variable": [
												{
													"key": "hierarchyId",
													"value": "{{rd_hierarchyId}}",
													"description": "(Required) Hierarchy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_hierarchyId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to retrieve a user hierarchy's definition."
						},
						{
							"name": "Create and Update a User Hierarchy",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a changeset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create a changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token",
												"type": "text"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Required) Project ID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets"
											],
											"query": [
												{
													"key": "schemaEdit",
													"value": "true",
													"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
												}
											]
										},
										"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Create user hierarchy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create user hierarchy\", function () {",
													"    pm.response.to.have.status(201);",
													"    const hierarchy = pm.response.json();",
													"    pm.environment.set(\"rd_hierarchyId\", hierarchy.information.objectId);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"destinationFolderId\": \"{{publicReportsFolderId}}\",\n    \"subType\": \"dimension_user\",\n    \"name\": \"TimeHierarchy\"\n  },\n  \"useAsDrillHierarchy\": true,\n  \"attributes\": [\n    {\n      \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n      \"name\": \"Month\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D4511D3E4981000E787EC6DE8A4\",\n      \"name\": \"Month of Year\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n      \"name\": \"Quarter\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n      \"name\": \"Year\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"96ED3EC811D5B117C000E78A4CC5F24F\",\n      \"name\": \"Day\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"limited_elements\",\n      \"limit\": 50\n    }\n  ],\n  \"relationships\": [\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      },\n      \"child\": {\n        \"objectId\": \"96ED3EC811D5B117C000E78A4CC5F24F\",\n        \"subType\": \"attribute\",\n        \"name\": \"Day\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D4511D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month of Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Quarter\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Quarter\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/hierarchies",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"hierarchies"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a user hierarchy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update a user hierarcy\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"type": "text",
												"description": "(Required) Changeset ID"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"information\": {\n    \"subType\": \"dimension_user\",\n    \"name\": \"TimeToMonth\"\n  },\n  \"useAsDrillHierarchy\": true,\n  \"attributes\": [\n    {\n      \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n      \"name\": \"Month\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D4511D3E4981000E787EC6DE8A4\",\n      \"name\": \"Month of Year\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n      \"name\": \"Quarter\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    },\n    {\n      \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n      \"name\": \"Year\",\n      \"entryPoint\": true,\n      \"elementDisplayOption\": \"all_elements\"\n    }\n  ],\n  \"relationships\": [\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D4511D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month of Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Quarter\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4411D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Month\"\n      }\n    },\n    {\n      \"parent\": {\n        \"objectId\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Year\"\n      },\n      \"child\": {\n        \"objectId\": \"8D679D4A11D3E4981000E787EC6DE8A4\",\n        \"subType\": \"attribute\",\n        \"name\": \"Quarter\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/hierarchies/:hierarchyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"hierarchies",
												":hierarchyId"
											],
											"variable": [
												{
													"key": "hierarchyId",
													"value": "{{rd_hierarchyId}}",
													"description": "(Required) Hierarchy ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Commit the changeset changes to the metadata",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Commit changeset\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId",
												"commit"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Reload (update) the schema",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Reload schema\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Set to `respond-async` to execute this API asynchronously. \n",
												"key": "Prefer",
												"value": "",
												"disabled": true
											},
											{
												"description": "(Required) Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"updateTypes\": [\n    \"table_key\", \n    \"entry_level\", \n    \"logical_size\"\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/model/schema/reload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"schema",
												"reload"
											]
										},
										"description": "Reloads (updates) the schema. \n\nSet \"Prefer\" to `respond-async` to execute this API asynchronously. Use GET tasks APIs to check the status of the task. \n\nA project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n\n\"updateTypes\" is required in the request body. This field can contain empty, any of the following options, or all them:\n* table_key: Use this option if you changed the key structure of a table.\n* entry_level: Use this option if you changed the level at which a fact is stored.\n* logical_size: Use this option to recalculate logical table sizes and override any modifications you made to logical table sizes. \n"
									},
									"response": []
								},
								{
									"name": "Delete the user hierarchy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the hierarchy\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"description": "Project ID",
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/objects/:objectId?type=14",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"objects",
												":objectId"
											],
											"query": [
												{
													"key": "type",
													"value": "14",
													"description": "(Required) Object type, which corresponds to a value from [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html). Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint. 14 is for user hierarchy object type."
												}
											],
											"variable": [
												{
													"key": "objectId",
													"value": "{{rd_hierarchyId}}",
													"description": "(Required) Hierarchy ID"
												}
											]
										},
										"description": "Delete a specific object in a specific project; if you do not specify a project ID, you delete information for the object in all projects.  You identify the object with the object ID and object type. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the object ID in the path of the request. You specify the object type as a query parameter; possible values for object type are provided in [EnumDSSXMLObjectTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html)."
									},
									"response": []
								},
								{
									"name": "Delete the changeset",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete the changeset\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization Token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"changesets",
												":changesetId"
											],
											"variable": [
												{
													"key": "changesetId",
													"value": "{{rd_changesetId}}",
													"description": "(Required) Changeset ID"
												}
											]
										},
										"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_hierarchyId\");",
													"    pm.environment.unset(\"rd_changesetId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to create and update a user hierarchy object."
						}
					],
					"description": "You can use REST API requests to retrieve, create, and delete user hierarchy objects through the Modeling service."
				}
			]
		},
		{
			"name": "Administration",
			"item": [
				{
					"name": "Server Management",
					"item": [
						{
							"name": "Manage Server-Level Privileges",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Create a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create user\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const userObj = pm.response.json();",
													"    pm.environment.set(\"rd_userId\", userObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fullName\": \"TestUser\",\n    \"username\": \"testuser\",\n    \"description\": \"New User\",\n    \"password\": \"12345678\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Create a new user. The response includes the user ID, which other endpoints use as a request parameter to specify the user to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new user in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get user's privilege",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get user's privilege\", function () {  ",
													"     pm.response.to.have.status(200);})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id/privileges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id",
												"privileges"
											],
											"query": [
												{
													"key": "privilege.level",
													"value": "project",
													"description": "Project Level Privilege",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "ea do sit exercitation",
													"description": "Project ID",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "ea do sit exercitation",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}",
													"description": "(Required) User ID"
												}
											]
										},
										"description": "Get user's privileges of a project including the source of the privileges"
									},
									"response": []
								},
								{
									"name": "Update info for a specific user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update info for a specific user\", function () {  ",
													"     pm.response.to.have.status(200);",
													"     })"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/privileges\",\n      \"value\": [2, 54]\n    }, \n    {\n      \"op\": \"remove\",\n      \"path\": \"/privileges\",\n      \"value\": [53]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "1",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}",
													"description": "(Required) User ID"
												}
											]
										},
										"description": "Update specific information for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users. You specify the type of update operation (add, replace or remove), provide the value to be used in the update operation, and specify the path to the target where the update operation will be performed, in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Delete user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete user\", function () {  ",
													"     pm.response.to.have.status(204);})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}",
													"description": "(Required) User ID"
												}
											]
										},
										"description": "Delete user for specific user id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request;you obtain the user ID using GET /users. "
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_userId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "Privileges are assigned to users and user groups to authorize what functionality they can use. Some privileges are at the project or server level. Project-level privileges can be directly assigned to a user or through security roles assigned to users or user groups. Server-level privileges can only be assigned to users or user groups.\n\nTo avoid security vulnerabilities, administrative users must have a clear understanding of system administration privileges and the security requirements of their system before assigning privileges that provide access to application functionality.\n\nAn administrative user that manages access to application functionality should have the following privileges:\n\n* Create and edit user\n\nThis privilege is necessary for server-level privilege management\n\n* Grant and revoke privileges\n\nThis privilege is necessary to grant and revoke privileges"
						},
						{
							"name": "Manage Server Settings",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Retrieve Intelligence Server settings config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Server settings\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/iserver/settings/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"iserver",
												"settings",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve Intelligence Server settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retrieve Server settings\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    var data = pm.response.json();",
													"    //Make the value different from the original",
													"    const rd_maxUserConnectionPerServer = data.maxUserConnectionPerServer.value - 2;",
													"    //This is read-only property. We need to remove it to call PUT to update the server settings to the original.",
													"    delete data[\"historyListRunningStatus\"];  ",
													"    pm.environment.set(\"rd_maxUserConnectionPerServer\", rd_maxUserConnectionPerServer);",
													"    pm.environment.set(\"rd_allServerSettings\", JSON.stringify(data));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v2/iserver/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"iserver",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Intelligence Server settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update iServer settings\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"maxUserConnectionPerServer\": {\n        \"value\": {{rd_maxUserConnectionPerServer}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/iserver/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"iserver",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update all Intelligence Server settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Revert iServer Settings\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{rd_allServerSettings}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v2/iserver/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v2",
												"iserver",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_maxUserConnectionPerServer\");",
													"    pm.environment.unset(\"rd_allServerSettings\");",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							],
							"description": "You can use REST APIs to manage Intelligence Server Settings."
						},
						{
							"name": "Manage Fences",
							"item": [
								{
									"name": "Retrieve and Delete a Fence",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get details of all existing user and workload fences",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get details of all existing user and workload fences\", function () {",
															"    pm.response.to.have.status(200);",
															"    const fence =  pm.response.json().fences[0];",
															"    pm.environment.set(\"rd_fenceName\", fence.name);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/iserver/fences",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"iserver",
														"fences"
													],
													"query": [
														{
															"key": "fields",
															"value": null,
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
											},
											"response": []
										},
										{
											"name": "Get detailed information on a specific fence",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get detailed information on a specific fence\", function () {",
															"    pm.response.to.have.status(200);",
															"    const fence =  pm.response.json();",
															"    pm.environment.set(\"rd_fenceName\", fence.name);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/iserver/fences/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"iserver",
														"fences",
														":name"
													],
													"query": [
														{
															"key": "fields",
															"value": null,
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "{{rd_fenceName}}",
															"description": "(Required) Fence name"
														}
													]
												},
												"description": "Get the detailed information of a sepcific fence based on the fence name, that the authenticated user has access to. The fence can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve a specific user or workload fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved fence provides information about rank, name, type, reserved nodes, configured user/usergroup and projects."
											},
											"response": []
										},
										{
											"name": "Delete a user or workload fence",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a user or workload fence\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/iserver/fences/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"iserver",
														"fences",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "{{rd_fenceName}}",
															"description": "(Required) Fence name"
														}
													]
												},
												"description": "Delete a sepcific fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to delete an existing fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_clusterNodeName\");",
															"    pm.environment.unset(\"rd_fenceName\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									]
								},
								{
									"name": "Create a New Fence",
									"item": [
										{
											"name": "Create a New User Fence",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														},
														"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
													},
													"response": []
												},
												{
													"name": "Get projects for authenticated user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get projects for authenticated user\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const project =  pm.response.json()[0];",
																	"    pm.environment.set(\"rd_projectId\", project.id);",
																	"    pm.environment.set(\"rd_projectName\", project.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/projects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"projects"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
													},
													"response": []
												},
												{
													"name": "Get information about nodes in the connected Intelligence Server cluster",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get information about nodes in the connected Intelligence Server cluster\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const clusterNodeName = pm.response.json()[\"nodes\"][0].name;",
																	"    pm.environment.set(\"rd_clusterNodeName\", clusterNodeName);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"monitors",
																"iServer",
																"nodes"
															],
															"query": [
																{
																	"key": "projects.id",
																	"value": "{{rd_projectId}}",
																	"description": "Project ID",
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{rd_clusterNodeName}}",
																	"description": "Node Name",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get information about nodes in the connected Intelligence Server cluster. This includes basic information, runtime state and information of projects on each node. This operation requires the \"Monitor cluster\" privilege. You specify an authorization token in the request header. "
													},
													"response": []
												},
												{
													"name": "Get info for a set of users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get info for a set of users\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const user =  pm.response.json()[0];",
																	"    pm.environment.set(\"rd_userId\", user.id);",
																	"    pm.environment.set(\"rd_nameOfUser\", user.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users"
															],
															"query": [
																{
																	"key": "nameBegins",
																	"value": "",
																	"description": "Characters that the user name must begin with.",
																	"disabled": true
																},
																{
																	"key": "abbreviationBegins",
																	"value": "",
																	"description": "Characters that the user abbreviation must begin with.",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned search results. Use to control paging behavior.",
																	"disabled": true
																},
																{
																	"key": "limit",
																	"value": "-1",
																	"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).",
																	"disabled": true
																},
																{
																	"key": "id",
																	"value": "",
																	"description": "List of User ids",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get information for a specific set of users. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the set of users to be returned with query parameters that specify the characters that the user name or abbreviation must begin with. You can use other query parameters to limit the results that are returned by specifying a starting point within the results and the maximum number of results that should be returned."
													},
													"response": []
												},
												{
													"name": "Get info for all user groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get info for all user groups\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const userGroup =  pm.response.json()[0];",
																	"    pm.environment.set(\"rd_userGroupId\", userGroup.id);",
																	"    pm.environment.set(\"rd_userGroupName\", userGroup.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/usergroups",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"usergroups"
															],
															"query": [
																{
																	"key": "nameBegins",
																	"value": "",
																	"description": "Characters that the name must begin with",
																	"disabled": true
																},
																{
																	"key": "offset",
																	"value": "0",
																	"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
																	"disabled": true
																},
																{
																	"key": "limit",
																	"value": "-1",
																	"description": "Maximum number of items returned for a single search request. Used to control paging behavior. Use -1 for no limit (subject to Governing settings).",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get information for a specific set of user groups or all user groups. You can refine the set of user groups that are returned with a query parameter that specifies the characters that the user group name must begin with; if you omit the nameBegins query parameter, all user groups are returned. You can limit the results that are returned with two query parameters. The offset parameter specifies the location in the list of users groups to begin returning results and the limit parameter specifies the maximum number of matching user groups that can be returned; if you set the limit parameter to -1, all results are returned (subject to Governing settings). The total count of results returned is included in the response header as \"x-mstr-total-count\". You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
													},
													"response": []
												},
												{
													"name": "Create a new user fence",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create a new user\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const fence =  pm.response.json();",
																	"    pm.environment.set(\"fenceName\", fence.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization token",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rank\": 1,\n  \"name\": \"administrator_user_fence\",\n  \"type\": \"user_fence\",\n  \"nodes\": [\n    \"{{rd_clusterNodeName}}\"\n  ],\n  \"users\": [\n    {\n      \"id\": \"{{rd_userId}}\",\n      \"name\": \"{{rd_nameOfUser}}\"\n    }\n  ],\n  \"usergroups\": [\n    {\n      \"id\": \"{{rd_userGroupId}}\",\n      \"name\": \"{{rd_userGroupName}}\"\n    }\n  ],\n  \"projects\": [\n    {\n      \"id\": \"{{rd_projectId}}\",\n      \"name\": \"{{rd_projectName}}\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/iserver/fences",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"iserver",
																"fences"
															],
															"query": [
																{
																	"key": "fields",
																	"value": null,
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Create a new user fence.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to create a new user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"authToken\");",
																	"    pm.environment.unset(\"rd_clusterNodeName\");",
																	"    pm.environment.unset(\"rd_userId\");",
																	"    pm.environment.unset(\"rd_nameOfUser\");",
																	"    pm.environment.unset(\"rd_userGroupId\");",
																	"    pm.environment.unset(\"rd_userGroupName\");",
																	"    pm.environment.unset(\"rd_projectId\");",
																	"    pm.environment.unset(\"rd_projectName\");",
																	"    pm.environment.unset(\"rd_fenceName\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														},
														"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
													},
													"response": []
												}
											]
										},
										{
											"name": "Create a New Workload Fence",
											"item": [
												{
													"name": "Login",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Login\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/auth/login",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"login"
															]
														},
														"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
													},
													"response": []
												},
												{
													"name": "Get projects for authenticated user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get projects for authenticated user\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const project =  pm.response.json()[0];",
																	"    pm.environment.set(\"rd_projectId\", project.id);",
																	"    pm.environment.set(\"rd_projectName\", project.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/projects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"projects"
															],
															"query": [
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
													},
													"response": []
												},
												{
													"name": "Get information about nodes in the connected Intelligence Server cluster",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get information about nodes in the connected Intelligence Server cluster\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const clusterNodeName = pm.response.json()[\"nodes\"][0].name;",
																	"    pm.environment.set(\"rd_clusterNodeName\", clusterNodeName);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Authorization token",
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"monitors",
																"iServer",
																"nodes"
															],
															"query": [
																{
																	"key": "projects.id",
																	"value": "{{rd_projectId}}",
																	"description": "Project ID",
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{rd_clusterNodeName}}",
																	"description": "Node Name",
																	"disabled": true
																},
																{
																	"key": "fields",
																	"value": "",
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Get information about nodes in the connected Intelligence Server cluster. This includes basic information, runtime state and information of projects on each node. This operation requires the \"Monitor cluster\" privilege. You specify an authorization token in the request header. "
													},
													"response": []
												},
												{
													"name": "Create a new workload fence",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create a new workload fence\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    const fence =  pm.response.json();",
																	"    pm.environment.set(\"rd_fenceName\", fence.name);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"description": "(Required) Authorization token",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rank\": 1,\n  \"name\": \"subscription_workload_fence\",\n  \"type\": \"workload_fence\",\n  \"nodes\": [\n    \"{{rd_clusterNodeName}}\"\n  ],\n  \"projects\": [\n    {\n      \"id\": \"{{rd_projectId}}\",\n      \"name\": \"{{rd_projectName}}\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/iserver/fences",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"iserver",
																"fences"
															],
															"query": [
																{
																	"key": "fields",
																	"value": null,
																	"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																	"disabled": true
																}
															]
														},
														"description": "Create a new workload fence.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to create a new workload fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
													},
													"response": []
												},
												{
													"name": "Logout",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Logout\", function() {",
																	"    pm.response.to.have.status(204);",
																	"    pm.environment.unset(\"authToken\");",
																	"    pm.environment.unset(\"rd_clusterNodeName\");",
																	"    pm.environment.unset(\"rd_projectId\");",
																	"    pm.environment.unset(\"rd_projectName\");",
																	"    pm.environment.unset(\"rd_fenceName\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-MSTR-AuthToken",
																"value": "{{authToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/auth/logout",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"auth",
																"logout"
															]
														},
														"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Update an Existing Fence",
									"item": [
										{
											"name": "Update an existing user fence",
											"item": [
												{
													"name": "Update rank of a user fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"user_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update rank of a user fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing user fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fenceRank =  pm.response.json().rank;",
																			"    pm.environment.set(\"rd_fenceRank\", fenceRank);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/rank\",\n      \"value\": 1\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update rank of a sepcific user fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_fenceRank\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update reserved nodes of a user fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"user_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update reserved nodes of a user fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing user fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const nodes =  pm.response.json().nodes;",
																			"    const updatedNodeName = nodes[nodes.length - 1];",
																			"    pm.environment.set(\"rd_clusterNodeName\", updatedNodeName);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/nodes\",\n      \"value\": [\n        \"env-276686laio1use1\"\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update reserved nodes of a sepcific user fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_clusterNodeName\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update configured users of a user fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Create a user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Create user\", function () {",
																			"    pm.response.to.have.status(201);",
																			"    const user = pm.response.json();",
																			"    pm.environment.set(\"rd_userId\", user.id);",
																			"    pm.environment.set(\"rd_nameOfUser\", user.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) Authorization token",
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"fullName\": \"James Smith\",\n    \"username\": \"james.smith\",\n    \"description\": \"New User\",\n    \"password\": \"newPassword\"\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/api/users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"users"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "",
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Create a new user. The response includes the user ID, which other endpoints use as a request parameter to specify the user to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new user in the body parameter of the request."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"user_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update configured users of a user fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing user fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const users =  pm.response.json().users;",
																			"    const configuredUser = users[users.length - 1];",
																			"    pm.environment.set(\"rd_userId\", configuredUser.id);",
																			"    pm.environment.set(\"rd_nameOfUser\", configuredUser.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/users\",\n      \"value\": [\n          {\n              \"id\": \"{{rd_userId}}\",\n              \"name\": \"{{rd_nameOfUser}}\"\n          }\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update configured users of a sepcific user fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_userId\");",
																			"    pm.environment.unset(\"rd_nameOfUser\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update configured user groups of a user fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Create a user group",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Create a user group\", function () {",
																			"    pm.response.to.have.status(201);",
																			"    const userGroup = pm.response.json();",
																			"    pm.environment.set(\"rd_userGroupId\", userGroup.id);",
																			"    pm.environment.set(\"rd_userGroupName\", userGroup.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) Authorization token",
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"name\": \"New Test User Group\",\n    \"description\": \"New Test user group\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/usergroups",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"usergroups"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "",
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Create a new user group. The response includes the usergroup ID, which other endpoints use as a request parameter to specify the user group to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information to create the user group in the body parameter of the request - including the name and description of the user group, the IDs of parent user groups, and the IDs of child users or user groups."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"user_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update configured user groups of a user fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing user fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const usergroups =  pm.response.json().usergroups;",
																			"    const userGroup = usergroups[usergroups.length - 1];",
																			"    pm.environment.set(\"rd_userGroupId\", userGroup.id);",
																			"    pm.environment.set(\"rd_userGroupName\", userGroup.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/usergroups\",\n      \"value\": [\n          {\n              \"id\": \"{{rd_userGroupId}}\",\n              \"name\": \"{{rd_userGroupName}}\"\n          }\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update configured user groups a sepcific user fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_userGroupId\");",
																			"    pm.environment.unset(\"rd_userGroupName\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update configured projects of a user fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get projects for authenticated user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get projects for authenticated user\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const projects =  pm.response.json();",
																			"    const project = projects[projects.length - 1];",
																			"    pm.environment.set(\"rd_projectId\", project.id);",
																			"    pm.environment.set(\"rd_projectName\", project.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"description": "(Required) Authorization token",
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/projects",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"projects"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "",
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"user_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update configured projects of a user fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing user fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const projects =  pm.response.json().projects;",
																			"    const configuredProject = projects[projects.length - 1];",
																			"    pm.environment.set(\"rd_projectId\", configuredProject.id);",
																			"    pm.environment.set(\"rd_projectName\", configuredProject.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/projects\",\n      \"value\": [\n          {\n              \"id\": \"{{rd_projectId}}\",\n              \"name\": \"{{rd_projectName}}\"\n          }\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update configured projects of a sepcific user fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing user fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_projectId\");",
																			"    pm.environment.unset(\"rd_projectName\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Update an existing workload fence",
											"item": [
												{
													"name": "Update rank of a workload fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"workload_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update rank of a workload fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing workload fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fenceRank =  pm.response.json().rank;",
																			"    pm.environment.set(\"rd_fenceRank\", fenceRank);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/rank\",\n      \"value\": 1\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update rank of a sepcific workload fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing workload fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_fenceRank\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update reserved nodes of a workload fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"workload_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update reserved nodes of a workload fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing workload fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const nodes =  pm.response.json().nodes;",
																			"    const updatedNodeName = nodes[nodes.length - 1];",
																			"    pm.environment.set(\"rd_clusterNodeName\", updatedNodeName);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/nodes\",\n      \"value\": [\n        \"env-276686laio2use1\"\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update reserved nodes of a sepcific workload fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing workload fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_clusterNodeName\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												},
												{
													"name": "Update configured projects of a workload fence",
													"item": [
														{
															"name": "Login",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Login\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"loginMode\": {{loginMode}},\r\n    \"maxSearch\": 3,\r\n    \"workingSet\": 10,\r\n    \"changePassword\": false,\r\n    \"newPassword\": \"dolore enim culpa incididunt\",\r\n    \"metadataLocale\": \"en_us\",\r\n    \"warehouseDataLocale\": \"en_us\",\r\n    \"displayLocale\": \"en_us\",\r\n    \"messagesLocale\": \"en_us\",\r\n    \"numberLocale\": \"en_us\",\r\n    \"timeZone\": \"UTC\",\r\n    \"applicationType\": 35\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/auth/login",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"login"
																	]
																},
																"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
															},
															"response": []
														},
														{
															"name": "Get projects for authenticated user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get projects for authenticated user\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const projects =  pm.response.json();",
																			"    const project = projects[projects.length - 1];",
																			"    pm.environment.set(\"rd_projectId\", project.id);",
																			"    pm.environment.set(\"rd_projectName\", project.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"description": "(Required) Authorization token",
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/projects",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"projects"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": "",
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														},
														{
															"name": "Get details of all existing user and workload fences",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Get details of all existing user and workload fences\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const fences =  pm.response.json().fences;",
																			"    for(let i=0; i< fences.length; i++) {",
																			"        const fence = fences[i];",
																			"        if(fence.type === \"workload_fence\") {",
																			"            pm.environment.set(\"rd_fenceName\", fence.name);",
																			"            break;",
																			"        }",
																			"    }",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	]
																},
																"description": "Get the details of all existing fences that the authenticated user has access to. Fences can be either User of Workload type.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to retrieve the list of all existing fences.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header.\n\nYou use the fields query parameters to selectively retrieve part of the response model.\n\nRetrieved details provide information about rank, name, type and reserved nodes."
															},
															"response": []
														},
														{
															"name": "Update configured projects of a workload fence",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Update an existing workload fence\", function () {",
																			"    pm.response.to.have.status(200);",
																			"    const projects =  pm.response.json().projects;",
																			"    const configuredProject = projects[projects.length - 1];",
																			"    pm.environment.set(\"rd_projectId\", configuredProject.id);",
																			"    pm.environment.set(\"rd_projectName\", configuredProject.name);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"description": "(Required) Authorization token",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/projects\",\n      \"value\": [\n          {\n              \"id\": \"{{rd_projectId}}\",\n              \"name\": \"{{rd_projectName}}\"\n          }\n      ]\n    }\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/iserver/fences/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"iserver",
																		"fences",
																		":name"
																	],
																	"query": [
																		{
																			"key": "fields",
																			"value": null,
																			"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
																			"disabled": true
																		}
																	],
																	"variable": [
																		{
																			"key": "name",
																			"value": "{{rd_fenceName}}",
																			"description": "(Required) Fence name"
																		}
																	]
																},
																"description": "Update configured projects of a sepcific workload fence based on the fence name, that the authenticated user has access to.\n\n[DssXmlPrivilegesConfigureServerBasic](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesConfigureServerBasic) and [DssXmlPrivilegesUseClusterMonitor](https://www2.microstrategy.com/producthelp/Current/WebAPIReference/com/microstrategy/webapi/EnumDSSXMLPrivilegeTypes.html#DssXmlPrivilegesUseClusterMonitor) privileges are required to update an existing workload fence.\n\nYou obtain the authorization token needed to execute the request using POST /auth/login; You obtain the fence name using GET /iserver/fences. You pass the authorization token in the request header. You specify the fence name in the path of the request.\n\nYou use the fields query parameters to selectively retrieve part of the response model."
															},
															"response": []
														},
														{
															"name": "Logout",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Logout\", function() {",
																			"    pm.response.to.have.status(204);",
																			"    pm.environment.unset(\"authToken\");",
																			"    pm.environment.unset(\"rd_fenceName\");",
																			"    pm.environment.unset(\"rd_projectId\");",
																			"    pm.environment.unset(\"rd_projectName\");",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-MSTR-AuthToken",
																		"value": "{{authToken}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/auth/logout",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"auth",
																		"logout"
																	]
																},
																"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
															},
															"response": []
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Manage Languages",
							"item": [
								{
									"name": "Retrieve, create and modify languages",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "List base languages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"List base languages\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_baseLocaleId\", pm.response.json().baseLocales[0].lcid);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/iserver/baseLanguages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"iserver",
														"baseLanguages"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Returns a list of base languages supported by iServer and available for use as a foundation for creating languages using POST /languages."
											},
											"response": []
										},
										{
											"name": "Get locale default formatting",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get local default formats\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/languages/baseLocaleDefaultFormats/:lcid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages",
														"baseLocaleDefaultFormats",
														":lcid"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "lcid",
															"value": "{{rd_baseLocaleId}}",
															"description": "(Required) Locale Id"
														}
													]
												},
												"description": "Returns a list of base languages supported by iServer and available for use as a foundation for creating languages using POST /languages."
											},
											"response": []
										},
										{
											"name": "Get a list of language objects",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"List user created language\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/languages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Returns a list of language object and their details."
											},
											"response": []
										},
										{
											"name": "Create language",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a language\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_languageId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Language\",\n  \"baseLanguageLcid\": {{rd_baseLocaleId}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/languages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Creates a new language object based on a base language with a new name"
											},
											"response": []
										},
										{
											"name": "Update language's name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update the created language\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/name\",\n      \"value\": \"Test Language updated\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/languages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_languageId}}",
															"description": "(Required) Language ID"
														}
													]
												},
												"description": "Update langauge object name"
											},
											"response": []
										},
										{
											"name": "Retrieve language details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve language details\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/languages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_languageId}}",
															"description": "(Required) Language ID"
														}
													]
												},
												"description": "Returns details for a specific language object."
											},
											"response": []
										},
										{
											"name": "Get formatting settings for locale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get formatting settings\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/languages/:id/formattingSettings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages",
														":id",
														"formattingSettings"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_languageId}}",
															"description": "(Required) Language ID"
														}
													]
												},
												"description": "Retrieves the formatting settings for a Language based on the Language ID"
											},
											"response": []
										},
										{
											"name": "Modify formatting settings for locale",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Modify format settings\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/formattingSettings/timeInterval/hour\",\n      \"value\": \"H\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/languages/:id/formattingSettings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"languages",
														":id",
														"formattingSettings"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_languageId}}",
															"description": "(Required) Language ID"
														}
													]
												},
												"description": "Update formatting settings for specific Language. You provide the request body as of list of replace operations to be performed on the value of array of nodes with the path URI containing the corresponding project id that needs to be updated."
											},
											"response": []
										},
										{
											"name": "Delete the user created language",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the created language\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/objects/:id?type=45",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"objects",
														":id"
													],
													"query": [
														{
															"key": "type",
															"value": "45",
															"description": "(Required) Object type. An integer enum from EnumDSSXMLObjectTypes, https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLObjectTypes.html.. Currently, we don't support deletion of object type 32 (Projects/Applications) using this endpoint."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_languageId}}",
															"description": "(Required) Language ID"
														}
													]
												},
												"description": "Returns details for a specific language object."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_languageId\");",
															"    pm.environment.unset(\"rd_baseLocaleId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									],
									"description": "This workflow showcase how to build a language through REST API."
								}
							],
							"description": "These workflow showcase how to modify languages through REST API."
						},
						{
							"name": "Manage Quick Search Indices",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the search index properties for all projects",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get the search index properties for all projects\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/mstrServices/searchEngine/indices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mstrServices",
												"searchEngine",
												"indices"
											]
										},
										"description": "Get properties of the search index for all projects. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Get list of available projects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Search for Objects/Get list of available projects\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[0].id;",
													"    pm.environment.set(\"rd_projectId\", projectId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											]
										},
										"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Get the search index properties for a specific project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get the search index properties for a specific project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/mstrServices/searchEngine/indices/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mstrServices",
												"searchEngine",
												"indices",
												":projectId"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{rd_projectId}}"
												}
											]
										},
										"description": "Get properties of the search index for a specific project. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token in the request header. You retrieve the search index by specifying the project ID in the path of the request."
									},
									"response": []
								},
								{
									"name": "Change the search index status for a project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Change the search index status for a project\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"searchIndexAction\": \"rebuild_index\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/mstrServices/searchEngine/indices/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mstrServices",
												"searchEngine",
												"indices",
												":projectId"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{rd_projectId}}"
												}
											]
										},
										"description": "Change the status of the search index for a specific project. You obtain the authorization token needed to execute the request using POST /auth/login. You obtain the project ID using GET /projects. You pass the authorization token in the request header. You retrieve the search index by specifying the project ID in the path of the request. You specify the type of the operation (Current supported operation types: rebuild) in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get the search engine properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get the search engine properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/mstrServices/searchEngine",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mstrServices",
												"searchEngine"
											]
										},
										"description": "Get properties of the search engine. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Update the search engine properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update the search engine properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enableSearchEngine\": true,\n  \"indexDirectory\": \".\\\\SearchData\",\n  \"stopWords\": [\n    {\n      \"words\": \"string\",\n      \"locale\": 1033\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/mstrServices/searchEngine",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"mstrServices",
												"searchEngine"
											]
										},
										"description": "Update all of the properties of the search engine.You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to update the properties in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Manage Startup Cluster Membership",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
									},
									"response": []
								},
								{
									"name": "Get Cluster Startup Configuration",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/iserver/clusterStartupMembership",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"iserver",
												"clusterStartupMembership"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Cluster Startup Configuration",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"clusterStartupMembership\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/iserver/clusterStartupMembership",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"iserver",
												"clusterStartupMembership"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_maxUserConnectionPerServer\");",
													"    pm.environment.unset(\"rd_allServerSettings\");",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										},
										"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage User and User Groups",
					"item": [
						{
							"name": "Create and Update User Group",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a user group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create usergroup\", function () {",
													"    pm.response.to.have.status(201); //should be 201 if user is created",
													"    const groupObj = pm.response.json();",
													"    pm.environment.set(\"rd_usergroupId\", groupObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestUserGroup\",\n    \"description\": \"A test user group\"\n\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/usergroups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											]
										},
										"description": "Create a new user group. The response includes the usergroup ID, which other endpoints use as a request parameter to specify the user group to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information to create the user group in the body parameter of the request - including the name and description of the user group, the IDs of parent user groups, and the IDs of child users or user groups."
									},
									"response": []
								},
								{
									"name": "Get user group info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get user group information\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Get information for a specific user group. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user group by specifying the usergroup ID in the path of the request; you obtain the usergroup ID using GET /usergroups."
									},
									"response": []
								},
								{
									"name": "Get users to be added to group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get users to add to group\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const userList = pm.response.json();",
													"    pm.expect(userList.length!==0).to.be.true;",
													"    const lastUserId = userList[userList.length-1].id",
													"    pm.environment.set(\"rd_userId\", lastUserId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users?nameBegins=a&fields=id,name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "a",
													"description": "Characters that the user name must begin with."
												},
												{
													"key": "fields",
													"value": "id,name",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n"
												},
												{
													"key": "abbreviationBegins",
													"value": null,
													"description": "Characters that the user abbreviation must begin with.\n\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "id",
													"value": null,
													"description": "List of User ids",
													"disabled": true
												}
											]
										},
										"description": "Get information for a specific set of users. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the set of users to be returned with query parameters that specify the characters that the user name or abbreviation must begin with. You can use other query parameters to limit the results that are returned by specifying a starting point within the results and the maximum number of results that should be returned."
									},
									"response": []
								},
								{
									"name": "Add members and update group information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"add members and update group info\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n         \"op\": \"replace\",\n         \"path\": \"/description\",\n         \"value\": \"Software Engineers\"\n        },\n        {\n        \"op\": \"add\",\n        \"path\": \"/members\",\n        \"value\": [\"{{rd_userId}}\"]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>",
													"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Update specific information for a specific user group. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user group by specifying the usergroup ID in the path of the request; you obtain the usergroup ID using GET /usergroups. You specify the type of update operation (add, replace or remove), provide the value to be used in the update operation, and specify the path to the target where the update operation will be performed, in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get user group member info",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get user group members\", function () {",
													"    pm.response.to.have.status(200);",
													"    const userList = pm.response.json();",
													"    pm.expect(userList.length === 1).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id",
												"members"
											],
											"query": [
												{
													"key": "projectId",
													"value": null,
													"description": "Project ID",
													"disabled": true
												},
												{
													"key": "securityFilter",
													"value": null,
													"description": "Specifies whether to return security filter information\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "includeAccess",
													"value": null,
													"description": "Specifies whether to return access for members\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "flatMembers",
													"value": null,
													"description": "Specifies whether to flatten the members to user level\n\nDefault value : false",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": null,
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Get member information for a specific user group. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user group by specifying the usergroup ID in the path of the request; you obtain the usergroup ID using GET /usergroups. You use the includeAccess query parameter to specify whether to list the security roles the user group is a member of and the projects the user group is a member of for each security role.You use flatMembers query parameter to specify whether to flat the members to user level."
									},
									"response": []
								},
								{
									"name": "Delete specific user group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete created user group\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/usergroups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"usergroups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_usergroupId}}"
												}
											]
										},
										"description": "Delete user group for specific user group id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user group ID in the path of the request;you obtain the user ID using GET /usersgroups. "
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_usergroupId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "A workflow sample for managing user groups in the metadata is provided below. The following sequence of REST API requests allows an administrative user to create and update a user group, and optionally get information about the user group to confirm the creation and updates."
						},
						{
							"name": "Create and Update User",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create user\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const userObj = pm.response.json();",
													"    pm.environment.set(\"rd_userId\", userObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fullName\": \"TestUser\",\n    \"username\": \"testuser\",\n    \"description\": \"New User\",\n    \"password\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new user. The response includes the user ID, which other endpoints use as a request parameter to specify the user to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new user in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Create a user address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create user email address\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"email address\",\n    \"value\": \"testuser@bigcompany.com\",\n    \"deliveryMode\": \"EMAIL\",\n    \"device\": \"GENERIC_EMAIL\",\n    \"isDefault\": true,\n    \"default\": false\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/:id/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id",
												"addresses"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Create a new address for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users. You provide the information used to create the new user address in the body parameter of the request - including the name and actual value for the address, whether it is the default address, and the type of delivery and content style."
									},
									"response": []
								},
								{
									"name": "Send an email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"send user email\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"notificationType\": \"DOSSIER_COMMENT\",\n    \"userIds\": [\n        \"{{rd_userId}}\"\n    ],\n    \"subject\": \"Practice Email\",\n    \"content\": \"<html xmlns=\\\"http:\\\\www.w3.org\\\\1999\\\\xhtml\\\"><body align=\\\"center\\\" style=\\\"margin:0;padding:0;font-family:'Helvetica';font-size:14px;\\\"><div>Hello and welcome to the Developer Team at Big Company</div><div>TestUser</div>testuser<div></div></body></html>\",\n    \"isHTML\": true,\n    \"extraProperties\": {}\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/emails",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"emails"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Send an email to specified recipients. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. In the body parameter of the request, you specify the recipients of the email, the content of the subject line, the content of the message body, whether the content is HTML, and any extra properties. "
									},
									"response": []
								},
								{
									"name": "Update info for a specific user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update user info\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/description\",\n            \"value\": \"Test User Updated Description\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Update specific information for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users. You specify the type of update operation (add, replace or remove), provide the value to be used in the update operation, and specify the path to the target where the update operation will be performed, in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get info for a specific user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get info for created user\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Get information for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users."
									},
									"response": []
								},
								{
									"name": "Duplicate a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Duplicate a user\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const userObj = pm.response.json();",
													"    pm.environment.set(\"rd_duplicateUserId\", userObj.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fullName\": \"Duplicate User\",\n    \"username\": \"duplicateuser\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/users?sourceUserId={{rd_userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												},
												{
													"key": "sourceUserId",
													"value": "{{rd_userId}}",
													"description": "Source user ID. A duplicate user will be created from this source user."
												}
											]
										},
										"description": "Create a new user. The response includes the user ID, which other endpoints use as a request parameter to specify the user to perform an action on. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new user in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Delete created user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete created user\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Delete user for specific user id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request;you obtain the user ID using GET /users. "
									},
									"response": []
								},
								{
									"name": "Delete duplicated user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete duplicated user\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_duplicateUserId}}"
												}
											]
										},
										"description": "Delete user for specific user id. You obtain the authorization token needed to execute the request using POST /auth/login;you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request;you obtain the user ID using GET /users. "
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_usergroupId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "A workflow sample for creating a new user, a process often called onboarding, is provided below. The following sequence of REST API requests allows an administrative user to create a new user, update the user information, create an email address for the user, and send the new user a welcome email."
						},
						{
							"name": "Create and Manage Security Roles",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all security roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get all security roles\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/securityRoles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityRoles"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all security roles. A security role describes the ability to do something, such as create, edit, add, delete, view, manage, save, search, share, export, and so on. A security role has a name, a description, and a privilege. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. The response includes the security role ID, which other endpoints use as a request parameter to specify the security role to perform an action on."
									},
									"response": []
								},
								{
									"name": "Get users to be added to group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get users to add to group\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const userList = pm.response.json();",
													"    pm.expect(userList.length!==0).to.be.true;",
													"    const lastUserId = userList[userList.length-1].id",
													"    pm.environment.set(\"rd_userId\", lastUserId);",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users?nameBegins=a&fields=id,name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "nameBegins",
													"value": "a",
													"description": "Characters that the user name must begin with."
												},
												{
													"key": "fields",
													"value": "id,name",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n"
												},
												{
													"key": "abbreviationBegins",
													"value": null,
													"description": "Characters that the user abbreviation must begin with.\n\n",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"description": "Starting point within the collection of returned search results. Use to control paging behavior.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"description": "Maximum number of items returned for a single search request. Use to control paging behavior. Use -1 for no limit (subject to governing settings).\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "id",
													"value": null,
													"description": "List of User ids",
													"disabled": true
												}
											]
										},
										"description": "Get information for a specific set of users. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the set of users to be returned with query parameters that specify the characters that the user name or abbreviation must begin with. You can use other query parameters to limit the results that are returned by specifying a starting point within the results and the maximum number of results that should be returned."
									},
									"response": []
								},
								{
									"name": "Create a specified security role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create security role\", function () {",
													"    pm.response.to.have.status(201);",
													"    const securityRole = pm.response.json();",
													"    pm.collectionVariables.set(\"rd_securityRoleId\", securityRole.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Demo Security Role\",\n  \"description\": \"Demo for security role creation\",\n  \"privileges\": [\n    {\n      \"id\": \"1\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/securityRoles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityRoles"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new security role. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can create a new security role and specify the security role name, description, and assigned privileges. You can assign this created security role to users and usergroups for specific projects. The response will contain the id for the newly created security role, which can be used to obtain the new created security role info using GET /securityRoles/{id}."
									},
									"response": []
								},
								{
									"name": "Update info for a specific security role",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update security role\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/members\",\n            \"value\": {\n                \"projectId\": \"{{projectId}}\",\n                \"memberIds\": [\n                    \"{{rd_userId}}\"\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/securityRoles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityRoles",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityRoleId}}"
												}
											]
										},
										"description": "Update information for a specific security role. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the security role to update by specifying the security role ID in the path of the request; you obtain the security role ID using GET /securityRoles. You provide the information to update the security role in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get information for a security role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read security role info\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/securityRoles/:id?fields=projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityRoles",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "projects",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityRoleId}}"
												}
											]
										},
										"description": "Get information for a security role with security role Id. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify security role ID in the path of the request, then you can obtain the security role information about its base info(such as name, id and type), assigned privileges and assigned <project, members> relations info about assigning this created security role to user/userGroup in specified project."
									},
									"response": []
								},
								{
									"name": "Get security roles for a specific user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get security roles for user\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/users/:id/securityRoles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"users",
												":id",
												"securityRoles"
											],
											"query": [
												{
													"key": "projectId",
													"value": "sed minim",
													"description": "Project ID",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_userId}}"
												}
											]
										},
										"description": "Get all of the security roles for a specific user in a specific project. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users. You identify the project by specifying the project ID as a query parameter; you obtain the project ID using GET /projects."
									},
									"response": []
								},
								{
									"name": "Delete a security role",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete security filter\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"description": "(Required) Authorization token",
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/securityRoles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"securityRoles",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_securityRoleId}}"
												}
											]
										},
										"description": "Delete info for a security role with given Id. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You delete the security role using Delete /securityRoles/{id}."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_securityRoleId\");",
													"    pm.environment.unset(\"rd_userId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "A workflow sample for creating a new security role in the metadata is provided below. The following sequence of REST API requests allows an administrator to create a new security role, and optionally get information about the security role to confirm the creation and updates."
						}
					],
					"description": "Administrators can make REST API calls to manage users and user groups. They can create new users, a process often called onboarding, and assign the new users to one or more user groups. They can create new user groups and update existing ones. And, they can update information for users."
				},
				{
					"name": "Monitors",
					"item": [
						{
							"name": "Manage an Intelligence Server Cluster",
							"item": [
								{
									"name": "Add and Remove Node to Connected Cluster",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get information about nodes in the connected Intelligence Server cluster",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get nodes in connected cluster\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"rd_nodename\", pm.response.json().nodes[0].name)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes"
													],
													"query": [
														{
															"key": "projects.id",
															"value": "",
															"description": "Project ID",
															"disabled": true
														},
														{
															"key": "name",
															"value": null,
															"description": "Node name",
															"disabled": true
														},
														{
															"key": "fields",
															"value": null,
															"disabled": true
														}
													]
												},
												"description": "Get information about nodes in the connected Intelligence Server cluster. This includes basic information, runtime state and information of projects on each node. This operation requires the \"Monitor cluster\" privilege. You specify an authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Add a node to the connected Intelligence Server cluster",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('add node to connected intelligence server cluster', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([202, 200])",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes",
														":name"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "{{rd_nodeName}}",
															"description": "(Required) Intelligence Server cluster node name"
														}
													]
												},
												"description": "Add a node to the connected Intelligence Server cluster. The node must meet I-Server clustering requirements. If the node is part of a multi-node cluster, all the nodes in that cluster will be added. If the node is already in the cluster, the operation succeeds without making any change. This operation requires the \"Monitor cluster\" and \"Administer cluster\" privilege. You specify the authorization token in the request header and the node name in the path. "
											},
											"response": []
										},
										{
											"name": "Remove a node from the connected Intelligence Server cluster",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('remove node to connected intelligence server cluster', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([202, 204])",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes",
														":name"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "{{rd_nodename}}",
															"description": "(Required) Intelligence Server cluster node name"
														}
													]
												},
												"description": "Remove a node from the connected Intelligence Server cluster. After a successful removal, some existing authorization tokens may become invalidated and in this case re-login is needed. You cannot remove a node if it's the configured default node of Library Server, or there is only one node in the cluster. This operation requires the \"Monitor cluster\" and \"Administer cluster\" privilege. You specify an authorization token in the request header and the node name in the path. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_nodename\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow sample demonstrates how to add a node to the connected Intelligence Server cluster. Please note that it is recommended to make sure no other user is connected to Library Server and Intelligence Server nodes and that editing cluster membership is an administrative action and should be performed exclusively."
								}
							],
							"description": "MicroStrategy REST exposes a set of APIs for viewing and editing members of connected Intelligence Server cluster:\n* View member nodes and projects of the connected cluster\n* Adding a node to the connected cluster\n* Removing a node from the connected cluster\n\nThe add/remove node requests in these folders require users to change the request body to prevent accidental environment changes."
						},
						{
							"name": "Purge Object and Element Caches",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a project for authenticated user\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-AsyncMode",
												"value": "true",
												"description": "Specifies whether to make the call synchronously or asynchronously; make the call asynchronously if set to true",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"My Test Project\",\n    \"description\": \"Test Project Created by REST API Workflow\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new project, either synchronously or asynchronously. It can take several minutes to create a project. To fetch the actual project information, you need to poll using GET projects/{name}. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify whether to make the call synchronously or asynchronously in the request header. You provide the project name in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get a specific project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get a specific project for authenticated user\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[\"id\"];",
													"    pm.environment.set(\"rd_projectId\", projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":name"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "My Test Project",
													"description": "(Required) Project name"
												}
											]
										},
										"description": "Get a specific project that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of the specified project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specifiy the name of the project in the path of the request."
									},
									"response": []
								},
								{
									"name": "Delete object cache for a project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Purge Caches for project\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/projects/:projectId/caches/:cacheType",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"projects",
												":projectId",
												"caches",
												":cacheType"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{rd_projectId}}",
													"description": "(Required)"
												},
												{
													"key": "cacheType",
													"value": "object",
													"description": "(Required) Cache Type\n\nAvailable values : element, object\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete element cache for a project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Purge Caches for project\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/projects/:projectId/caches/:cacheType",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"projects",
												":projectId",
												"caches",
												":cacheType"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{rd_projectId}}",
													"description": "(Required)"
												},
												{
													"key": "cacheType",
													"value": "element",
													"description": "(Required) Cache Type\n\nAvailable values : element, object\n\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_projectId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow shows how to purge object and element cache for a project."
						},
						{
							"name": "Monitor and Manage Cube Caches",
							"item": [
								{
									"name": "Cube Management",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get node name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get node name\", function () {",
															"    pm.response.to.have.status(200);",
															"    let nodes = pm.response.json().nodes",
															"    if (nodes && nodes.length > 0) {",
															"     pm.environment.set(\"rd_nodeName\", nodes[0].name);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the list of cube caches on an specific cluster node",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get list of cube caches\", function () {",
															"    pm.response.to.have.status(200);",
															"    const response = pm.response.json();",
															"    const activeStatus = response.cubeCaches[0].state.active",
															"    pm.environment.set(\"rd_cubeCacheOriginalActiveStatus\", activeStatus)",
															"    pm.environment.set(\"rd_cubeCacheId\", response.cubeCaches[0].id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes?clusterNode={{rd_nodeName}}&limit=5&projectIds={{projectId}}&state.loadedState=loaded",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes"
													],
													"query": [
														{
															"key": "clusterNode",
															"value": "{{rd_nodeName}}",
															"description": "(Required) Intelligence Server cluster node name"
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "5",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														},
														{
															"key": "projectIds",
															"value": "{{projectId}}",
															"description": "Project id collection which is used for filtering data, for example 'B19DEDCC11D4E0EFC000EB9495D0F6E2,A232EDCC11D4E0EFC000EB9495D0F6E2'"
														},
														{
															"key": "state.loadedState",
															"value": "loaded",
															"description": "Loaded state filter field which is used for filtering loaded cube cache, valid input: 'loaded'"
														},
														{
															"key": "sortBy",
															"value": "<string>",
															"description": "Specify sorting criteria, for example '+name,-size' means sorting name ascending and size descending",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													]
												},
												"description": "Get the list of cube caches.You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can specify sorting criteria on fields: name, size, hitCount, lastUpdateTime, status, project, owner, you can also filter response data by projectId or status, you can set the offset and limit for pagination function, and provide the clusterNode, you will retrieve the cube caches infos"
											},
											"response": []
										},
										{
											"name": "Alter an cube cache status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"alteredStatus\", !pm.environment.get(\"rd_cubeCacheOriginalActiveStatus\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"load a cube cache\", function () {",
															"    pm.response.to.have.status(202);",
															"    const response = pm.response.json();",
															"    pm.environment.set(\"rd_cubeCacheManipulationId\", response.manipulationId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
														"key": "Prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": {\n        \"active\": {{alteredStatus}}\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_cubeCacheId}}",
															"description": "(Required) Cube cache id"
														}
													]
												},
												"description": "Alter an cube cache status in a specific cluster node.You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header.You need specify cube cache id in the path of the request, and you can get cube cache id from API GET /monitors/caches/cubes."
											},
											"response": []
										},
										{
											"name": "Get the manipulation status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get status of manipulation\", function () {",
															"    pm.response.to.have.status(200);",
															"    if (pm.response.json().status !== \"ready\") {",
															"        setTimeout(() => console.log( \"waiting for manipulation to finish\"),3000)",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes/manipulations/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes",
														"manipulations",
														":id",
														"status"
													],
													"query": [
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_cubeCacheManipulationId}}",
															"description": "(Required) Cache manipulation id"
														}
													]
												},
												"description": "Get the manipulation status.You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify manipulation id in the path of the request, and you can get the manipulation id from API PATCH /monitors/caches/cubes/{id}, then you can obtain the status."
											},
											"response": []
										},
										{
											"name": "Return cube cache to original state",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"return cube cache to original state\", function () {",
															"    pm.response.to.have.status(202);",
															"    setTimeout(()=>{console.log(\"Waiting for cube to finish reverting\")}, 3000)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
														"key": "Prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": {\n        \"active\": {{rd_cubeCacheOriginalActiveStatus}}\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_cubeCacheId}}",
															"description": "(Required) Cube cache id"
														}
													]
												},
												"description": "Alter an cube cache status in a specific cluster node.You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header.You need specify cube cache id in the path of the request, and you can get cube cache id from API GET /monitors/caches/cubes."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_nodeName\");",
															"    pm.environment.unset(\"rd_cubeCacheId\");",
															"    pm.environment.unset(\"rd_cubeCacheManipulationId\");",
															"    pm.environment.unset(\"rd_cubeCacheOriginalActiveStatus\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to retrieve information about cube caches and alter a cube cache's status."
								},
								{
									"name": "Cube Monitoring",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get node name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get node name\", function () {",
															"    pm.response.to.have.status(200);",
															"    let nodes = pm.response.json().nodes",
															"    if (nodes && nodes.length > 0) {",
															"     pm.environment.set(\"rd_nodeName\", nodes[0].name);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the aggregated cube cache capacity usage info which groups by project",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"aggregate cache capacity by project\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes/aggregatedUsages?clusterNode={{rd_nodeName}}&aggregateBy=project",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes",
														"aggregatedUsages"
													],
													"query": [
														{
															"key": "clusterNode",
															"value": "{{rd_nodeName}}",
															"description": "(Required) Intelligence Server cluster node name"
														},
														{
															"key": "aggregateBy",
															"value": "project",
															"description": "An enum to control the cache usage aggregated by which object, currently just support aggregated by project or user"
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get the aggregated cube cache capacity usage info which groups by project or user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										},
										{
											"name": "Get the aggregated cube cache capacity usage info which groups by user",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"aggregate cache capacity by user\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes/aggregatedUsages?clusterNode={{rd_nodeName}}&aggregateBy=user",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes",
														"aggregatedUsages"
													],
													"query": [
														{
															"key": "clusterNode",
															"value": "{{rd_nodeName}}",
															"description": "(Required) Intelligence Server cluster node name"
														},
														{
															"key": "aggregateBy",
															"value": "user",
															"description": "An enum to control the cache usage aggregated by which object, currently just support aggregated by project or user"
														},
														{
															"key": "fields",
															"value": "ea do sit exercitation",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get the aggregated cube cache capacity usage info which groups by project or user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										},
										{
											"name": "Get the list of cube caches on an specific cluster node",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get list of cube caches\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/caches/cubes?clusterNode={{rd_nodeName}}&limit=5&projectIds={{projectId}}&state.loadedState=loaded",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"caches",
														"cubes"
													],
													"query": [
														{
															"key": "clusterNode",
															"value": "{{rd_nodeName}}",
															"description": "(Required) Intelligence Server cluster node name"
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "5",
															"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit."
														},
														{
															"key": "projectIds",
															"value": "{{projectId}}",
															"description": "Project id collection which is used for filtering data, for example 'B19DEDCC11D4E0EFC000EB9495D0F6E2,A232EDCC11D4E0EFC000EB9495D0F6E2'"
														},
														{
															"key": "state.loadedState",
															"value": "loaded",
															"description": "Loaded state filter field which is used for filtering loaded cube cache, valid input: 'loaded'"
														},
														{
															"key": "sortBy",
															"value": "<string>",
															"description": "Specify sorting criteria, for example '+name,-size' means sorting name ascending and size descending",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													]
												},
												"description": "Get the list of cube caches.You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can specify sorting criteria on fields: name, size, hitCount, lastUpdateTime, status, project, owner, you can also filter response data by projectId or status, you can set the offset and limit for pagination function, and provide the clusterNode, you will retrieve the cube caches infos"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_nodeName\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to monitor a cube."
								}
							],
							"description": "You can use REST API requests to monitor and manage cube caches."
						},
						{
							"name": "Project Administration",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get information about nodes and projects with current status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get information about nodes and projects with current status\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"rd_nodename\", pm.response.json().nodes[0].name)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create a project for authenticated user\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "X-MSTR-AsyncMode",
												"value": "true",
												"description": "Specifies whether to make the call synchronously or asynchronously; make the call asynchronously if set to true",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"My Test Project\",\n    \"description\": \"Test Project Created by REST API Workflow\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new project, either synchronously or asynchronously. It can take several minutes to create a project. To fetch the actual project information, you need to poll using GET projects/{name}. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify whether to make the call synchronously or asynchronously in the request header. You provide the project name in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get all projects",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get a list of all projects that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of each project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies  whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Get a specific project for authenticated user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get a specific project for authenticated user\", function () {",
													"    pm.response.to.have.status(200);",
													"    const projectId = pm.response.json()[\"id\"];",
													"    pm.environment.set(\"rd_projectId\", projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":name"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "My Test Project",
													"description": "(Required) Project name"
												}
											]
										},
										"description": "Get a specific project that the authenticated user has access to. This endpoint returns the name, ID, description, alias, and status of the specified project; the project status corresponds to values from [EnumDSSXMLProjectStatus](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLProjectStatus.html). It also specifies whether this project is the platform analytics project, which contains a set of pre-defined reports that provide statistics for the IServer. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specifiy the name of the project in the path of the request."
									},
									"response": []
								},
								{
									"name": "Get filtered information for one project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get filtered information for one project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes?projects.id={{rd_projectId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes"
											],
											"query": [
												{
													"key": "projects.id",
													"value": "{{rd_projectId}}",
													"description": "Project ID\n\n"
												},
												{
													"key": "name",
													"value": "",
													"description": "Node Name\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update properties for a specific project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update properties for a specific project\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/status\",\n      \"value\": \"loaded\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes/:nodename/projects/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes",
												":nodename",
												"projects",
												":projectId"
											],
											"variable": [
												{
													"key": "nodename",
													"value": "{{rd_nodename}}"
												},
												{
													"key": "projectId",
													"value": "{{rd_projectId}}"
												}
											]
										},
										"description": "request body format:\n\n\n    {\n      \"operationList\": [\n        {\n          \"op\": \"replace\",\n          \"path\": \"/status\",\n          \"value\": \"loaded\"\n        }\n      ]\n    }\n\nallowed status strings:\n\nloaded, unloaded, request_idle, exec_idle, wh_exec_idle, partial_idle, full_idle\n\nWARNING: loading/unloading a project takes a long time and prevents access to the project. Request body is empty by default to avoid accidental project loads"
									},
									"response": []
								},
								{
									"name": "View updated status of the project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"View updated status of the project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes?projects.id={{rd_projectId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes"
											],
											"query": [
												{
													"key": "projects.id",
													"value": "{{rd_projectId}}",
													"description": "Project ID\n\n"
												},
												{
													"key": "name",
													"value": "",
													"description": "Node Name\n\n",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "View all project status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"View all project status\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/monitors/projects",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"projects"
											],
											"query": [
												{
													"key": "offset",
													"value": "",
													"description": "Starting point within the collection of returned results. Used to control paging behavior. Default is 0.\n\nDefault value : 0",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"description": "Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.\n\nDefault value : -1",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unload project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update properties for a specific project\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"operationList\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/status\",\n      \"value\": \"unloaded\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/monitors/iServer/nodes/:nodename/projects/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"monitors",
												"iServer",
												"nodes",
												":nodename",
												"projects",
												":projectId"
											],
											"variable": [
												{
													"key": "nodename",
													"value": "{{rd_nodename}}",
													"description": "(Required)"
												},
												{
													"key": "projectId",
													"value": "{{rd_projectId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "request body format:\n\n\n    {\n      \"operationList\": [\n        {\n          \"op\": \"replace\",\n          \"path\": \"/status\",\n          \"value\": \"loaded\"\n        }\n      ]\n    }\n\nallowed status strings:\n\nloaded, unloaded, request_idle, exec_idle, wh_exec_idle, partial_idle, full_idle\n\nWARNING: loading/unloading a project takes a long time and prevents access to the project. Request body is empty by default to avoid accidental project loads"
									},
									"response": []
								},
								{
									"name": "Delete created project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"View all project status\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([202, 204])",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:projectId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":projectId"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.\n\n",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "projectId",
													"value": "{{rd_projectId}}",
													"description": "(Required)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_projectId\");",
													"    pm.environment.unset(\"rd_nodename\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "The following sequence of REST API requests allows an administrator to manage project distribution and configuration."
						},
						{
							"name": "Job Monitor",
							"item": [
								{
									"name": "Cancel Active Job By Id",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create an instance of prompt report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create an instance of prompted report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"CA21E8A44BC2D9869046C6A46E082A4B\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get node name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get node name\", function () {",
															"    pm.response.to.have.status(200);",
															"    let nodes = pm.response.json().nodes",
															"    if (nodes && nodes.length > 0) {",
															"     pm.environment.set(\"rd_nodeName\", nodes[0].name);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all jobs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get all jobs\", function () {",
															"    pm.response.to.have.status(200);",
															"    let jobs = pm.response.json().jobs",
															"    if (jobs && jobs.length > 0) {",
															"     pm.environment.set(\"rd_jobId\", jobs[0].id)",
															"    }",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/monitors/jobs?nodeName={{rd_nodeName}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"monitors",
														"jobs"
													],
													"query": [
														{
															"key": "nodeName",
															"value": "{{rd_nodeName}}",
															"description": "(Required) "
														},
														{
															"key": "puName",
															"value": "analytical",
															"description": "Field to filter on PU name\n\nAvailable values : browsing, resolution, query_execution, analytical, sql_engine, data_formatting, ncs, rest_asynchronous, unknown_pu",
															"disabled": true
														},
														{
															"key": "elapsedTime",
															"value": "gt:100",
															"description": "Field to filter on the job elapsed time, for example 'gt:100' means filtering jobs with elapsedTime greater than 100 milliseconds. Valid operators are:\n\ngt - greater than\nlt - less than",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "status",
															"description": "Specify sorting criteria, for example '+status' means sorting status in ascending order or '-user' means sorting user in descending order. Currently, the server supports sorting only by single field. For this endpoint, valid sorting properties are:\n\njobId\ntype\nstatus\nuser\ndescription\nobjectType\nobjectId\nsubscriptionType\nprocessingUnitPriority\ncreationTime\ncompletedTasks\nprojectId\nprojectName\nsubscriptionRecipient\nmemoryUsage\nelapsedTime",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get job by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get job by id\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/monitors/jobs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"monitors",
														"jobs",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_jobId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Cancel active job by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Cancel active job\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/monitors/jobs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"monitors",
														"jobs",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_jobId}}",
															"description": "(Required)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Manage Project Settings/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\")",
															"    pm.environment.unset(\"rd_reportId\")",
															"    pm.environment.unset(\"rd_nodeName\");",
															"    pm.environment.unset(\"rd_jobId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow will create a job, \"waiting for autoprompt\", by creating an instance of a prompted report. Then it will cancel this job.\n\nAdditional Notes:\n\n*   **WARNING: By default, this workflow assumes no other jobs are running hence it pulls the first job from list returned from api. Then it deletes this job. The job id used here is set during the tests for the \"Get all jobs\" api call. You can change it if the first job in list isn't the one you want deleted.**\n*   For more details on parameters used in the REST api calls in this workflow see: [https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html?visibility=all#/Monitors](https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html?visibility=all#/MonitorsThe)\n*   The prompted report id is set in the pre-request script of the instance creation api call. This can be changed to another report in your environment instead."
								},
								{
									"name": "Cancel Active Jobs In Bulk",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create an instance of prompt report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create an instance of prompted report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"CA21E8A44BC2D9869046C6A46E082A4B\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create second instance of prompt report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create an instance of prompted report\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"rd_reportId\", \"CA21E8A44BC2D9869046C6A46E082A4B\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_reportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get node name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get node name\", function () {",
															"    pm.response.to.have.status(200);",
															"    let nodes = pm.response.json().nodes",
															"    if (nodes && nodes.length > 0) {",
															"     pm.environment.set(\"rd_nodeName\", nodes[0].name);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/monitors/iServer/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"monitors",
														"iServer",
														"nodes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all jobs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get all jobs\", function () {",
															"    pm.response.to.have.status(200);",
															"    let jobs = pm.response.json().jobs",
															"    if (jobs && jobs.length > 1) {",
															"     pm.environment.set(\"rd_jobId\", jobs[0].id)",
															"     pm.environment.set(\"rd_jobId2\", jobs[1].id)",
															"    }",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/monitors/jobs?nodeName={{rd_nodeName}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"monitors",
														"jobs"
													],
													"query": [
														{
															"key": "nodeName",
															"value": "{{rd_nodeName}}",
															"description": "(Required) "
														},
														{
															"key": "puName",
															"value": "analytical",
															"description": "Field to filter on PU name\n\nAvailable values : browsing, resolution, query_execution, analytical, sql_engine, data_formatting, ncs, rest_asynchronous, unknown_pu",
															"disabled": true
														},
														{
															"key": "elapsedTime",
															"value": "gt:100",
															"description": "Field to filter on the job elapsed time, for example 'gt:100' means filtering jobs with elapsedTime greater than 100 milliseconds. Valid operators are:\n\ngt - greater than\nlt - less than",
															"disabled": true
														},
														{
															"key": "sortBy",
															"value": "status",
															"description": "Specify sorting criteria, for example '+status' means sorting status in ascending order or '-user' means sorting user in descending order. Currently, the server supports sorting only by single field. For this endpoint, valid sorting properties are:\n\njobId\ntype\nstatus\nuser\ndescription\nobjectType\nobjectId\nsubscriptionType\nprocessingUnitPriority\ncreationTime\ncompletedTasks\nprojectId\nprojectName\nsubscriptionRecipient\nmemoryUsage\nelapsedTime",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Cancel active job instances on specific intelligence server node.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Cancel active Jobs\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"jobIds\": [\n   \"{{rd_jobId}}\",\n   \"{{rd_jobId2}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/monitors/cancelJobs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"monitors",
														"cancelJobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Manage Project Settings/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\")",
															"    pm.environment.unset(\"rd_reportId\")",
															"    pm.environment.unset(\"rd_nodeName\");",
															"    pm.environment.unset(\"rd_jobId\");",
															"    pm.environment.unset(\"rd_jobId2\")",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow will create 2 jobs, both are \"waiting for autoprompt\", by creating two instances of a prompted report. Then it will cancel both the jobs.\n\nAdditional Notes:\n\n*   **WARNING: By default, this workflow assumes no other jobs are running hence it pulls the first two jobs from list returned from api. Then it deletes those jobs. The job ids used here is set during the tests for the \"Get all jobs\" api call. You can change them if the first two jobs in list isn't the ones you want deleted.**\n*   For more details on parameters used in the REST api calls in this workflow see: [https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html?visibility=all#/Monitors](https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html?visibility=all#/MonitorsThe)\n*   The prompted report id is set in the pre-request script of the instance creation api call. This can be changed to another report in your environment instead."
								}
							],
							"description": "You can use the REST api to monitor jobs."
						}
					]
				},
				{
					"name": "Distribution Services",
					"item": [
						{
							"name": "Manage Transmitters",
							"item": [
								{
									"name": "Retrieve Transmitters",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a list of transmitters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a list of transmitters\", function () {",
															"    pm.response.to.have.status(200);",
															"    const transmitters = pm.response.json().transmitters;",
															"    pm.environment.set(\"rd_transmitterId\",transmitters[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all transmitters that the authenticated user has access to. This endpoint returns the name, ID, and other information about transmitters. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Get transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get transmitter by id\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Get information of a specific transmitter by its ID. This endpoint returns the name, ID, and other information about the given transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You pass the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to retrieve transmitters."
								},
								{
									"name": "Create, Update, and Delete a Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test email transmitter\",\n  \"deliveryType\": \"email\",\n  \"emailTransmitterProperties\": {\n    \"senderDisplayName\": \"MicroStrategy Distribution Services\",\n    \"senderEmailAddress\": \"DistributionServices@MicroStrategy.com\",\n    \"replyToDisplayName\": \"MicroStrategy Distribution Services\",\n    \"replyToEmailAddress\": \"DistributionServices@MicroStrategy.com\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Update transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a transmitter\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test email transmitter(Updated)\",\n  \"description\": \"A email transmitter\",\n  \"deliveryType\": \"email\",\n  \"emailTransmitterProperties\": {\n    \"senderDisplayName\": \"MicroStrategy Distribution Services\",\n    \"senderEmailAddress\": \"DistributionServices@MicroStrategy.com\",\n    \"replyToDisplayName\": \"MicroStrategy Distribution Services\",\n    \"replyToEmailAddress\": \"DistributionServices@MicroStrategy.com\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Update all of the information for a specific transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You pass the transmitter ID in the path of the request. You provide the information used to update the specific transmitter in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create, update, and delete a transmitter."
								},
								{
									"name": "Create an Email Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Email\",\n    \"description\": \"Transmits email messages via SMTP\",\n    \"deliveryType\": \"email\",\n    \"emailTransmitterProperties\": {\n        \"senderDisplayName\": \"Random Sender Display Name\",\n        \"senderEmailAddress\": \"randomSender@MicroStrategy.com\",\n        \"replyToDisplayName\": \"Random Sender Display Name\",\n        \"replyToEmailAddress\": \"randomSender@MicroStrategy.com\",\n        \"recipientFieldType\": \"to\",\n        \"saveMessageToFile\": false,\n        \"sendMessageViaSmtp\": true,\n        \"saveFilePath\": \"\",\n        \"notifyOnSuccess\": true,\n        \"notifyOnFailure\": true,\n        \"notificationEmailAddress\": \"randomSender@microstrategy.com\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete an email transmitter."
								},
								{
									"name": "Create a File Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test File\",\n    \"description\": \"Transmits files to networked computers and servers\",\n    \"deliveryType\": \"file\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a file transmitter."
								},
								{
									"name": "Create a Print Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Print\",\n    \"description\": \"Prints to networked printers\",\n    \"deliveryType\": \"print\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a print transmitter."
								},
								{
									"name": "Create a FTP Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test FTP\",\n    \"description\": \"Transmits files to FTP servers\",\n    \"deliveryType\": \"ftp\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a FTP transmitter."
								},
								{
									"name": "Create a Mobile Transmitter",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create transmitter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create transmitter\", function () {",
															"    pm.response.to.have.status(201);",
															"    const transmitterId = pm.response.json().id",
															"    pm.environment.set(\"rd_transmitterId\", transmitterId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Mobile Client iPhone\",\n    \"description\": \"iPhone client for Mobile subscription\",\n    \"deliveryType\": \"iphone\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/transmitters",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new transmitter. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a transmitter in the request body. "
											},
											"response": []
										},
										{
											"name": "Remove transmitter by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a transmitter\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/transmitters/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"transmitters",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_transmitterId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Remove transmitter by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the transmitter ID using GET /transmitters. You remove the transmitter by passing the transmitter ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_transmitterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a mobile transmitter."
								}
							],
							"description": "These workflows covers managing transmitters. See related documentation: [https://www2.microstrategy.com/producthelp/Current/SystemAdmin/WebHelp/Lang_1033/Content/Creating_and_managing_transmitters.htm](https://www2.microstrategy.com/producthelp/Current/SystemAdmin/WebHelp/Lang_1033/Content/Creating_and_managing_transmitters.htm)."
						},
						{
							"name": "Manage Devices",
							"item": [
								{
									"name": "Retrieve Devices",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the list of devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get list of devices\", function () {",
															"    pm.response.to.have.status(200);",
															"    const listOfDevices = pm.response.json().devices",
															"    pm.environment.set(\"rd_deviceId\", listOfDevices[0].id)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "deviceType",
															"value": "iphone",
															"description": "Device type, Supported values are: email, file, ftp, printer, ipad, iphone, android, all.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all devices that the authenticated user has access to. This endpoint returns the name, ID, and other information about devices. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You specify the type of device as query parameter. Default value is all"
											},
											"response": []
										},
										{
											"name": "Get a device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a device by id\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Get information of a specific device by its ID. This endpoint returns the name, ID, and other information about the given device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the device ID using GET v2/devices. You pass the device ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to get a list of devices and then how to retrieve a specific device by id."
								},
								{
									"name": "Create, Update, and Delete Devices",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Generic iPhone\",\n    \"description\": \"This is a device of type iPhone\",\n    \"deviceType\": \"iphone\",\n    \"transmitter\": {\n        \"id\": \"F9583A8998014B4B906B5EAF7C361B33\"\n    },\n    \"deviceProperties\": {\n        \"iphone\": {\n            \"appId\": \"com.microstrategy.dossier.iphone\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Update device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a device\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Generic iPhone (Changes)\",\n    \"description\": \"This is a device of type iPhone.\",\n    \"deviceType\": \"iphone\",\n    \"transmitter\": {\n        \"id\": \"F9583A8998014B4B906B5EAF7C361B33\"\n    },\n    \"deviceProperties\": {\n        \"iphone\": {\n            \"appId\": \"com.microstrategy.dossier.iphone\",\n            \"port\":2199,\n            \"feedbackServicePort\": 2219\n\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Update all of the information for a specific device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the device ID using GET /devices. You pass the device ID in the path of the request. You provide the information used to update the specific device in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create, update, and delete a device."
								},
								{
									"name": "Create an Email Device",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Generic email\",\n    \"description\": \"Generic email client that supports HTML email. Works for most email clients\",\n    \"deviceType\": \"email\",\n    \"transmitter\": {\n        \"id\": \"C35E4F47777A11D4BE6C00B0D04B6F0B\",\n        \"name\": \"Email\"\n    },\n    \"deviceProperties\": {\n        \"email\": {\n            \"format\": \"mime\",\n            \"mimeSettings\": {\n                \"plainTextHtmlBodyEncoding\": \"quoted_printable\",\n                \"textAttachmentEncoding\": \"quoted_printable\",\n                \"binaryAttachmentEncoding\": \"base64\",\n                \"usAsciiEncoding\": true,\n                \"nonUsAsciiQuotes\": false,\n                \"embedHtmlAttachments\": false,\n                \"embedAllAttachments\": false,\n                \"embedAdobeFlashContent\": false,\n                \"htmlTablePositionOnly\": false,\n                \"cssInlineStyle\": false,\n                \"messageSensitivity\": \"normal\"\n            },\n            \"smartHostSettings\": {\n                \"server\": \"localhost\",\n                \"port\": 25,\n                \"alwaysUseSmartHost\": true\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete an email device."
								},
								{
									"name": "Create a File Device",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test User Selected Location\",\n    \"description\": \"User can enter any location\",\n    \"deviceType\": \"file\",\n    \"transmitter\": {\n        \"id\": \"892AF97969B94385AC476763F32140BF\",\n        \"name\": \"File\"\n    },\n    \"deviceProperties\": {\n        \"file\": {\n            \"fileLocation\": {\n                \"filePath\": \"./FileSubscription\",\n                \"appendUserPath\": true,\n                \"useBackupLocation\": false\n            },\n            \"fileSystem\": {\n                \"createFolder\": true,\n                \"filenameAppendTimeStamp\": true,\n                \"overrideFilename\": false,\n                \"appendToFile\": false\n            },\n            \"connectionParameters\": {\n                \"retriesCount\": 5,\n                \"secondsBetweenRetries\": 3,\n                \"deliveryTimeoutSeconds\": 10\n            },\n            \"fileProperties\": {\n                \"readOnly\": false,\n                \"archive\": false,\n                \"index\": false,\n                \"fileEncoding\": \"no_encrypt_compress\",\n                \"unixAccessRights\": \"\"\n            },\n            \"unixWindowsSharity\": {\n                \"sharityEnabled\": false\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a file device."
								},
								{
									"name": "Create a Print Device",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test User selected printer\",\n    \"description\": \"User can enter any printer\",\n    \"deviceType\": \"printer\",\n    \"transmitter\": {\n        \"id\": \"BDD57F9A9C874542BA3074FA8DDB5446\",\n        \"name\": \"Print\"\n    },\n    \"deviceProperties\": {\n        \"printer\": {\n            \"printerLocation\": {\n                \"userDefinedLocation\": true\n            },\n            \"printerProperties\": {\n                \"scale\": 100,\n                \"quality\": \"600\",\n                \"paperSource\": \"automatic\",\n                \"paperSize\": \"letter\",\n                \"pdfSetting\": {\n                    \"postScriptLevel\": 2,\n                    \"oddEvenPages\": \"all_pages\",\n                    \"reversePages\": false,\n                    \"applicationPriority\": \"other\"\n                }\n            },\n            \"connectionParameters\": {\n                \"retriesCount\": 2,\n                \"secondsBetweenRetries\": 1,\n                \"deliveryTimeoutSeconds\": 10\n            },\n            \"backupPrinterProperties\": {\n                \"printOnBackup\": false\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a print device."
								},
								{
									"name": "Create a FTP Device",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test FTP location\",\n    \"description\": \"User can enter any FTP location\",\n    \"deviceType\": \"ftp\",\n    \"transmitter\": {\n        \"id\": \"1B0D00DD763B4F3B8EECD64381E4C4DF\",\n        \"name\": \"FTP\"\n    },\n    \"deviceProperties\": {\n        \"ftp\": {\n            \"serverSettings\": {\n                \"protocol\": \"ftp\",\n                \"port\": 21,\n                \"path\": \"/\",\n                \"passiveMode\": true,\n                \"maxConnections\": -1,\n                \"asciiMode\": false\n            },\n            \"fileSystem\": {\n                \"createFolder\": true,\n                \"filenameAppendTimeStamp\": false,\n                \"overrideFilename\": false,\n                \"appendToFile\": true\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a FTP device."
								},
								{
									"name": "Create a Mobile Device",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create device",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create device\", function () {",
															"    pm.response.to.have.status(201);",
															"    const deviceId = pm.response.json().id;",
															"    pm.environment.set(\"rd_deviceId\", deviceId);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Apple Push Notifications for Dossier on iPad\",\n    \"description\": \"Provides Apple Push Notification Service support for the Dossier iPad app\",\n    \"deviceType\": \"ipad\",\n    \"transmitter\": {\n        \"id\": \"0CBB32A852984F098E72AC4690DEFF38\",\n        \"name\": \"Mobile Client iPad\"\n    },\n    \"deviceProperties\": {\n        \"ipad\": {\n            \"appId\": \"com.microstrategy.dossier.ipad\",\n            \"server\": \"api.push.apple.com\",\n            \"port\": 443,\n            \"providerCertificate\": \"/opt/mstr/MicroStrategy/install/CollaborationServer/apns-prod.pem\",\n            \"feedbackServiceServer\": \"feedback.push.apple.com\",\n            \"feedbackServicePort\": 2196\n        }\n    }\n},\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new device. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a device in the request body. "
											},
											"response": []
										},
										{
											"name": "Delete device by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a device\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/devices/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"devices",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_deviceId}}",
															"description": "(Required) Device ID"
														}
													]
												},
												"description": "Delete device by ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the Device id using GET /v2/devices. You delete the device by passing the device id in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_deviceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create and delete a mobile device."
								}
							],
							"description": "These workflows covers how to manage devices. See related documentation here: [https://www2.microstrategy.com/producthelp/Current/SystemAdmin/WebHelp/Lang_1033/Content/Creating_and_managing_devices.htm](https://www2.microstrategy.com/producthelp/Current/SystemAdmin/WebHelp/Lang_1033/Content/Creating_and_managing_devices.htm)."
						},
						{
							"name": "Subscriptions",
							"item": [
								{
									"name": "Get, Create, and Delete Subscription",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all subscriptions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get All subscriptions\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "\"as\"",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions?offset=0&limit=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions"
													],
													"query": [
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "limit",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get schedules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get Schedules\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    schedules = pm.response.json().schedules;",
															"    //Use the first schedule for the new subscription. ",
															"    scheduleId = schedules[0].id;",
															"",
															"    pm.environment.set(\"rd_scheduleId\", scheduleId);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get information for the authenticated user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get information for the authenticated user\", function () {",
															"    pm.response.to.have.status(200);",
															"    const userId = pm.response.json()[\"id\"]",
															"    pm.environment.set(\"userId\", userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/sessions/userInfo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"sessions",
														"userInfo"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get information for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. This request returns information about the authenticated user, locale, timeout duration, maximum number of concurrent searches, and limit on instances kept in memory."
											},
											"response": []
										},
										{
											"name": "Get addresses for a specific user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get addresses for user\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:id/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id",
														"addresses"
													],
													"query": [
														{
															"key": "fields",
															"value": "aliqua dolor",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{userId}}",
															"description": "(Required) User ID"
														}
													]
												},
												"description": "Get all of the addresses for a specific user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the user by specifying the user ID in the path of the request; you obtain the user ID using GET /users."
											},
											"response": []
										},
										{
											"name": "Create users email (for demo purposes)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create users email (for demo purposes)\", function () {",
															"    pm.response.to.have.status(200);",
															"    addresses = pm.response.json().addresses",
															"    ",
															"    for (const a in addresses){",
															"        if (addresses[a].name == \"test_email\"){",
															"            emailId = addresses[a].id",
															"        }",
															"    }",
															"    pm.environment.set(\"rd_addressId\", emailId)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"test_email\",\n  \"deliveryMode\": \"EMAIL\",\n  \"device\": \"GENERIC_EMAIL\",\n  \"value\": \"myEmail@mySite.fakeDomain1.com\",\n  \"isDefault\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:userId/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":userId",
														"addresses"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create subscription",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create Subscription\", function () {",
															"    pm.response.to.have.status(201);",
															"    subscriptionsObject = pm.response.json();",
															"    pm.environment.set(\"rd_subscriptionId\", subscriptionsObject.id);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Example\",\n    \"editable\": true,\n    \"allowDeliveryChanges\": true,\n    \"allowPersonalizationChanges\": false,\n    \"allowUnsubscribe\": false,\n    \"schedules\": [\n        {\n            \"id\": \"{{rd_scheduleId}}\"\n        }\n    ],\n    \"contents\": [\n        {\n            \"id\": \"E63834A411D5C49EC0000C881FDA1A4F\",\n            \"name\": \"Unit Tracking by Supplier\",\n            \"type\": \"report\",\n            \"personalization\": {\n                \"compressed\": false,\n                \"formatMode\": \"CURRENT_PAGE\",\n                \"viewMode\": \"BOTH\",\n                \"formatType\": \"HTML\"\n            }\n        }\n    ],\n    \"recipients\": [\n        {\n            \"id\": \"{{userId}}\",\n            \"type\": \"user\",\n            \"includeType\": \"TO\"\n        }\n    ],\n    \"delivery\": {\n        \"mode\": \"EMAIL\",\n        \"contactSecurity\": false,\n        \"email\": {\n            \"subject\": \"Unit Tracking by Supplier\",\n            \"filename\": \"Unit Tracking by Supplier\",\n            \"sendContentAs\": \"data\",\n            \"overwriteOlderVersion\": false\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Get subscriptions by Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get Subscriptions by Id\", function () {",
															"    pm.response.to.have.status(200)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Send subscription",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(202)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id",
														"send"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												},
												"description": "Send the existing subscription immediately. You obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header. You obtain the project ID using GET /projects.You identify the project by specifying the project ID in the request; You identify the subscription by specifying the subscription ID in the request; you obtain the subscription ID using GET /subscriptions/. You provide the information to send the subscription ID in the path parameter of the request. If the content is prompted and user wants to update answers, user can answer prompts and then provide content id and instance id as body."
											},
											"response": []
										},
										{
											"name": "Delete subscription",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "Cookie",
														"value": "{{cookie}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:userId/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":userId",
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}"
														},
														{
															"key": "addressId",
															"value": "{{rd_addressId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"userId\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"    pm.environment.unset(\"rd_addressId\");",
															"    pm.environment.unset(\"rd_subscriptionId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow will get, create, update, and delete subscriptions. Without using v2 apis, we can only support creating user's addresses with email."
								},
								{
									"name": "Create Subscription with Prompted Content",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get report Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Get Report Id\", function () {",
															"    // Please make sure you search for a prompt report",
															"    pm.response.to.have.status(200);",
															"    const response = JSON.parse(responseBody);",
															"    var list = response.result;",
															"    pm.expect(list.length > 0).to.eql(true);",
															"    reportId = list[0].id;",
															"    pm.environment.set(\"rd_promptedReportId\", reportId)",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?name=Actual%20vs.%20Forecast%20Performance&type=3&pattern=2",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "name",
															"value": "Actual%20vs.%20Forecast%20Performance"
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "pattern",
															"value": "2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create instance id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Create instance id\", function () {",
															"    pm.response.to.have.status(200)",
															"    const reportObject = pm.response.json();",
															"    pm.environment.set(\"rd_reportInstanceId\", reportObject.instanceId);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													},
													{
														"key": "Cookie",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_promptedReportId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get open prompts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Get open prompts\", function () {",
															"    pm.response.to.have.status(200)",
															"    const prompts = pm.response.json();",
															"    rd_prompts = []",
															"    prompts.forEach(function(prompt) {",
															"          rd_prompts.push(prompt.key);",
															"    });",
															"    pm.environment.set(\"rd_prompts\", JSON.stringify(rd_prompts));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances/:reportInstanceId/prompts",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances",
														":reportInstanceId",
														"prompts"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_promptedReportId}}"
														},
														{
															"key": "reportInstanceId",
															"value": "{{rd_reportInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get available prompt answers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Get Available prompt answers\", function () {",
															"    pm.response.to.have.status(200)",
															"    const response = pm.response.json();",
															"    const elements = response.elements;",
															"    let ans = {};",
															"    ans.key =  pm.variables.get(\"promptKey\");",
															"    ans.type = 'ELEMENTS';",
															"    ans.answers = [];",
															"    for (var i = 0; i < 1; i++) { //just get first one",
															"        ans.answers.push(elements[i]);",
															"    }",
															"    let promptAnswers;",
															"    if (pm.environment.has(\"rd_promptAnswers\")) {",
															"        promptAnswers = JSON.parse(pm.environment.get(\"rd_promptAnswers\"));",
															"    } else {",
															"        promptAnswers = []",
															"    }",
															"    promptAnswers.push(ans);",
															"    pm.environment.set(\"rd_promptAnswers\", JSON.stringify(promptAnswers));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const prompts = JSON.parse(pm.environment.get(\"rd_prompts\"));",
															"",
															"pm.variables.set(\"promptKey\", prompts[0]);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances/:reportInstanceId/prompts/:promptKey/elements",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances",
														":reportInstanceId",
														"prompts",
														":promptKey",
														"elements"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_promptedReportId}}"
														},
														{
															"key": "reportInstanceId",
															"value": "{{rd_reportInstanceId}}"
														},
														{
															"key": "promptKey",
															"value": "{{promptKey}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get available prompt answers 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Get Available prompt answers\", function () {",
															"    pm.response.to.have.status(200)",
															"    const response = pm.response.json();",
															"    const elements = response.elements;",
															"    let ans = {};",
															"    ans.key =  pm.variables.get(\"promptKey\");",
															"    ans.type = 'ELEMENTS';",
															"    ans.answers = [];",
															"    for (var i = 0; i < 1; i++) { //just get first one",
															"        ans.answers.push(elements[i]);",
															"    }",
															"    let promptAnswers;",
															"    if (pm.environment.has(\"rd_promptAnswers\")) {",
															"        promptAnswers = JSON.parse(pm.environment.get(\"rd_promptAnswers\"));",
															"    } else {",
															"        promptAnswers = []",
															"    }",
															"    promptAnswers.push(ans);",
															"    pm.environment.set(\"rd_promptAnswers\", JSON.stringify(promptAnswers));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const prompts = JSON.parse(pm.environment.get(\"rd_prompts\"));",
															"",
															"pm.variables.set(\"promptKey\", prompts[1]);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances/:reportInstanceId/prompts/:promptKey/elements",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances",
														":reportInstanceId",
														"prompts",
														":promptKey",
														"elements"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_promptedReportId}}"
														},
														{
															"key": "reportInstanceId",
															"value": "{{rd_reportInstanceId}}"
														},
														{
															"key": "promptKey",
															"value": "{{promptKey}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Answer prompts",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create subscription with prompted content/Answer Prompts\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"prompts\":\n      {{rd_promptAnswers}}\n   \n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/reports/:reportId/instances/:reportInstanceId/prompts/answers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"reports",
														":reportId",
														"instances",
														":reportInstanceId",
														"prompts",
														"answers"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "{{rd_promptedReportId}}"
														},
														{
															"key": "reportInstanceId",
															"value": "{{rd_reportInstanceId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get information for the authenticated user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get information for the authenticated user\", function () {",
															"    pm.response.to.have.status(200);",
															"    const userId = pm.response.json()[\"id\"]",
															"    pm.environment.set(\"userId\", userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/sessions/userInfo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"sessions",
														"userInfo"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get information for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. This request returns information about the authenticated user, locale, timeout duration, maximum number of concurrent searches, and limit on instances kept in memory."
											},
											"response": []
										},
										{
											"name": "Create users email (for demo purposes)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create users email (for demo purposes)\", function () {",
															"    pm.response.to.have.status(200);",
															"    addresses = pm.response.json().addresses",
															"    ",
															"    for (const a in addresses){",
															"        if (addresses[a].name == \"test_email\"){",
															"            emailId = addresses[a].id",
															"        }",
															"    }",
															"    pm.environment.set(\"rd_addressId\", emailId)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"test_email\",\n  \"deliveryMode\": \"EMAIL\",\n  \"device\": \"GENERIC_EMAIL\",\n  \"value\": \"myEmail@mySite.fakeDomain1.com\",\n  \"isDefault\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/{{userId}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"{{userId}}",
														"addresses"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create subscription",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create Subscription\", function () {",
															"    pm.response.to.have.status(201);",
															"    subscriptionsObject = pm.response.json();",
															"    pm.environment.set(\"rd_subscriptionId\", subscriptionsObject.id);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Example\",\n    \"allowDeliveryChanges\": false,\n    \"allowPersonalizationChanges\": false,\n    \"allowUnsubscribe\": false,\n    \"schedules\": [\n        {\n            \"id\": \"{{rd_scheduleId}}\"\n        }\n    ],\n    \"contents\": [\n        {\n            \"id\": \"E63834A411D5C49EC0000C881FDA1A4F\",\n            \"name\": \"Unit Tracking by Supplier\",\n            \"type\": \"report\",\n            \"personalization\": {\n                \"compressed\": false,\n                \"formatMode\": \"CURRENT_PAGE\",\n                \"viewMode\": \"BOTH\",\n                \"formatType\": \"HTML\"\n            }\n        }\n    ],\n    \"recipients\": [\n        {\n            \"id\": \"{{userId}}\",\n            \"type\": \"user\",\n            \"includeType\": \"TO\"\n        }\n    ],\n    \"delivery\": {\n        \"mode\": \"EMAIL\",\n        \"contactSecurity\": false,\n        \"email\": {\n            \"subject\": \"Unit Tracking by Supplier\",\n            \"filename\": \"Unit Tracking by Supplier\",\n            \"sendContentAs\": \"data\",\n            \"overwriteOlderVersion\": false\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Send subscription",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(202)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "(Required) Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id",
														"send"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												},
												"description": "Send the existing subscription immediately. You obtain the authorization token needed to execute the request using POST /auth/login; You pass the authorization token in the request header. You obtain the project ID using GET /projects.You identify the project by specifying the project ID in the request; You identify the subscription by specifying the subscription ID in the request; you obtain the subscription ID using GET /subscriptions/. You provide the information to send the subscription ID in the path parameter of the request. If the content is prompted and user wants to update answers, user can answer prompts and then provide content id and instance id as body."
											},
											"response": []
										},
										{
											"name": "Delete subscription",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:userId/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":userId",
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}"
														},
														{
															"key": "addressId",
															"value": "{{rd_addressId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"userId\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"    pm.environment.unset(\"rd_addressId\");",
															"    pm.environment.unset(\"rd_subscriptionId\");",
															"    pm.environment.unset(\"rd_promptAnswers\");",
															"    pm.environment.unset(\"rd_prompts\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Subscription for Multi-Content",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get schedules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get Schedules\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"",
															"    schedules = pm.response.json().schedules;",
															"",
															"    for (var i = 0; i < schedules.length; i++) {",
															"        if (schedules[i].name === \"Books Closed\") {   ",
															"            scheduleId = schedules[i].id;",
															"            break;",
															"        }",
															"    }",
															"",
															"    pm.environment.set(\"rd_scheduleId\", scheduleId);",
															"",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get information for the authenticated user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get information for the authenticated user\", function () {",
															"    pm.response.to.have.status(200);",
															"    const userId = pm.response.json()[\"id\"]",
															"    pm.environment.set(\"userId\", userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/sessions/userInfo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"sessions",
														"userInfo"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get information for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. This request returns information about the authenticated user, locale, timeout duration, maximum number of concurrent searches, and limit on instances kept in memory."
											},
											"response": []
										},
										{
											"name": "Create users email (for demo purposes)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create users email (for demo purposes)\", function () {",
															"    pm.response.to.have.status(200);",
															"    addresses = pm.response.json().addresses",
															"    ",
															"    for (const a in addresses){",
															"        if (addresses[a].name == \"test_email\"){",
															"            emailId = addresses[a].id",
															"        }",
															"    }",
															"    pm.environment.set(\"rd_addressId\", emailId)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"test_email\",\n  \"deliveryMode\": \"EMAIL\",\n  \"device\": \"GENERIC_EMAIL\",\n  \"value\": \"myEmail@mySite.fakeDomain1.com\",\n  \"isDefault\": false\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/{{userId}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														"{{userId}}",
														"addresses"
													],
													"query": [
														{
															"key": "fields",
															"value": "<string>",
															"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create multi-content Subscription email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Create Subscription\", function () {",
															"    pm.response.to.have.status(201);",
															"    subscriptionsObject = pm.response.json();",
															"    pm.environment.set(\"rd_subscriptionId\", subscriptionsObject.id);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"create_email_subscription_mutlti_content_reports\",\n    \"sendNow\": true,\n    \"multipleContents\": true,\n    \"schedules\": [\n        {\n            \"id\": \"{{rd_scheduleId}}\"\n        }\n    ],\n    \"contents\": [\n        {\n            \"id\": \"C9594161446CBF1137FE4783A51B6B8A\",\n            \"name\": \"Category Subcategory Revenue (Report Drill Map)\",\n            \"type\": \"report\",\n            \"personalization\": {\n              \"compressed\": false,\n              \"formatMode\": \"CURRENT_PAGE\",\n              \"viewMode\": \"GRID\",\n              \"formatType\": \"PLAIN_TEXT\",\n              \"delimiter\": \",\"\n            }\n        },\n        {\n            \"id\": \"74065ED8403137215C1F01B4EAE7EDF9\",\n            \"name\": \"Profit Margin by Region - Drill on Metrics\",\n            \"type\": \"report\",\n            \"personalization\": {\n              \"compressed\": false,\n              \"formatMode\": \"CURRENT_PAGE\",\n              \"viewMode\": \"GRID\",\n              \"formatType\": \"CSV\"\n            }\n        },\n        {\n            \"id\": \"E2DEA25E11D3EAD7C000B4B2D86C964F\",\n            \"name\": \"Sales by Age Groups - Drill on custom group\",\n            \"type\": \"report\",\n            \"personalization\": {\n              \"compressed\": true,\n              \"formatMode\": \"CURRENT_PAGE\",\n              \"viewMode\": \"BOTH\",\n              \"formatType\": \"EXCEL\"\n            }\n        },\n        {\n            \"id\": \"BEC722A6406320A3E67DBFBAB2F033CB\",\n            \"name\": \"Category Sales Report\",\n            \"type\": \"report\",\n            \"personalization\": {\n              \"compressed\": true,\n              \"formatMode\": \"CURRENT_PAGE\",\n              \"viewMode\": \"BOTH\",\n              \"formatType\": \"PDF\"\n            }\n          },\n          {\n            \"id\": \"3B75A0454B2D5F9D5A76778723777502\",\n            \"name\": \"Report Display Options - Alias and Null Values\",\n            \"type\": \"report\",\n            \"personalization\": {\n              \"compressed\": false,\n              \"formatMode\": \"CURRENT_PAGE\",\n              \"viewMode\": \"BOTH\",\n              \"formatType\": \"HTML\"\n            }\n          } \n    ],\n    \"recipients\": [\n        {\n            \"id\": \"{{userId}}\",\n            \"type\": \"user\",\n             \"includeType\": \"TO\"\n        }\n    ],\n    \"delivery\": {\n        \"mode\": \"EMAIL\",\n        \"expiration\": \"2050-12-01\",\n        \"contactSecurity\": false,\n        \"email\": {\n            \"subject\": \"create_email_subscription_MultiContent_Reports\",\n            \"message\": \"This subscription contains 5 reports delivered in different format. Event_based schedule, no advanced settings, compressed true and false, sendContetas data, spaceDelimiter is ;\",\n            \"sendContentAs\": \"data\",\n            \"spaceDelimiter\": \";\",\n            \"overwriteOlderVersion\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Get subscriptions by Id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get Subscriptions by Id\", function () {",
															"    pm.response.to.have.status(200)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"type": "text",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"type": "text",
														"value": "{{projectId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete subscription",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/subscriptions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"subscriptions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_subscriptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create and Get Subscription/Get\", function () {",
															"    pm.response.to.have.status(204)",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:userId/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":userId",
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{userId}}"
														},
														{
															"key": "addressId",
															"value": "{{rd_addressId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"userId\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"    pm.environment.unset(\"rd_addressId\");",
															"    pm.environment.unset(\"rd_subscriptionId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Manage Schedules",
							"item": [
								{
									"name": "Retrieve, Create, and Update a Schedule",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a list of schedules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a list of schedules\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all schedules that the authenticated user has access to. This endpoint returns the name, ID, and other information about schedules. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Create schedule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create Schedule\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_scheduleId\", pm.response.json()[\"id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Schedule\",\n    \"description\": \"Starts Friday, April 1, 2022 and has no end. The schedule will be once triggered every weekday at 12am.\",\n    \"scheduleType\": \"time_based\",\n    \"startDate\": \"2022-04-01\",\n    \"time\": {\n        \"recurrencePattern\": \"daily\",\n        \"execution\": {\n            \"executionPattern\": \"once\",\n            \"executionTime\": \"00:00:00\"\n        },\n        \"daily\": {\n            \"dailyPattern\": \"weekday\",\n            \"repeatInterval\": 1\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new schedule. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a schedule in the body parameter of the request. "
											},
											"response": []
										},
										{
											"name": "Update schedule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a schedule\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Schedule(Updated)\",\n    \"description\": \"Starts Friday, April 1, 2022 and has no end. The schedule will be once triggered every weekday at 1pm.\",\n    \"scheduleType\": \"time_based\",\n    \"startDate\": \"2022-04-01\",\n    \"time\": {\n        \"recurrencePattern\": \"daily\",\n        \"execution\": {\n            \"executionPattern\": \"once\",\n            \"executionTime\": \"13:00:00\"\n        },\n        \"daily\": {\n            \"dailyPattern\": \"weekday\",\n            \"repeatInterval\": 1\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/schedules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_scheduleId}}",
															"description": "(Required) Schedule ID"
														}
													]
												},
												"description": "Update all of the information for a specific schedule. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the schedule ID using GET /schedules. You pass the schedule ID in the path of the request. You provide the information used to update the specific schedule in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Remove schedule by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a schedule\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/schedules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_scheduleId}}",
															"description": "(Required) Schedule ID"
														}
													]
												},
												"description": "Remove schedule by its id. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the schedule ID using GET /schedules. You remove the schedule by passing the schedule ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow handles retrieving a list of schedules, creating a schedule, updating the schedule, and removing it."
								},
								{
									"name": "Event Based Schedule",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "List events",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"List Event\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all events that the authenticated user has access to. This endpoint returns the name, ID, and other information about events. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Create event",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create Event\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_eventId\", pm.response.json()[\"id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Sample Event\",\n    \"description\": \"A simple example of an event\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new event. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create an event in the body parameter of the request. "
											},
											"response": []
										},
										{
											"name": "Get a list of schedules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a list of schedules\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all schedules that the authenticated user has access to. This endpoint returns the name, ID, and other information about schedules. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Create schedule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create Schedule\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_scheduleId\", pm.response.json()[\"id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Schedule\",\n    \"description\": \"Starts April 05, 2022 and has no end. The schedule will be triggered by the event 'Test Event'\",\n    \"scheduleType\": \"event_based\",\n    \"startDate\": \"2022-04-05\",\n    \"event\": {\n        \"eventId\": \"{{rd_eventId}}\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new schedule. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a schedule in the body parameter of the request. "
											},
											"response": []
										},
										{
											"name": "Trigger an event by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Trigger Event\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id/trigger",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id",
														"trigger"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_eventId}}",
															"description": "(Required) Event ID"
														}
													]
												},
												"description": "Trigger a specific event by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You pass the event ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Remove schedule by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a schedule\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/schedules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_scheduleId}}",
															"description": "(Required) Schedule ID"
														}
													]
												},
												"description": "Remove schedule by its id. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the schedule ID using GET /schedules. You remove the schedule by passing the schedule ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Delete event by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete Event\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/events/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"events",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_eventId}}",
															"description": "(Required) Event ID"
														}
													]
												},
												"description": "Delete event by its id. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You delete the event by passing the event ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"    pm.environment.unset(\"rd_eventId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow handles retrieving a list of schedules, creating an event based schedule, triggering it, and removing it."
								},
								{
									"name": "Time Based Schedule",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a list of schedules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a list of schedules\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v2/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v2",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all schedules that the authenticated user has access to. This endpoint returns the name, ID, and other information about schedules. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. "
											},
											"response": []
										},
										{
											"name": "Create schedule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create Schedule\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_scheduleId\", pm.response.json()[\"id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Schedule(Time based)\",\n    \"description\": \"Starts Friday, April 1, 2022 and has no end. The schedule will be once triggered every week on a monday at 12am. \",\n    \"scheduleType\": \"time_based\",\n    \"startDate\": \"2022-04-01\",\n    \"time\": {\n        \"recurrencePattern\": \"weekly\",\n        \"execution\": {\n            \"executionPattern\": \"once\",\n            \"executionTime\": \"00:00:00\"\n        },\n        \"weekly\": {\n            \"repeatInterval\": 1,\n            \"daysOfWeek\": [\"monday\"]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/schedules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new schedule. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a schedule in the body parameter of the request. "
											},
											"response": []
										},
										{
											"name": "Update schedule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a schedule\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Test Schedule(Time based updated)\",\n    \"description\": \"Starts Friday, April 1, 2022 and has no end. The schedule will be triggered every week on a monday and tuesday at 12am. \",\n    \"scheduleType\": \"time_based\",\n    \"startDate\": \"2022-04-01\",\n    \"time\": {\n        \"recurrencePattern\": \"weekly\",\n        \"execution\": {\n            \"executionPattern\": \"once\",\n            \"executionTime\": \"00:00:00\"\n        },\n        \"weekly\": {\n            \"repeatInterval\": 1,\n            \"daysOfWeek\": [\"monday\", \"tuesday\"]\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/schedules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_scheduleId}}",
															"description": "(Required) Schedule ID"
														}
													]
												},
												"description": "Update all of the information for a specific schedule. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the schedule ID using GET /schedules. You pass the schedule ID in the path of the request. You provide the information used to update the specific schedule in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Remove schedule by ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a schedule\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/schedules/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"schedules",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_scheduleId}}",
															"description": "(Required) Schedule ID"
														}
													]
												},
												"description": "Remove schedule by its id. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the schedule ID using GET /schedules. You remove the schedule by passing the schedule ID in the path of the request. "
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_scheduleId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow handles retrieving a list of schedules, creating a time based schedule, updating the schedule, and removing it."
								}
							],
							"description": "These workflows shows how to retrieve, create, update, and delete a schedule."
						},
						{
							"name": "Manage Dynamic Recipient Lists",
							"item": [
								{
									"name": "Retrieve Dynamic Recipient Lists",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get a list of dynamic recipient lists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get a list of dynamic recipient lists\", function () {",
															"    pm.response.to.have.status(200);",
															"    const dynamicRecipientLists = pm.response.json().listOfDynamicRecipientLists;",
															"    pm.environment.set(\"rd_dynamicRecipientListId\",dynamicRecipientLists[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dynamicRecipientLists",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dynamicRecipientLists"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get a list of all dynamic recipient lists that the authenticated user has access to. This endpoint returns the name, ID, source report ID, project ID and other information about dynamic recipient lists. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
											},
											"response": []
										},
										{
											"name": "Get dynamic recipient list by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get dynamic recipient list by id\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dynamicRecipientLists/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dynamicRecipientLists",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_dynamicRecipientListId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Get information of a specific dynamic recipient list by its ID. This endpoint returns the name, ID, linked user, source report ID, project ID and other information about the given dynamic recipient list. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the dynamic recipient list ID using GET /dynamicRecipientLists. You pass the dynamic recipient list ID in the path of the request."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_dynamicRecipientListId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									],
									"description": "This workflow shows how to retrieve dynamic recipient lists."
								},
								{
									"name": "Create, Update, and Delete a Dynamic Recipient List",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												},
												"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
											},
											"response": []
										},
										{
											"name": "Get a report",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Retrieve a Report's Definition/Get quick search results\", function () {",
															"    pm.response.to.have.status(200);",
															"    const results = pm.response.json().result;",
															"    pm.environment.set(\"rd_reportId\", results[0].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"description": "Project ID",
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/searches/results?pattern=2&type=3&limit=10&name=Brand Performance by Region",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"searches",
														"results"
													],
													"query": [
														{
															"key": "pattern",
															"value": "2",
															"description": "Pattern to search for, such as Begin With or Exactly. Possible values are defined in [EnumDSSXMLSearchTypes](https://lw.microstrategy.com/msdz/msdl/GARelease_Current/docs/ReferenceFiles/reference/com/microstrategy/webapi/EnumDSSXMLSearchTypes.html). 2 is for \"Exactly\"."
														},
														{
															"key": "root",
															"value": "{{publicObjectsFolderId}}",
															"description": "Folder ID of the root folder where the search will be performed.",
															"disabled": true
														},
														{
															"key": "getAncestors",
															"value": "false",
															"description": "Specifies whether to return the list of ancestors for each object",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "0",
															"description": "Starting point within the collection of returned search results. Used to control paging behavior.",
															"disabled": true
														},
														{
															"key": "certifiedStatus",
															"value": "ALL",
															"description": "Defines a search criteria based on the certified status of the object",
															"disabled": true
														},
														{
															"key": "isCrossCluster",
															"value": "false",
															"description": "Perform search in all unique projects across the cluster, this parameter only takes affect for I-Server with cluster nodes.",
															"disabled": true
														},
														{
															"key": "viewMedia",
															"value": "",
															"description": "ViewMedia of object to be searched, such as Dossier or Document. Possible values are defined in ViewMedia. To specify multiple viewMedias in API explorer, simply specify them with newline delimiter.",
															"disabled": true
														},
														{
															"key": "result.hidden",
															"value": "",
															"description": "Filter the result based on the 'hidden' field of objects. If not passed, no filtering is applied.",
															"disabled": true
														},
														{
															"key": "projectId",
															"value": "",
															"description": "Project IDs where the search will be performed. X-MSTR-ProjectID will be ignored and isCrossCluster will be regarded as true if the project IDs are specified.",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														},
														{
															"key": "type",
															"value": "3"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "name",
															"value": "Brand Performance by Region"
														}
													]
												},
												"description": "Use the stored results of the Quick Search engine to return search results and display them as a list. The Quick Search engine periodically indexes the metadata and stores the results in memory, making Quick Search very fast but with results that may not be the most recent. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You specify the search criteria using query parameters in the request; criteria can include the root folder ID, the type of object, whether to return ancestors of the object, a search pattern such as Begins With or Exactly, and the certified status of the object being searched for. You use the offset and limit query parameters to control paging behavior. The offset parameter specifies where to start returning search results, and the limit parameter specifies how many results to return."
											},
											"response": []
										},
										{
											"name": "Create dynamic recipient list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create dynamic recipient list\", function () {",
															"    pm.response.to.have.status(201);",
															"    const dynamicRecipientListId = pm.response.json().id",
															"    pm.environment.set(\"rd_dynamicRecipientListId\", dynamicRecipientListId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n      \"name\": \"Dynamic address list 1\",\n      \"id\": \"1F7EB3729D4BD7EB2E59F19EB3C5A032\",\n      \"description\": \"Dynamic recipient list for managers\",\n      \"sourceReportId\": \"{{rd_reportId}}\",\n      \"physicalAddress\": {\n        \"attributeId\": \"27614DEAFF40BECC2C60FAAFCE393AF5\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"linkedUser\": {\n        \"attributeId\": \"4FF474CD21491328DF59EC97F5DB61CA\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"device\": {\n        \"attributeId\": \"5ECA1D4EB446E268D00AD687785396DB\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"recipientName\": {\n        \"attributeId\": \"3A775CF38F4E6FD5904C5A8231D591FB\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"notificationAddress\": {\n        \"attributeId\": \"27614DEAFF40BECC2C60FAAFCE393AF5\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"notificationDevice\": {\n        \"attributeId\": \"5ECA1D4EB446E268D00AD687785396DB\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      },\n      \"personalization\": {\n        \"attributeId\": \"8C8EE328FB48E6811DD78BA38F8E8F42\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n      }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/dynamicRecipientLists",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dynamicRecipientLists"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Create a new dynamic recipient list. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create a dynamic recipient list in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Update dynamic recipient list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update a dynamic recipient list\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Dynamic address list 1-updated\",\n    \"id\": \"19B51ADBC34353624E94F787D70795EC\",\n    \"description\": \"Dynamic recipient list for managers-updated\",\n    \"sourceReportId\": \"{{rd_reportId}}\",\n    \"physicalAddress\": {\n        \"attributeId\": \"27614DEAFF40BECC2C60FAAFCE393AF5\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n    },\n    \"linkedUser\": {\n        \"attributeId\": \"4FF474CD21491328DF59EC97F5DB61CA\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n    },\n    \"device\": {\n        \"attributeId\": \"5ECA1D4EB446E268D00AD687785396DB\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n    },\n    \"recipientName\": {\n        \"attributeId\": \"3A775CF38F4E6FD5904C5A8231D591FB\",\n        \"attributeFormId\": \"45C11FA478E745FEA08D781CEA190FE5\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/dynamicRecipientLists/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dynamicRecipientLists",
														":id"
													],
													"query": [
														{
															"key": "fields",
															"value": "",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_dynamicRecipientListId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Update a specific dynamic recipient list by its ID. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You identify the dynamic recipient list by specifying the dynamic recipient list ID in the path of the request; you obtain the dynamic recipient list ID using GET /dynamicRecipientLists. You provide the information used to update the dynamic recipient list in the body parameter of the request."
											},
											"response": []
										},
										{
											"name": "Remove dynamic recipient list by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete a dynamic recipient list\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Authorization token",
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/dynamicRecipientLists/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"dynamicRecipientLists",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_dynamicRecipientListId}}",
															"description": "(Required) Transmitter ID"
														}
													]
												},
												"description": "Delete a specific dynamic recipient list by its ID. This endpoint deletes information about the given dynamic recipient list. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the dynamic recipient list ID using GET /dynamicRecipientLists. You pass the dynamic recipient list ID in the path of the request."
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_dynamicRecipientListId\");",
															"    pm.environment.unset(\"rd_reportId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												},
												"description": "Close all existing sessions for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header."
											},
											"response": []
										}
									],
									"description": "This workflow shows how to create, update, and delete a dynamic recipient list."
								}
							],
							"description": "These workflows covers managing dynamic recipient lists. See related documentation:\n\n[https://www2.microstrategy.com/producthelp/Current/MSTRWeb/WebHelp/Lang_1033/Content/Create_a_new_dynamic_recipient_list_dialog_box.htm](https://www2.microstrategy.com/producthelp/Current/MSTRWeb/WebHelp/Lang_1033/Content/Create_a_new_dynamic_recipient_list_dialog_box.htm)"
						},
						{
							"name": "Manage Events",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a list of events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get a list of events\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get a list of all events that the authenticated user has access to. This endpoint returns the name, ID, and other information about events. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Create event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Create an event\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"rd_eventId\", pm.response.json()[\"id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Event\",\n    \"description\": \"Test Event Description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new event. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You provide the information used to create an event in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get event by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get an event by id\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_eventId}}",
													"description": "(Required) Event ID"
												}
											]
										},
										"description": "Get information of a specific event by its ID. This endpoint returns the name, ID, and other information about the given event. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You pass the event ID in the path of the request."
									},
									"response": []
								},
								{
									"name": "Update event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update an event\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Event(Updated)\",\n    \"description\": \"Test Event Description(Updated)\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_eventId}}",
													"description": "(Required) Event ID"
												}
											]
										},
										"description": "Update all of the information for a specific event. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You pass the event ID in the path of the request. You provide the information used to update the specific event in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Trigger an event by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Trigger an event by id\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/:id/trigger",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id",
												"trigger"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_eventId}}",
													"description": "(Required) Event ID"
												}
											]
										},
										"description": "Trigger a specific event by its ID. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You pass the event ID in the path of the request."
									},
									"response": []
								},
								{
									"name": "Remove event by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete an event\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_eventId}}",
													"description": "(Required) Event ID"
												}
											]
										},
										"description": "Delete event by its id. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You obtain the event ID using GET /events. You delete the event by passing the event ID in the path of the request."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_eventId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "These workflows shows how to retrieve, create, update, trigger and delete an event."
						}
					]
				},
				{
					"name": "Datasource Management",
					"item": [
						{
							"name": "Create and Update Datasource",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get datasource logins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasource logins\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const logins = pm.response.json();",
													"    for (i=0; logins.logins.length; i++) {",
													"        login = logins.logins[i];",
													"        if (login.name == \"Test_Snow_Login\") { // can change to your login object name",
													"            pm.environment.set(\"rd_datasourceLoginId\", login.id);",
													"            break;",
													"        }",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/logins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"logins"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all datasource logins. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Create a datasource login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create datasource login\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"   ",
													"    const datasourceLogin = pm.response.json();",
													"    const loginId = datasourceLogin.id",
													"    pm.environment.set(\"rd_datasourceLoginId\", loginId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test_Snow_Login\",\n    \"password\": \"mstr\",\n    \"username\": \"mstr\",\n    \"description\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/logins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"logins"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new datasource login. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new datasource login in the body parameter of the request; you must provide the name used to log in to the metadata and the name and password used to connect to the datasource, but you can also provide a description of the datasource."
									},
									"response": []
								},
								{
									"name": "Update a datasource login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update datasource login info\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/username\",\n            \"value\": \"USERNAME_NEW\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/logins/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"logins",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datasourceLoginId}}",
													"description": "(Required) Datasource login ID"
												}
											]
										},
										"description": "Update selected information for a specific datasource login.You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You specify the datasource login ID in the path of the request. You obtain the database source ID using GET /datasources/logins. You provide the information needed to update the datasource login in the body parameter of the request; Currently 'replace' operation is only allowed."
									},
									"response": []
								},
								{
									"name": "Get all datasource connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const connections = pm.response.json();",
													"    for (i=0; connections.connections.length; i++) {",
													"        if (connections.connections[i].name == \"Test_Snow_Connection\") { // can change to your connection name",
													"            connection = connections.connections[i]",
													"            pm.environment.set(\"rd_connectionId\", connection.id);",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all datasource connections. You obtain authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Create a datasource connection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create datasource connection\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    const connectionInfo = pm.response.json();",
													"    pm.environment.set(\"rd_connectionId\", connectionInfo.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test_Snow_Connection\",\n    \"description\": \"\",\n    \"executionMode\": \"synchronous\",\n    \"maxCancelAttemptTime\": 60,\n    \"maxQueryExeTime\": 0,\n    \"maxConnectionAttemptTime\": 60,\n    \"connectionLifetime\": 36000,\n    \"connectionIdleTimeout\": 60000,\n    \"charEncodingWindows\": \"multibyte\",\n    \"charEncodingUnix\": \"utf8\",\n    \"tablePrefix\": \"\",\n    \"connectionString\": \"DSN=SNOWFLAKE_DSN\",\n    \"parameterizedQueries\": true,\n    \"extendedFetch\": false,\n    \"database\": {\n        \"login\": {\n            \"id\": \"{{rd_datasourceLoginId}}\",\n            \"name\": \"Test_snow_login\"\n        },\n        \"type\": \"snow_flake\",\n        \"version\": \"snowflake_1x\"\n\n    },\n    \"driverType\": \"odbc\",\n    \"oauthParameter\": \"\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a datasource connection."
									},
									"response": []
								},
								{
									"name": "Update a datasource connection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/description\",\n            \"value\": \"Test Snowflake Connection\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_connectionId}}",
													"description": "(Required) Datasource connection id"
												}
											]
										},
										"description": "Update a datasource connection."
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    for (i=0; datasources.datasources.length; i++) {",
													"        const datasource = datasources.datasources[i];",
													"        ",
													"        if (datasource.name == \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
													"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "sed minim",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Create a database source",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create datasource\", function () {",
													"    pm.response.to.have.status(201);",
													"    const datasourceInfo = pm.response.json();",
													"    pm.environment.set(\"rd_datasourceId\", datasourceInfo.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test_Snow_Source\",\n    \"description\": \"\",\n    \"datasourceType\": \"normal\",\n    \"database\": {\n        \"connection\": {\n            \"id\": \"{{rd_connectionId}}\"\n        }\n    },\n    \"tablePrefix\": \"\",\n    \"odbcVersion\": \"version3x\",\n    \"intermediateStoreDbName\": \"\",\n    \"intermediateStoreTableSpaceName\": \"\",\n    \"dbms\": {\n        \"id\": \"86AC7FD44D2B4B0FB65AE948EF19BDD0\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Create a new database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You provide the information needed to create the new database source in the body parameter of the request; you must provide a name, but you can also provide a description, the ID of the database management system (DBMS), the ID of the database connection, and the type of database source."
									},
									"response": []
								},
								{
									"name": "Update info for a specific database source",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update database source\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"replace\",\n            \"path\": \"/description\",\n            \"value\": \"Test snowflake database source2\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												":id"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datasourceId}}",
													"description": "(Required) Datasource ID"
												}
											]
										},
										"description": "Update selected information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database source ID in the path of the request; you obtain the database source ID using GET /datasources. You provide the information needed to update the database source in the body parameter of the request; Currently 'replace' operation is only allowed."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datasourceLoginId\");",
													"    pm.environment.unset(\"rd_connectionId\");",
													"    pm.environment.unset(\"rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to create a datasource login, datasource connection, and database source."
						},
						{
							"name": "Convert connection string from dsn to dsnless for a datasource",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    for (i=0; datasources.datasources.length; i++) {",
													"        const datasource = datasources.datasources[i];",
													"        ",
													"        if (datasource.name === \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
													"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource ids and the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Get info for a specific database source",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get definition for a datasource\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												":id"
											],
											"query": [
												{
													"key": "id",
													"value": "sed minim",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datasourceId}}",
													"description": "(Required) Datasource ID"
												}
											]
										},
										"description": "Get information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use path variable to specify the datasource id."
									},
									"response": []
								},
								{
									"name": "Convert for a database source (only for embedded)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"convert for a database source\", function () {",
													"    pm.response.to.have.status(204);",
													"    // This api is only needed when the datasource connection is embedded otherwise you can skip and just convert datasource connection.",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/:id/conversion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												":id",
												"conversion"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datasourceId}}",
													"description": "(Required) Datasource ID"
												}
											]
										},
										"description": "Convert connection string from DSN to DSN-less format connection string for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database source ID in the path of the request; you obtain the database source ID using GET /datasources. You check if it's embedded connection inside this datasource. If not, you need to use POST {{baseUrl}}/api/datasources/connections/:id/conversion for the standalone datasource connection."
									},
									"response": []
								},
								{
									"name": "Get info for a specific database source again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get definition for a datasource\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_datasourceId}}",
													"description": "(Required) Datasource ID"
												}
											]
										},
										"description": "Get information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use path variable to specify the datasource id. You can see the DSN-less connection string in the response."
									},
									"response": []
								},
								{
									"name": "Get all datasource connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const connections = pm.response.json();",
													"    for (i=0; connections.connections.length; i++) {",
													"        if (connections.connections[i].name == \"Test_Snow_Connection\") { // can change to your connection name",
													"            connection = connections.connections[i]",
													"            pm.environment.set(\"rd_connectionId\", connection.id);",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections"
											]
										},
										"description": "Get information for all datasource connections. You obtain authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Get info for a specific datasource connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get definition for a datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_connectionId}}",
													"description": "(Required) Datasource connection ID"
												}
											]
										},
										"description": "Get information for a specific datasource connection. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use path variable to specify the datasource connection id."
									},
									"response": []
								},
								{
									"name": "Convert for a datasource connection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"convert for a datasource connection\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections/:id/conversion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections",
												":id",
												"conversion"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_connectionId}}",
													"description": "(Required) Datasource connection ID"
												}
											]
										},
										"description": "Convert connection string from DSN to DSN-less format connection string for a specific datasource connection. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the datasource connection ID in the path of the request; you obtain the datasource connection ID using GET /datasources/connections. You check if it's DSN based connection string that you want to convert."
									},
									"response": []
								},
								{
									"name": "Get info for a specific datasource connection again",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get definition for a datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{rd_connectionId}}",
													"description": "(Required) Datasource connection ID"
												}
											]
										},
										"description": "Get information for a specific datasource connection. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use path variable to specify the datasource connection id. You can see the DSN-less connection string in the response."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datasourceLoginId\");",
													"    pm.environment.unset(\"rd_connectionId\");",
													"    pm.environment.unset(\"rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to convert connection string from DSN to DSN-less for a database source, or a datasource connection."
						},
						{
							"name": "Add Datasource to Project",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    for (i=0; datasources.datasources.length; i++) {",
													"        const datasource = datasources.datasources[i];",
													"        ",
													"        if (datasource.name == \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
													"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "sed minim",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Update datasource of project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"add datasource to project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"add\",\n            \"path\": \"/id\",\n            \"value\": \"{{rd_datasourceId}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects/:id/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":id",
												"datasources"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"description": "(Required) Project ID"
												}
											]
										},
										"description": "Update selected information for a specific datasource for that project.You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You specify the datasource login ID in the path of the request. You obtain the database source ID using GET /projects/{id}/datasources. You provide the information needed to update the datasource in the body parameter of the request; Currently either you can 'add' or 'remove' datasource from the project."
									},
									"response": []
								},
								{
									"name": "Get list of datasources based on project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasources for project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:id/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":id",
												"datasources"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"description": "(Required) Project ID"
												}
											]
										},
										"description": "Get list of datasources based on project. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the project Id in the path of the request; you obtain the project Id using GET /projects."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datasourceLoginId\");",
													"    pm.environment.unset(\"rd_connectionId\");",
													"    pm.environment.unset(\"rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to add a datasource to a project."
						},
						{
							"name": "Get and Update Job Priorities for Datasource",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get job prioritization info for a specific database source",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get job priorities for datasource\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/{{rd_datasourceId}}/jobPriorities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"{{rd_datasourceId}}",
												"jobPriorities"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get job prioritization information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database source ID in the path of the request; you obtain the datasource ID using GET /datasources."
									},
									"response": []
								},
								{
									"name": "Update job prioritization info for a specific database source Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"update job priorities for datasource\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"operationList\": [\n                    {\n                        \"op\": \"replace\",\n                        \"path\": \"/jobQueues/HIGH/threadCount\",\n                        \"value\": 8\n                    }\n                ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/datasources/{{rd_datasourceId}}/jobPriorities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"{{rd_datasourceId}}",
												"jobPriorities"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Update selected job prioritization information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database source ID in the path of the request; you obtain the database source ID using GET /datasources. You provide the information needed to update job prioritization of the database source in the body parameter of the request."
									},
									"response": []
								},
								{
									"name": "Get job prioritization info for a specific database source",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get job priorities for updated datasource\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/{{rd_datasourceId}}/jobPriorities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"{{rd_datasourceId}}",
												"jobPriorities"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get job prioritization information for a specific database source. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database source ID in the path of the request; you obtain the datasource ID using GET /datasources."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datasourceLoginId\");",
													"    pm.environment.unset(\"rd_connectionId\");",
													"    pm.environment.unset(\"rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow demonstrates how to retrieve and update a datasource's job priorities."
						},
						{
							"name": "Remove Datasource from Project",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    for (i=0; datasources.datasources.length; i++) {",
													"        const datasource = datasources.datasources[i];",
													"        ",
													"        if (datasource.name == \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
													"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "sed minim",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Remove datasource from project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"remove datasource from project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"operationList\": [\n        {\n            \"op\": \"remove\",\n            \"path\": \"/id\",\n            \"value\": \"{{rd_datasourceId}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/projects/:id/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":id",
												"datasources"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"description": "(Required) Project ID"
												}
											]
										},
										"description": "Update selected information for a specific datasource for that project.You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header. You specify the datasource login ID in the path of the request. You obtain the database source ID using GET /projects/{id}/datasources. You provide the information needed to update the datasource in the body parameter of the request; Currently either you can 'add' or 'remove' datasource from the project."
									},
									"response": []
								},
								{
									"name": "Get list of datasources based on project",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasources for project\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/projects/:id/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"projects",
												":id",
												"datasources"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"description": "(Required) Project ID"
												}
											]
										},
										"description": "Get list of datasources based on project. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the project Id in the path of the request; you obtain the project Id using GET /projects."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_datasourceLoginId\");",
													"    pm.environment.unset(\"rd_connectionId\");",
													"    pm.environment.unset(\"rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to remove a datasource from a project."
						},
						{
							"name": "Get Datasource's applicable advanced properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    const datasource = datasources.datasources[0];",
													"    pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Read datasource's applicable advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read datasource's applicable advanced properties\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datasources/:datasourceId/applicableAdvancedProperties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datasources",
												":datasourceId",
												"applicableAdvancedProperties"
											],
											"variable": [
												{
													"key": "datasourceId",
													"value": "{{rd_datasourceId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Datasource's definition and advanced properties",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    const datasource = datasources.datasources[0];",
													"    pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Read datasource's definition with advanced properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Read a datasource\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization Token"
											},
											{
												"key": "X-MSTR-ProjectID",
												"value": "{{projectId}}",
												"description": "(Project ID or Changeset ID Required) Project ID"
											},
											{
												"key": "X-MSTR-MS-Changeset",
												"value": "{{rd_changesetId}}",
												"description": "(Project ID or Changeset ID Required) Changeset ID",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/model/datasources/:datasourceId?showAdvancedProperties=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"model",
												"datasources",
												":datasourceId"
											],
											"query": [
												{
													"key": "showAdvancedProperties",
													"value": "true",
													"description": "Show advanced properties of a project"
												}
											],
											"variable": [
												{
													"key": "datasourceId",
													"value": "{{rd_datasourceId}}",
													"description": "(Required)"
												}
											]
										},
										"description": "The response returns the definition of a single filter. \n\nThe project ID is required to return a filter's definition in metadata.\nThe changeset ID is required to return a filter's definition within a specific changeset.\nTo execute the request, either the project ID or changeset ID needs to be provided.  If both are provided, only the changeset ID is used.\n\nThe changeset ID can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"    pm.environment.unset(\"rd_rd_datasourceId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required)"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Put Datasource's advanced properties",
							"item": [
								{
									"name": "Update property value on object level",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get test datasource",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get info for database sources\", function () {",
															"    pm.response.to.have.status(200);",
															"",
															"    const datasources = pm.response.json();",
															"    for (i=0; datasources.datasources.length; i++) {",
															"        const datasource = datasources.datasources[i];",
															"        ",
															"        if (datasource.name == \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
															"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
															"            break;",
															"        }",
															"    }",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/datasources",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"datasources"
													],
													"query": [
														{
															"key": "id",
															"value": "sed minim",
															"description": "Comma-separated string of datasources id",
															"disabled": true
														},
														{
															"key": "database.type",
															"value": "snow_flake",
															"description": "Comma-separated string of database types",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "sed minim",
															"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
															"disabled": true
														}
													]
												},
												"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
											},
											"response": []
										},
										{
											"name": "Create a changeset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets"
													],
													"query": [
														{
															"key": "schemaEdit",
															"value": "false",
															"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
														}
													]
												},
												"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Update property value on object level",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update datasource's advanced properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Required) Changeset ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"value\": \"1\"\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/datasources/:datasourceId?showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"datasources",
														":datasourceId"
													],
													"query": [
														{
															"key": "showAdvancedProperties",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "datasourceId",
															"value": "{{rd_datasourceId}}",
															"description": "(Required)"
														}
													]
												},
												"description": "Updates a specific attribute in the changeset. \nThis request replaces the attribute's top-level fields with the new definition provided in the request body.          \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the object to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly updated attribute to the metadata, commit using the changeset commit API.     \n"
											},
											"response": []
										},
										{
											"name": "Commit the changeset changes to the metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Commit changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId",
														"commit"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												},
												"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Delete the changeset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the changeset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												},
												"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_datasourceId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update property value with null (set value back to default)",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a changeset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Create a changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"rd_changesetId\", pm.response.json().id)",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization token"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"description": "(Required) Project ID"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets?schemaEdit=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets"
													],
													"query": [
														{
															"key": "schemaEdit",
															"value": "false",
															"description": "Specify whether the changeset includes the creation or update of schema objects. Set \"schemaEdit\" to true if this changeset ID is used to create or update schema objects through their corresponding APIs (tables, facts, attributes, hierarchies, transformations, partitions, functions). It places an \"exclusive_constituent\" lock on the schema.\n\nDefault value : false\n\n"
														}
													]
												},
												"description": "Creates a new changeset. This request will return a changeset ID, which will be used in subsequent requests to read, create, and/or update objects through the modeling APIs (i.e. filters, facts, attributes, etc.). A changeset maintains an indivisible group of creations or modifications on modeling objects. Eventually the changes in the changeset should be either committed as one transaction, or abandoned altogether. A Project ID and authorization token are required to execute the request. An authorization token can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Update property value with null (set value to default)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Update datasource's advanced properties\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													},
													{
														"key": "X-MSTR-MS-Changeset",
														"value": "{{rd_changesetId}}",
														"description": "(Required) Changeset ID"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"advancedProperties\": {\n        \"vldbProperties\": {\n            \"[DatamartProperties].[Insert SQLs]\": {\n                \"value\": null\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/model/datasources/:datasourceId?showAdvancedProperties=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"datasources",
														":datasourceId"
													],
													"query": [
														{
															"key": "showAdvancedProperties",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "datasourceId",
															"value": null
														}
													]
												},
												"description": "Updates a specific attribute in the changeset. \nThis request replaces the attribute's top-level fields with the new definition provided in the request body.          \n\nIn the request body, \"forms\" contains the detailed definition of a list of attribute forms. Each attribute contains one or more attribute forms. \nEach attribute form contains: \n* \"expressions\": A list of attribute form expressions. Attribute form contains one or more attribute form expressions. Each attribute form expression contains \"expression\" and \"tables\".  \n  * ”expression”: Needs to be in either \"tree\" or \"tokens\" format. \n    * Tokens are a semi-structured representation of MicroStrategy expression text that includes object references. For example, let’s say an attribute form expression is \"Year - 10\". When the attribute form expression is represented as tokens, the text is broken down into pieces (tokens) with information about what these pieces represent in the metadata: (\"Year_ID\", Year_column_ID), (\"-\", Minus_ID), (\"10\", Constant).\n  * \"tables\": A list of tables that the \"expression\" applies to.    \n* \"dataType\" and \"alias\" are optional. If omitted, they are calculated based on the first attribute form expression. \n* \"childForms\" is specific to a form group, which contains the reference for child forms\n\nProvide a lookup table on either the attribute level or attribute form level, as it is required for the object to be committed to the metadata. A lookup table can be defined on the attribute level using \"attributeLookupTable\", or the attribute form level using \"lookupTable\". If \"LookupTable\" is defined at the attribute form level, it is used, or it falls back to \"attributeLookupTable\".\n\nProvide \"keyForm\" and \"displays\", as they are required for the object to be committed to the metadata.\n\nThe changeset ID can be obtained using the changeset creation API. An authorization token is required to execute the request and can be obtained using Authentication endpoints.\n\nTo save the newly updated attribute to the metadata, commit using the changeset commit API.     \n"
											},
											"response": []
										},
										{
											"name": "Commit the changeset changes to the metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Commit changeset\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId/commit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId",
														"commit"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												},
												"description": "Commits a changeset. All objects created or modified by the modeling APIs (filter, fact, tables, etc.) that use this changeset are saved to the metadata as one single transaction.\nThe changeset is still valid and can be used in subsequent requests to read, create, and/or update objects.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Delete the changeset",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete the changeset\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required) Authorization Token"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/model/changesets/:changesetId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"model",
														"changesets",
														":changesetId"
													],
													"variable": [
														{
															"key": "changesetId",
															"value": "{{rd_changesetId}}",
															"description": "(Required) Changeset ID"
														}
													]
												},
												"description": "Deletes an existing changeset. All uncommitted new objects or updates to existing objects performed with the modeling APIs (Filter, Tables, Facts, etc.) against this changeset are dismissed.\nThe changeset ID is required to execute the request and can be obtained using the changeset creation API.\nAn authorization token is required to execute the request and can be obtained using Authentication endpoints.\n"
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"authToken\");",
															"    pm.environment.unset(\"rd_filterId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"description": "(Required)"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete (Cleanup) Datasource",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Browse folders/Auth\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get info for all database sources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for database sources\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const datasources = pm.response.json();",
													"    for (i=0; datasources.datasources.length; i++) {",
													"        const datasource = datasources.datasources[i];",
													"        ",
													"        if (datasource.name == \"Test_Snow_Source\") { // can change \"Test_Snow_Source\" to your datasource",
													"            pm.environment.set(\"rd_datasourceId\", datasource.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources"
											],
											"query": [
												{
													"key": "id",
													"value": "sed minim",
													"description": "Comma-separated string of datasources id",
													"disabled": true
												},
												{
													"key": "database.type",
													"value": "snow_flake",
													"description": "Comma-separated string of database types",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all database sources. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You can use query parameters to specify the datasource idsand the database types in form of list."
									},
									"response": []
								},
								{
									"name": "Delete a specific database source",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete datasource\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/{{rd_datasourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"{{rd_datasourceId}}"
											]
										},
										"description": "Delete a specific database source based on id. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the database login ID in the path of the request; you obtain the database source ID using GET /datasources."
									},
									"response": []
								},
								{
									"name": "Get all datasource connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasource connection\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const connections = pm.response.json();",
													"    for (i=0; connections.connections.length; i++) {",
													"        if (connections.connections[i].name == \"Test_Snow_Connection\") { // can change to your connection name",
													"            connection = connections.connections[i]",
													"            pm.environment.set(\"rd_connectionId\", connection.id);",
													"            break;",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all datasource connections. You obtain authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Delete a datasource connection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete datasource connection\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/connections/{{rd_connectionId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"connections",
												"{{rd_connectionId}}"
											]
										},
										"description": "Delete a datasource connection based on id. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the datasource login ID in the path of the request; you obtain the database source ID using GET /datasources/connections."
									},
									"response": []
								},
								{
									"name": "Get datasource logins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get info for datasource logins\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    const logins = pm.response.json();",
													"    for (i=0; logins.logins.length; i++) {",
													"        if (logins.logins[i].name == \"Test_Snow_Login\") { // can change to your login object name",
													"            login = logins.logins[i]",
													"            pm.environment.set(\"rd_datasourceLoginId\", login.id);",
													"            break;",
													"        }",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/logins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"logins"
											],
											"query": [
												{
													"key": "fields",
													"value": "sed minim",
													"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
													"disabled": true
												}
											]
										},
										"description": "Get information for all datasource logins. You obtain the authorization token needed to execute the request using POST /auth/login. You pass the authorization token in the request header."
									},
									"response": []
								},
								{
									"name": "Delete a datasource login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"delete datasource login\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}",
												"description": "(Required) Authorization token"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/datasources/logins/{{rd_datasourceLoginId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"datasources",
												"logins",
												"{{rd_datasourceLoginId}}"
											]
										},
										"description": "Delete a specific datasource login based on id. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. You specify the datasource login ID in the path of the request; you obtain the database source ID using GET /datasources/logins}."
									},
									"response": []
								},
								{
									"name": "Logout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.environment.unset(\"authToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-MSTR-AuthToken",
												"value": "{{authToken}}"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"description": "This workflow sample demonstrates how to delete a datasource login, datasource connection, and database source."
						}
					],
					"description": "You can use REST API requests to create, update, and add datasources to project through the Modeling service."
				},
				{
					"name": "Migrations",
					"item": [
						{
							"name": "Object Migration and Storage service setting",
							"item": [
								{
									"name": "Import Migration",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Auth Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\", postman.getResponseHeader(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new migration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create migration\", function () {",
															"    pm.response.to.have.status(201);",
															"    const migration = pm.response.json();",
															"    pm.environment.set(\"rd_migrationId\", migration.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"packageInfo\": {\n\t\t\"type\": \"configuration\",\n\t\t\"name\": \"test_1\",\n\t\t\"environment\": {\n\t\t\t\"id\": \"test_1\",\n\t\t\t\"name\": \"test_1\"\n\t\t},\n\t\t\"tocView\": {\n\t\t\t\"settings\": {\n\t\t\t\t\"aclOnReplacingObjects\": \"use_existing\",\n\t\t\t\t\"aclOnNewObjects\": [\n\t\t\t\t\t\"keep_acl_as_source_object\"\n\t\t\t\t],\n\t\t\t\t\"defaultAction\": \"use_existing\"\n\t\t\t},\n\t\t\t\"content\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"4F0CE34945D80B04FEEAE89CFD395B7B\",\n\t\t\t\t\t\"name\": \"ctc-ora11g\",\n\t\t\t\t\t\"type\": 31,\n\t\t\t\t\t\"action\": \"use_existing\",\n\t\t\t\t\t\"includeDependents\": true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"C41538244891FB26D3DEFCA8C3BA9AE3\",\n\t\t\t\t\t\"name\": \"XQuery2\",\n\t\t\t\t\t\"type\": 29,\n\t\t\t\t\t\"action\": \"replace\",\n\t\t\t\t\t\"includeDependents\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"17355B1B11D75891B0005FB2FB2524D0\",\n\t\t\t\t\t\"name\": \"CAM_WH\",\n\t\t\t\t\t\"type\": 30,\n\t\t\t\t\t\"action\": \"use_newer\",\n\t\t\t\t\t\"includeDependents\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"85649E2005E343A19269C39CC3DE9E53\",\n\t\t\t\t\t\"name\": \"Actian Matrix 5.0\",\n\t\t\t\t\t\"type\": 57,\n\t\t\t\t\t\"action\": \"use_older\",\n\t\t\t\t\t\"includeDependents\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"719D165ADFFE4A4D804E93D7A0C6CDE7\",\n\t\t\t\t\t\"name\": \"Microsoft Outlook\",\n\t\t\t\t\t\"type\": 9,\n\t\t\t\t\t\"action\": \"force_replace\",\n\t\t\t\t\t\"includeDependents\": false\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"treeView\": {}\n\t},\n\t\"importInfo\": {\n\t\t\"environment\": {\n\t\t\t\"id\": \"test_1\",\n\t\t\t\"name\": \"test_1\"\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a specific migration information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get migration info\", function () {",
															"    pm.response.to.have.status(200);",
															"    var data = JSON.parse(responseBody);",
															"    pm.environment.set(\"rd_packageInfo\", JSON.stringify(data.packageInfo));",
															"    pm.environment.set(\"rd_importInfo\", JSON.stringify(data.importInfo));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}?showContent=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													],
													"query": [
														{
															"key": "showContent",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request migration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"request migration\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"importInfo\":{\n        \"importRequestStatus\":\"requested\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Validation migration reqeust",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"approve migration\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "prefer",
														"value": "respond-async"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{rd_migrationId}}\",\n    \"packageInfo\": {{rd_packageInfo}},\n    \"importInfo\": {{rd_importInfo}},\n    \"version\": \"2\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}/validation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}",
														"validation"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approve migration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"approve migration\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"importInfo\":{\n        \"importRequestStatus\":\"approved\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the migration information after approved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get migration Info\", function () {",
															"    pm.response.to.have.status(200);",
															"    var data = JSON.parse(responseBody);",
															"    pm.environment.set(\"rd_packageInfo\", JSON.stringify(data.packageInfo));",
															"    pm.environment.set(\"rd_packageInfoId\", data.packageInfo.id);",
															"    pm.environment.set(\"rd_packageInfoName\", data.packageInfo.name);",
															"    pm.environment.set(\"rd_lastUpdatedDate\", data.packageInfo.lastUpdatedDate);",
															"    pm.environment.set(\"rd_creator\", JSON.stringify(data.packageInfo.creator));",
															"    pm.environment.set(\"rd_creationDate\", data.packageInfo.creationDate);",
															"    pm.environment.set(\"rd_storage\", JSON.stringify(data.packageInfo.storage));",
															"    pm.environment.set(\"rd_tocView\", JSON.stringify(data.packageInfo.tocView));",
															"    pm.environment.set(\"rd_importInfo\", JSON.stringify(data.importInfo));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}?showContent=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													],
													"query": [
														{
															"key": "showContent",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Import Migration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"import migration\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{rd_migrationId}}\",\n    \"packageInfo\": {\n        \"id\": \"{{rd_packageInfoId}}\",\n        \"name\": \"{{rd_packageInfoName}}\",\n        \"replicated\": true,\n        \"type\": \"configuration\",\n        \"lastUpdatedDate\": \"{{rd_lastUpdatedDate}}\",\n        \"creator\": {{rd_creator}},\n        \"creationDate\": \"{{rd_creationDate}}\",\n        \"environment\": {\n            \"id\": \"test_1\",\n            \"name\": \"test_1\"\n        },\n        \"storage\": {{rd_storage}},\n        \"project\": {},\n        \"status\": \"locked\",\n        \"message\": \"\",\n        \"progress\": 100.0,\n        \"deleted\": false,\n        \"existing\": true,\n        \"tocView\": {{rd_tocView}},\n        \"purpose\": \"object_migration\",\n        \"treeView\": \"{}\"\n    },\n    \"importInfo\": {{rd_importInfo}},\n    \"version\": \"2\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}?prefer=respond-async&generateUndo=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													],
													"query": [
														{
															"key": "prefer",
															"value": "respond-async"
														},
														{
															"key": "generateUndo",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get migration import status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"query import status\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrations/{{rd_migrationId}}?showContent=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														"{{rd_migrationId}}"
													],
													"query": [
														{
															"key": "showContent",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete migration packages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete migration\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/migrations/?packageId={{rd_packageInfoId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrations",
														""
													],
													"query": [
														{
															"key": "packageId",
															"value": "{{rd_packageInfoId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Migration Group API",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Auth Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\", postman.getResponseHeader(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a new migration group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create migration group\", function () {",
															"    pm.response.to.have.status(201);",
															"    const migrationGroup = pm.response.json();",
															"    pm.environment.set(\"rd_migrationGroupId\", migrationGroup.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"MultiPackageMultiProject\",\n    \"sourceEnvironment\": {\n        \"id\": \"sss\",\n        \"name\": \"sss\"\n    },\n    \"targetEnvironment\": {\n        \"id\": \"sss\",\n        \"name\": \"sss\"\n    },\n    \"treeView\": {},\n    \"migrations\": [\n        {\n            \"packageInfo\": {\n                \"type\": \"project\",\n                \"purpose\": \"migration_group\",\n                \"project\": {\n                    \"id\": \"{{projectId}}\",\n                    \"name\": \"MicroStrategy Tutorial\"\n                },\n                \"tocView\": {\n                    \"settings\": {\n                        \"updateSchema\": [\n                            \"recal_table_logical_size\"\n                        ],\n                        \"aclOnReplacingObjects\": \"replace\",\n                        \"aclOnNewObjects\": [\n                            \"inherit_acl_as_dest_folder\"\n                        ],\n                        \"defaultAction\": \"keep_both\"\n                    },\n                    \"content\": [\n                        {\n                            \"id\": \"D8EE8AEC11E794390FF00080EF053519\",\n                            \"type\": 55,\n                            \"action\": \"use_existing\",\n                            \"includeDependents\": true\n                        }\n                    ]\n                }\n            },\n            \"importInfo\": {\n                \"project\": {\n                    \"id\": \"{{projectId}}\",\n                    \"name\": \"MicroStrategy Tutorial\"\n                }\n            }\n        },\n        {\n            \"packageInfo\": {\n                \"type\": \"project\",\n                \"purpose\": \"migration_group\",\n                \"project\": {\n                    \"id\": \"E8D198774597EEDA4848F4962AC42A01\",\n                    \"name\": \"Testing3\"\n                },\n                \"tocView\": {\n                    \"settings\": {\n                        \"updateSchema\": [\n                            \"recal_table_logical_size\"\n                        ],\n                        \"aclOnReplacingObjects\": \"replace\",\n                        \"aclOnNewObjects\": [\n                            \"inherit_acl_as_dest_folder\"\n                        ],\n                        \"defaultAction\": \"keep_both\"\n                    },\n                    \"content\": [\n                            {\n                                \"id\": \"233AE5EF48F48E84B4626D8E0E8806DE\",\n                                \"type\": 55,\n                                \"action\": \"use_existing\",\n                                \"includeDependents\": false\n                            }\n                    ]\n                }\n            },\n            \"importInfo\": {\n                \"project\": {\n                    \"id\": \"E8D198774597EEDA4848F4962AC42A01\",\n                    \"name\": \"Testing3\"\n                }\n            }\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a specific migration group information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create migration group\", function () {",
															"    pm.response.to.have.status(201);",
															"    var data = JSON.parse(responseBody);",
															"    var migration_01 = data.migrations[0];",
															"    var migration_02 = data.migrations[1];",
															"    pm.environment.set(\"rd_migration01Id\", JSON.stringify(migration_01.id));",
															"    pm.environment.set(\"rd_migration01PackageId\", migration_01.packageInfo.id);",
															"    pm.environment.set(\"rd_migration01PackageGroupId\", migration_01.packageInfo.groupId);",
															"    pm.environment.set(\"rd_migration02Id\", JSON.stringify(migration_02.id));",
															"    pm.environment.set(\"rd_migration02PackageId\", JSON.stringify(migration_02.packageInfo.id));",
															"    pm.environment.set(\"rd_migration02PackageGroupId\", JSON.stringify(migration_02.packageInfo.groupId));",
															"    pm.environment.set(\"rd_importInfo01\", JSON.stringify(migration_01.importInfo));",
															"    pm.environment.set(\"rd_importInfo02\", JSON.stringify(migration_02.importInfo));",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups/{{rd_migrationGroupId}}?showContent=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups",
														"{{rd_migrationGroupId}}"
													],
													"query": [
														{
															"key": "showContent",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request migration for migration group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"request migration\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"importRequestStatus\": \"requested\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups/{{rd_migrationGroupId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups",
														"{{rd_migrationGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Approve migration for migration group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"approve migration\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"importRequestStatus\": \"approved\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups/{{rd_migrationGroupId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups",
														"{{rd_migrationGroupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Import Migration Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"import migration group\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Prefer",
														"value": "respond-async"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "body",
															"value": "",
															"description": "Get body from GET /migrationGroups/{{rd_migrationGroupId}}?showContent=all, and change all the \"replicated\" to true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups/{{rd_migrationGroupId}}?prefer=respond-async&generateUndo=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups",
														"{{rd_migrationGroupId}}"
													],
													"query": [
														{
															"key": "prefer",
															"value": "respond-async"
														},
														{
															"key": "generateUndo",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get import status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"query import status\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202])",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups/{{rd_migrationGroupId}}?showContent=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups",
														"{{rd_migrationGroupId}}"
													],
													"query": [
														{
															"key": "showContent",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete migration group",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete migration group\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/migrationGroups?packageGroupId={{rd_migration01PackageGroupId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"migrationGroups"
													],
													"query": [
														{
															"key": "packageGroupId",
															"value": "{{rd_migration01PackageGroupId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Upload and Download Package",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Auth Login\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\", postman.getResponseHeader(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "trigger package uploading",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"upload package\", function () {",
															"    pm.response.to.have.status(201);",
															"    var data = JSON.parse(responseBody);",
															"    pm.environment.set(\"fileId\", data.id);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"upload_test_package_1\", \n    \"extension\":\"mmp\",\n    \"type\": \"migrations.packages\",\n    \"size\":1000,\n    \"sha256\": \"f392221a7d188949c19a9c8a8b5c991135ea31269658d946ebc424c74a3b5dc6\", \n    \"environment\":{\"id\":\"sss\",\"name\":\"sss\"},\n    \"extraInfo\": {\n        \"packageType\": \"project\",\n        \"packagePurpose\": \"object_migration\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/mstrServices/library/storage/sharedFileStore/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"mstrServices",
														"library",
														"storage",
														"sharedFileStore",
														"files"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload a binary package",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"upload migration package\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"value": "",
															"description": "this function allow you upload a existing mmp file",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/mstrServices/library/storage/sharedFileStore/files/{{fileId}}/binary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"mstrServices",
														"library",
														"storage",
														"sharedFileStore",
														"files",
														"{{fileId}}",
														"binary"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get package list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get package list\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/mstrServices/library/storage/sharedFileStore/files?type=migrations.packages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"mstrServices",
														"library",
														"storage",
														"sharedFileStore",
														"files"
													],
													"query": [
														{
															"key": "type",
															"value": "migrations.packages"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Download package file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get package list\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/octet-stream"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/mstrServices/library/storage/sharedFileStore/files/{{fileId}}/binary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"mstrServices",
														"library",
														"storage",
														"sharedFileStore",
														"files",
														"{{fileId}}",
														"binary"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete an uploaded package",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete upload package\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/octet-stream"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/mstrServices/library/storage/sharedFileStore/files/{{fileId}}?type=migrations.packages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"mstrServices",
														"library",
														"storage",
														"sharedFileStore",
														"files",
														"{{fileId}}"
													],
													"query": [
														{
															"key": "type",
															"value": "migrations.packages"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Packages Migration",
							"item": [
								{
									"name": "Create a Migration Package",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/Auth\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create empty package",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create empty package\", function () {",
															"    pm.response.to.have.status(201);",
															"    const emptyPackage = pm.response.json();",
															"    pm.environment.set(\"rd_packageId\", emptyPackage.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the package definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"update package definition\", function () {",
															"    pm.response.to.have.status(202);",
															"    setTimeout(function(){}, [1500]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\": \"project\",\n    \"settings\": {\n        \"updateSchema\": [\n            \"recal_table_logical_size\",\n            \"recal_table_keys_fact_entry_level\"\n        ],\n        \"aclOnReplacingObjects\": \"use_existing\",\n        \"aclOnNewObjects\": [\"keep_acl_as_source_object\"],\n        \"defaultAction\": \"replace\"\n    },\n    \"content\": [\n        {\n            \"id\": \"8D679D5111D3E4981000E787EC6DE8A4\",\n            \"name\": \"Year\",\n            \"type\": 12,\n            \"action\": \"replace\",\n            \"includeDependents\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get package definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get package definition\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Download the package and save as binary file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"download package as binary file\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/octet-stream",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id/binary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id",
														"binary"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												},
												"description": "Download the package binary in the response to upload in PUT /api/packages/{{packageId}}/binary"
											},
											"response": []
										},
										{
											"name": "Delete the package",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete package\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_packageId\");",
															"    pm.environment.unset(\"rd_importId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Import a Migration Package",
									"item": [
										{
											"name": "Login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/Auth\", function () {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.set(\"authToken\",pm.response.headers.get(\"X-MSTR-AuthToken\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\":\"{{username}}\",\n    \"password\":\"{{password}}\",\n    \"loginMode\":{{loginMode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create empty package",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create empty package\", function () {",
															"    pm.response.to.have.status(201);",
															"    const emptyPackage = pm.response.json();",
															"    pm.environment.set(\"rd_packageId\", emptyPackage.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Upload a package binary file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"upload package binary file\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"description": "The binary file downloaded from /api/packages/:packageId/binary",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id/binary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id",
														"binary"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get package definition",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"get package definition\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create import process",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"create import process\", function () {",
															"    pm.response.to.have.status(202);",
															"",
															"    const importProcess = pm.response.json();",
															"    pm.environment.set(\"rd_importId\", importProcess.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/imports?packageId={{rd_packageId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														"imports"
													],
													"query": [
														{
															"key": "packageId",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Query import status",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"query import status\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 202])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/imports/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														"imports",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_importId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Download undo package binary file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"download undo package file\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/imports/:id/undoPackage/binary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														"imports",
														":id",
														"undoPackage",
														"binary"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_importId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete import process",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete import process\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/imports/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														"imports",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_importId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the package",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"delete package\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													},
													{
														"key": "X-MSTR-ProjectID",
														"value": "{{projectId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Prefer",
														"value": "respond-async",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/packages/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"packages",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{rd_packageId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Logout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Browse folders/logout\", function() {",
															"    pm.response.to.have.status(204);",
															"    pm.environment.unset(\"rd_packageId\");",
															"    pm.environment.unset(\"rd_importId\");",
															"    pm.environment.unset(\"authToken\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-MSTR-AuthToken",
														"value": "{{authToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"logout"
													]
												}
											},
											"response": []
										}
									],
									"description": "This workflow demonstrates how to create and import a migration package."
								}
							],
							"description": "You can use REST API requests to create and import migration packages. The requests in the folder cannot be run in sequence using Postman's collection runner because you must download package binaries yourself."
						}
					]
				},
				{
					"name": "Manage Bookmarks",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"configure session\", function () {",
											"    pm.response.to.have.status(204);",
											"    const authToken = pm.response.headers.get('X-MSTR-AuthToken')",
											"    pm.environment.set(\"authToken\", authToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\",\n    \"loginMode\": {{loginMode}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								},
								"description": "Authenticate a user and create an HTTP session on the web server where the user’s MicroStrategy sessions are stored. This request returns an authorization token (X-MSTR-AuthToken) which will be submitted with subsequent requests. The body of the request contains the information needed to create the session. The loginMode parameter in the body specifies the authentication mode to use. You can authenticate with one of the following authentication modes: Standard (1), Anonymous (8), or LDAP (16). Authentication modes can be enabled through the System Administration REST APIs, if they are supported by the deployment. If you are not able to authenticate using any of the authentication modes, please contact your administrator to determine current support or currently enabled authentication modes."
							},
							"response": []
						},
						{
							"name": "Get information for the current user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get info for current user\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"rd_userId\", pm.response.json().id)",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/sessions/userInfo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"sessions",
										"userInfo"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Comma separated top-level field whitelist. This allows client to selectively retrieve part of the response model. If specified, extra filtering will be applied, and for top-level object (if root model is an array, each array element), only the listed fields will be kept in the response. e.g. \"id,elements\" means to keep only the \"id\" field and the whole \"elements\" array field, omitting all other fields of top-level response model. ",
											"disabled": true
										}
									]
								},
								"description": "Get information for the authenticated user. You obtain the authorization token needed to execute the request using POST /auth/login; you pass the authorization token in the request header. This request returns information about the authenticated user, locale, timeout duration, maximum number of concurrent searches, and limit on instances kept in memory."
							},
							"response": []
						},
						{
							"name": "Publish a dossier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Publish a dossier\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{dossierId}}\",\n    \"recipients\": [\n        {\n            \"id\": \"{{rd_userId}}\"\n        }\n    ],\n    \"isInstance\": \"false\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/library",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"library"
									]
								},
								"description": "Publish a document to users or user groups in a specific project. This makes the document available in the library of each user it is published to. You can publish a document or an instance of a document; you can publish a document to any user, but you can only publish an instance to the current user. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide information about the document to be published in the body parameter of the request; this includes the document or instance to be published and the users it will be published to."
							},
							"response": []
						},
						{
							"name": "Create an instance of a dossier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"create an instance of dossier\", function () {",
											"    pm.response.to.have.status(201);",
											"    const dossierInstanceId = pm.response.json().mid;",
											"    pm.environment.set(\"rd_dossierInstanceId\", dossierInstanceId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									},
									{
										"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
										"key": "Prefer",
										"value": "respond-async",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"filters\":null,\"persistViewState\":true,\"resolveOnly\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"dossiers",
										":dossierId",
										"instances"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "dossierId",
											"value": "{{dossierId}}",
											"description": "(Required) Dossier ID"
										}
									]
								},
								"description": "Execute a specific dossier and create an instance of the dossier. A dossier and a document have the same base object; a dossier is simply a different view of the document. The request returns the message ID of the dossier instance that was created.  You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request. The body parameter in the request contains linking and bookmark information for the dossier.You can apply filter criteria in the request body."
							},
							"response": []
						},
						{
							"name": "Retrieve a published shortcut for the dossier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get instance with shortcuts\", function () {",
											"    pm.response.to.have.status(200);",
											"    const shortcutId = pm.response.json().id;",
											"    pm.environment.set(\"rd_shortcutId\", shortcutId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"description": "(Required) Authorization token"
									},
									{
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}",
										"description": "(Required) Project ID"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/documents/:id/instances/:instanceId/shortcut",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"documents",
										":id",
										"instances",
										":instanceId",
										"shortcut"
									],
									"query": [
										{
											"key": "includeTOC",
											"value": "false",
											"description": "Whether Dossier TOC (Table of Content) information with chapters & Pages should be included",
											"disabled": true
										},
										{
											"key": "includePrompted",
											"value": "false",
											"description": "Whether prompted property should be included",
											"disabled": true
										},
										{
											"key": "includeCurrentBookmark",
											"value": "false",
											"description": "Whether Dossier Current Bookmark information should be included",
											"disabled": true
										},
										{
											"key": "includeDossierHashes",
											"value": "false",
											"description": "Whether the Dossier version hashes should be included.",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{dossierId}}",
											"description": "(Required) Document ID"
										},
										{
											"key": "instanceId",
											"value": "{{rd_dossierInstanceId}}",
											"description": "(Required) Document instance ID"
										}
									]
								},
								"description": "Retrieve a published shortcut from a specific document instance. Whenever a document is published, a shortcut is created in the target user’s library to that document instance (base object). You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the document and the document instance by specifying the document ID and the document instance ID in the path of the request; you get the document instance ID using POST /documents/{id}/instances. The response includes information about the shortcut (name, ID and whether the current user owns the shortcut), as well as the document (base object) it targets."
							},
							"response": []
						},
						{
							"name": "Get a list of bookmarks from a shortcut object",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/shortcuts/:shortcutId/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"shortcuts",
										":shortcutId",
										"bookmarks"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "shortcutId",
											"value": "{{rd_shortcutId}}",
											"description": "(Required) The ID of the document shortcut to execute"
										}
									]
								},
								"description": "Get a Bookmark list from a Shortcut Object. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header.You provide the ID of the document shortcut you want to execute in the path of the request."
							},
							"response": []
						},
						{
							"name": "Add a new bookmark into the current shortcut object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add a new bookmark\", function () {",
											"    pm.response.to.have.status(201);",
											"    const bookmarkId = pm.response.json().id;",
											"    pm.environment.set(\"rd_bookmarkId\", bookmarkId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test\",\n    \"instanceId\": \"{{rd_dossierInstanceId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookmarks"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									]
								},
								"description": "Add a new Bookmark into current Shortcut Object. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header. You provide the bookmark information as the body of the request."
							},
							"response": []
						},
						{
							"name": "Update a bookmark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update a bookmark\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookmarks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookmarks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{rd_bookmarkId}}",
											"description": "(Required) Bookmark ID"
										}
									]
								},
								"description": "Update a bookmark. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header.You provide the ID of the bookmark you want to update in the path of the request which can be obtained using GET /shortcuts/{shortcutId}/bookmarks. You pass bookmark information to be updated in the body of the request."
							},
							"response": []
						},
						{
							"name": "Get a list of bookmarks from a shortcut object again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get a list of bookmarks\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/shortcuts/:shortcutId/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"shortcuts",
										":shortcutId",
										"bookmarks"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "shortcutId",
											"value": "{{rd_shortcutId}}",
											"description": "(Required) The ID of the document shortcut to execute"
										}
									]
								},
								"description": "Get a Bookmark list from a Shortcut Object. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header.You provide the ID of the document shortcut you want to execute in the path of the request."
							},
							"response": []
						},
						{
							"name": "Create an instance of a dossier with bookmark id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"create an instance of dossier\", function () {",
											"    pm.response.to.have.status(201);",
											"    const dossierInstanceId = pm.response.json().mid;",
											"    pm.environment.set(\"rd_dossierInstanceId\", dossierInstanceId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"description": "(Required) Authorization token"
									},
									{
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}",
										"description": "(Required) Project ID"
									},
									{
										"key": "Prefer",
										"value": "respond-async",
										"description": "Prefer--allow client to set preferences. Currently, respond-async allows client to execute in async mode",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bookmarkInfo\":{\n      \"id\": \"{{rd_bookmarkId}}\",\n      \"resetManipulation\":true\n  },\n  \"persistViewState\": true,\n  \"resolveOnly\":false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/dossiers/:dossierId/instances",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"dossiers",
										":dossierId",
										"instances"
									],
									"query": [
										{
											"key": "fields",
											"value": "",
											"description": "Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, \"id,elements\" keeps only the \"id\" field and whole \"elements\" array field, omitting all other fields in the top-level response model.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "dossierId",
											"value": "{{dossierId}}",
											"description": "(Required) Dossier ID"
										}
									]
								},
								"description": "Execute a specific dossier and create an instance of the dossier. A dossier and a document have the same base object; a dossier is simply a different view of the document. The request returns the message ID of the dossier instance that was created.  You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dossier by specifying the dossier ID in the path of the request. The body parameter in the request contains linking and bookmark information for the dossier.You can apply filter criteria in the request body."
							},
							"response": []
						},
						{
							"name": "Delete a bookmark",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) Authorization token",
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}"
									},
									{
										"description": "(Required) Project ID",
										"key": "X-MSTR-ProjectID",
										"value": "{{projectId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"shortcutId\": \"{{rd_shortcutId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookmarks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookmarks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{rd_bookmarkId}}",
											"description": "(Required) Bookmark ID"
										}
									]
								},
								"description": "Delete a bookmark. You obtain the authorization token needed to execute the request using POST /auth/login; you obtain the project ID using GET /projects. You pass the authorization token and the project ID in the request header.You provide the ID of the bookmark you want to delete in the path of the request which can be obtained using GET /shortcuts/{shortcutId}/bookmarks. You may pass bookmark shortcut information to be deleted in the body of the request."
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"rd_shortcutId\");",
											"    pm.environment.unset(\"authToken\");",
											"    pm.environment.unset(\"rd_bookmarkId\");",
											"    pm.environment.unset(\"rd_dossierInstanceId\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-MSTR-AuthToken",
										"value": "{{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"description": "This folder shows examples of publishing dossier, getting bookmarks in dossier instance, adding bookmarks and deleting bookmarks.\n\nRequirements: You need to use an account that has \"Publish Dossier\" permission to add dossier to user's library.\n\nChange the dossier id to the one you want."
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}